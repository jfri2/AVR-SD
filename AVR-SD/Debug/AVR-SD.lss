
AVR-SD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f8  00800100  00002dd4  00002e68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002dd4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000237  008001f8  008001f8  00002f60  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002f60  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000188  00000000  00000000  00002fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000033e4  00000000  00000000  00003144  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000084c  00000000  00000000  00006528  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b42  00000000  00000000  00006d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000618  00000000  00000000  000078b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000987  00000000  00000000  00007ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002aa4  00000000  00000000  00008857  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b0  00000000  00000000  0000b2fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 26 02 	jmp	0x44c	; 0x44c <__ctors_end>
       4:	0c 94 43 02 	jmp	0x486	; 0x486 <__bad_interrupt>
       8:	0c 94 43 02 	jmp	0x486	; 0x486 <__bad_interrupt>
       c:	0c 94 43 02 	jmp	0x486	; 0x486 <__bad_interrupt>
      10:	0c 94 43 02 	jmp	0x486	; 0x486 <__bad_interrupt>
      14:	0c 94 43 02 	jmp	0x486	; 0x486 <__bad_interrupt>
      18:	0c 94 43 02 	jmp	0x486	; 0x486 <__bad_interrupt>
      1c:	0c 94 43 02 	jmp	0x486	; 0x486 <__bad_interrupt>
      20:	0c 94 43 02 	jmp	0x486	; 0x486 <__bad_interrupt>
      24:	0c 94 43 02 	jmp	0x486	; 0x486 <__bad_interrupt>
      28:	0c 94 43 02 	jmp	0x486	; 0x486 <__bad_interrupt>
      2c:	0c 94 43 02 	jmp	0x486	; 0x486 <__bad_interrupt>
      30:	0c 94 43 02 	jmp	0x486	; 0x486 <__bad_interrupt>
      34:	0c 94 43 02 	jmp	0x486	; 0x486 <__bad_interrupt>
      38:	0c 94 43 02 	jmp	0x486	; 0x486 <__bad_interrupt>
      3c:	0c 94 43 02 	jmp	0x486	; 0x486 <__bad_interrupt>
      40:	0c 94 43 02 	jmp	0x486	; 0x486 <__bad_interrupt>
      44:	0c 94 43 02 	jmp	0x486	; 0x486 <__bad_interrupt>
      48:	0c 94 43 02 	jmp	0x486	; 0x486 <__bad_interrupt>
      4c:	0c 94 43 02 	jmp	0x486	; 0x486 <__bad_interrupt>
      50:	0c 94 43 02 	jmp	0x486	; 0x486 <__bad_interrupt>
      54:	0c 94 43 02 	jmp	0x486	; 0x486 <__bad_interrupt>
      58:	0c 94 43 02 	jmp	0x486	; 0x486 <__bad_interrupt>
      5c:	0c 94 43 02 	jmp	0x486	; 0x486 <__bad_interrupt>
      60:	0c 94 43 02 	jmp	0x486	; 0x486 <__bad_interrupt>
      64:	0c 94 43 02 	jmp	0x486	; 0x486 <__bad_interrupt>
      68:	71 10       	cpse	r7, r1
      6a:	94 10       	cpse	r9, r4
      6c:	e6 10       	cpse	r14, r6
      6e:	96 11       	cpse	r25, r6
      70:	96 11       	cpse	r25, r6
      72:	22 11       	cpse	r18, r2
      74:	2c 11       	cpse	r18, r12
      76:	2c 11       	cpse	r18, r12
      78:	2c 11       	cpse	r18, r12
      7a:	93 11       	cpse	r25, r3

0000007c <__trampolines_end>:
      7c:	20 46       	sbci	r18, 0x60	; 96
      7e:	72 65       	ori	r23, 0x52	; 82
      80:	65 20       	and	r6, r5
      82:	4d 65       	ori	r20, 0x5D	; 93
      84:	6d 6f       	ori	r22, 0xFD	; 253
      86:	72 79       	andi	r23, 0x92	; 146
      88:	3a 20       	and	r3, r10
	...

0000008b <__c.1984>:
      8b:	54 6f 74 61 6c 20 4d 65 6d 6f 72 79 3a 20 00        Total Memory: .

0000009a <__c.1957>:
      9a:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
      aa:	20 63 6c 75 73 74 65 72 00                           cluster.

000000b3 <__c.1955>:
      b3:	45 6e 64 20 6f 66 20 43 6c 75 73 74 65 72 20 43     End of Cluster C
      c3:	68 61 69 6e 00                                      hain.

000000c8 <__c.1946>:
      c8:	20 46 69 6c 65 20 43 72 65 61 74 65 64 21 00         File Created!.

000000d7 <__c.1940>:
      d7:	20 46 69 6c 65 20 61 70 70 65 6e 64 65 64 21 00      File appended!.

000000e7 <__c.1936>:
      e7:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
      f7:	21 00                                               !.

000000f9 <__c.1927>:
      f9:	20 45 6e 74 65 72 20 74 65 78 74 20 28 65 6e 64      Enter text (end
     109:	20 77 69 74 68 20 7e 29 3a 00                        with ~):.

00000113 <__c.1924>:
     113:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
     123:	21 00                                               !.

00000125 <__c.1922>:
     125:	20 43 72 65 61 74 69 6e 67 20 46 69 6c 65 2e 2e      Creating File..
	...

00000136 <__c.1918>:
     136:	20 20 46 69 6c 65 20 61 6c 72 65 61 64 79 20 65       File already e
     146:	78 69 73 74 69 6e 67 2c 20 61 70 70 65 6e 64 69     xisting, appendi
     156:	6e 67 20 64 61 74 61 2e 2e 00                       ng data...

00000160 <__c.1877>:
     160:	49 6e 76 61 6c 69 64 20 66 69 6c 65 4e 61 6d 65     Invalid fileName
     170:	2e 2e 00                                            ...

00000173 <__c.1864>:
     173:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     183:	20 63 6c 75 73 74 65 72 00                           cluster.

0000018c <__c.1843>:
     18c:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     19c:	20 63 6c 75 73 74 65 72 00                           cluster.

000001a5 <__c.1834>:
     1a5:	52 4f 4f 54 00                                      ROOT.

000001aa <__c.1832>:
     1aa:	44 49 52 00                                         DIR.

000001ae <__c.1830>:
     1ae:	20 20 20 00                                            .

000001b2 <__c.1828>:
     1b2:	46 49 4c 45 00                                      FILE.

000001b7 <__c.1826>:
     1b7:	20 20 20 00                                            .

000001bb <__c.1819>:
     1bb:	46 69 6c 65 20 64 65 6c 65 74 65 64 21 00           File deleted!.

000001c9 <__c.1817>:
     1c9:	44 65 6c 65 74 69 6e 67 2e 2e 00                    Deleting...

000001d4 <__c.1812>:
     1d4:	46 69 6c 65 20 64 6f 65 73 20 6e 6f 74 20 65 78     File does not ex
     1e4:	69 73 74 21 00                                      ist!.

000001e9 <__c.2188>:
     1e9:	20 49 6e 76 61 6c 69 64 20 6f 70 74 69 6f 6e 21      Invalid option!
	...

000001fa <__c.2183>:
     1fa:	20 66 69 6c 65 20 6e 61 6d 65 20 74 6f 6f 20 6c      file name too l
     20a:	6f 6e 67 2e 2e 00                                   ong...

00000210 <__c.2176>:
     210:	45 6e 74 65 72 20 66 69 6c 65 20 6e 61 6d 65 3a     Enter file name:
     220:	20 00                                                .

00000222 <__c.2170>:
     222:	52 65 61 64 20 73 75 63 63 65 73 73 66 75 6c 21     Read successful!
	...

00000233 <__c.2165>:
     233:	52 65 61 64 20 66 61 69 6c 65 64 2e 2e 00           Read failed...

00000241 <__c.2162>:
     241:	57 72 69 74 65 20 73 75 63 63 65 73 73 66 75 6c     Write successful
     251:	21 00                                               !.

00000253 <__c.2160>:
     253:	57 72 69 74 65 20 66 61 69 6c 65 64 2e 2e 00        Write failed...

00000262 <__c.2156>:
     262:	20 45 6e 74 65 72 20 74 65 78 74 20 28 45 6e 64      Enter text (End
     272:	20 77 69 74 68 20 7e 29 3a 00                        with ~):.

0000027c <__c.2152>:
     27c:	45 72 61 73 65 64 21 00                             Erased!.

00000284 <__c.2150>:
     284:	45 72 61 73 65 20 66 61 69 6c 65 64 2e 2e 00        Erase failed...

00000293 <__c.2147>:
     293:	45 6e 74 65 72 20 74 68 65 20 42 6c 6f 63 6b 20     Enter the Block 
     2a3:	6e 75 6d 62 65 72 20 28 30 30 30 30 2d 39 39 39     number (0000-999
     2b3:	39 29 3a 00                                         9):.

000002b7 <__c.2144>:
     2b7:	46 41 54 33 32 20 6f 70 74 69 6f 6e 73 20 64 69     FAT32 options di
     2c7:	73 61 62 6c 65 64 21 00                             sabled!.

000002cf <__c.2142>:
     2cf:	3e 20 53 65 6c 65 63 74 20 4f 70 74 69 6f 6e 20     > Select Option 
     2df:	28 30 2d 39 29 3a 20 00                             (0-9): .

000002e7 <__c.2140>:
     2e7:	3e 20 39 20 3a 20 52 65 61 64 20 53 44 20 4d 65     > 9 : Read SD Me
     2f7:	6d 6f 72 79 20 43 61 70 61 63 69 74 79 20 28 54     mory Capacity (T
     307:	6f 74 61 6c 2f 46 72 65 65 29 00                    otal/Free).

00000312 <__c.2138>:
     312:	3e 20 38 20 3a 20 44 65 6c 65 74 65 20 46 69 6c     > 8 : Delete Fil
     322:	65 00                                               e.

00000324 <__c.2136>:
     324:	3e 20 37 20 3a 20 57 72 69 74 65 20 46 69 6c 65     > 7 : Write File
	...

00000335 <__c.2134>:
     335:	3e 20 36 20 3a 20 52 65 61 64 20 46 69 6c 65 00     > 6 : Read File.

00000345 <__c.2132>:
     345:	3e 20 35 20 3a 20 47 65 74 20 66 69 6c 65 20 6c     > 5 : Get file l
     355:	69 73 74 00                                         ist.

00000359 <__c.2130>:
     359:	3e 20 32 20 3a 20 52 65 61 64 20 73 69 6e 67 6c     > 2 : Read singl
     369:	65 20 42 6c 6f 63 6b 00                             e Block.

00000371 <__c.2128>:
     371:	3e 20 31 20 3a 20 57 72 69 74 65 20 73 69 6e 67     > 1 : Write sing
     381:	6c 65 20 42 6c 6f 63 6b 00                          le Block.

0000038a <__c.2126>:
     38a:	3e 20 30 20 3a 20 45 72 61 73 65 20 42 6c 6f 63     > 0 : Erase Bloc
     39a:	6b 73 00                                            ks.

0000039d <__c.2124>:
     39d:	50 72 65 73 73 20 61 6e 79 20 6b 65 79 2e 2e 2e     Press any key...
	...

000003ae <__c.2122>:
     3ae:	46 41 54 33 32 20 6e 6f 74 20 66 6f 75 6e 64 21     FAT32 not found!
	...

000003bf <__c.2120>:
     3bf:	55 6e 6b 6e 6f 77 6e 20 53 44 20 43 61 72 64 20     Unknown SD Card 
     3cf:	44 65 74 65 63 74 65 64 21 00                       Detected!.

000003d9 <__c.2117>:
     3d9:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     3e9:	79 20 43 61 72 64 20 28 56 65 72 20 32 2e 78 29     y Card (Ver 2.x)
     3f9:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

00000404 <__c.2114>:
     404:	48 69 67 68 20 43 61 70 61 63 69 74 79 20 43 61     High Capacity Ca
     414:	72 64 20 44 65 74 65 63 74 65 64 21 00              rd Detected!.

00000421 <__c.2110>:
     421:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     431:	79 20 43 61 72 64 20 28 56 65 72 20 31 2e 78 29     y Card (Ver 1.x)
     441:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

0000044c <__ctors_end>:
     44c:	11 24       	eor	r1, r1
     44e:	1f be       	out	0x3f, r1	; 63
     450:	cf ef       	ldi	r28, 0xFF	; 255
     452:	d8 e0       	ldi	r29, 0x08	; 8
     454:	de bf       	out	0x3e, r29	; 62
     456:	cd bf       	out	0x3d, r28	; 61

00000458 <__do_copy_data>:
     458:	11 e0       	ldi	r17, 0x01	; 1
     45a:	a0 e0       	ldi	r26, 0x00	; 0
     45c:	b1 e0       	ldi	r27, 0x01	; 1
     45e:	e4 ed       	ldi	r30, 0xD4	; 212
     460:	fd e2       	ldi	r31, 0x2D	; 45
     462:	02 c0       	rjmp	.+4      	; 0x468 <__do_copy_data+0x10>
     464:	05 90       	lpm	r0, Z+
     466:	0d 92       	st	X+, r0
     468:	a8 3f       	cpi	r26, 0xF8	; 248
     46a:	b1 07       	cpc	r27, r17
     46c:	d9 f7       	brne	.-10     	; 0x464 <__do_copy_data+0xc>

0000046e <__do_clear_bss>:
     46e:	24 e0       	ldi	r18, 0x04	; 4
     470:	a8 ef       	ldi	r26, 0xF8	; 248
     472:	b1 e0       	ldi	r27, 0x01	; 1
     474:	01 c0       	rjmp	.+2      	; 0x478 <.do_clear_bss_start>

00000476 <.do_clear_bss_loop>:
     476:	1d 92       	st	X+, r1

00000478 <.do_clear_bss_start>:
     478:	af 32       	cpi	r26, 0x2F	; 47
     47a:	b2 07       	cpc	r27, r18
     47c:	e1 f7       	brne	.-8      	; 0x476 <.do_clear_bss_loop>
     47e:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <main>
     482:	0c 94 e8 16 	jmp	0x2dd0	; 0x2dd0 <_exit>

00000486 <__bad_interrupt>:
     486:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000048a <getFirstSector>:
//Function: to calculate first sector address of any given cluster
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
     48a:	cf 92       	push	r12
     48c:	df 92       	push	r13
     48e:	ef 92       	push	r14
     490:	ff 92       	push	r15
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
     492:	a0 91 12 04 	lds	r26, 0x0412
     496:	b0 91 13 04 	lds	r27, 0x0413
     49a:	c0 90 fc 01 	lds	r12, 0x01FC
     49e:	d0 90 fd 01 	lds	r13, 0x01FD
     4a2:	e0 90 fe 01 	lds	r14, 0x01FE
     4a6:	f0 90 ff 01 	lds	r15, 0x01FF
     4aa:	9b 01       	movw	r18, r22
     4ac:	ac 01       	movw	r20, r24
     4ae:	22 50       	subi	r18, 0x02	; 2
     4b0:	31 09       	sbc	r19, r1
     4b2:	41 09       	sbc	r20, r1
     4b4:	51 09       	sbc	r21, r1
     4b6:	0e 94 13 14 	call	0x2826	; 0x2826 <__muluhisi3>
     4ba:	6c 0d       	add	r22, r12
     4bc:	7d 1d       	adc	r23, r13
     4be:	8e 1d       	adc	r24, r14
     4c0:	9f 1d       	adc	r25, r15
}
     4c2:	ff 90       	pop	r15
     4c4:	ef 90       	pop	r14
     4c6:	df 90       	pop	r13
     4c8:	cf 90       	pop	r12
     4ca:	08 95       	ret

000004cc <getSetNextCluster>:
//return: next cluster number, if if argument#2 = GET, else 0
//****************************************************************************
unsigned long getSetNextCluster (unsigned long clusterNumber,
                                 unsigned char get_set,
                                 unsigned long clusterEntry)
{
     4cc:	4f 92       	push	r4
     4ce:	5f 92       	push	r5
     4d0:	6f 92       	push	r6
     4d2:	7f 92       	push	r7
     4d4:	8f 92       	push	r8
     4d6:	9f 92       	push	r9
     4d8:	af 92       	push	r10
     4da:	bf 92       	push	r11
     4dc:	cf 92       	push	r12
     4de:	df 92       	push	r13
     4e0:	ef 92       	push	r14
     4e2:	ff 92       	push	r15
     4e4:	0f 93       	push	r16
     4e6:	1f 93       	push	r17
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
     4ec:	c4 2f       	mov	r28, r20
     4ee:	28 01       	movw	r4, r16
     4f0:	39 01       	movw	r6, r18
unsigned long *FATEntryValue;
unsigned long FATEntrySector;
unsigned char retry = 0;

//get sector number of the cluster entry in the FAT
FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;
     4f2:	40 91 1d 04 	lds	r20, 0x041D
     4f6:	50 91 1e 04 	lds	r21, 0x041E
     4fa:	4b 01       	movw	r8, r22
     4fc:	5c 01       	movw	r10, r24
     4fe:	88 0c       	add	r8, r8
     500:	99 1c       	adc	r9, r9
     502:	aa 1c       	adc	r10, r10
     504:	bb 1c       	adc	r11, r11
     506:	88 0c       	add	r8, r8
     508:	99 1c       	adc	r9, r9
     50a:	aa 1c       	adc	r10, r10
     50c:	bb 1c       	adc	r11, r11
     50e:	20 91 04 02 	lds	r18, 0x0204
     512:	30 91 05 02 	lds	r19, 0x0205
     516:	c0 90 14 04 	lds	r12, 0x0414
     51a:	d0 90 15 04 	lds	r13, 0x0415
     51e:	e0 90 16 04 	lds	r14, 0x0416
     522:	f0 90 17 04 	lds	r15, 0x0417
     526:	c4 0e       	add	r12, r20
     528:	d5 1e       	adc	r13, r21
     52a:	e1 1c       	adc	r14, r1
     52c:	f1 1c       	adc	r15, r1
     52e:	40 e0       	ldi	r20, 0x00	; 0
     530:	50 e0       	ldi	r21, 0x00	; 0
     532:	c5 01       	movw	r24, r10
     534:	b4 01       	movw	r22, r8
     536:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <__udivmodsi4>
     53a:	c2 0e       	add	r12, r18
     53c:	d3 1e       	adc	r13, r19
     53e:	e4 1e       	adc	r14, r20
     540:	f5 1e       	adc	r15, r21

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
     542:	20 91 04 02 	lds	r18, 0x0204
     546:	30 91 05 02 	lds	r19, 0x0205
     54a:	40 e0       	ldi	r20, 0x00	; 0
     54c:	50 e0       	ldi	r21, 0x00	; 0
     54e:	c5 01       	movw	r24, r10
     550:	b4 01       	movw	r22, r8
     552:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <__udivmodsi4>
     556:	4b 01       	movw	r8, r22
     558:	5c 01       	movw	r10, r24
     55a:	da e0       	ldi	r29, 0x0A	; 10

//read the sector into a buffer
while(retry <10)
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}
     55c:	c7 01       	movw	r24, r14
     55e:	b6 01       	movw	r22, r12
     560:	0e 94 ff 12 	call	0x25fe	; 0x25fe <SD_readSingleBlock>
     564:	88 23       	and	r24, r24
     566:	11 f0       	breq	.+4      	; 0x56c <getSetNextCluster+0xa0>
     568:	d1 50       	subi	r29, 0x01	; 1

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);

//read the sector into a buffer
while(retry <10)
     56a:	c1 f7       	brne	.-16     	; 0x55c <getSetNextCluster+0x90>
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}

//get the cluster address from the buffer
FATEntryValue = (unsigned long *) &buffer[FATEntryOffset];
     56c:	f4 01       	movw	r30, r8
     56e:	ee 5e       	subi	r30, 0xEE	; 238
     570:	fd 4f       	sbci	r31, 0xFD	; 253

if(get_set == GET)
     572:	c1 11       	cpse	r28, r1
     574:	08 c0       	rjmp	.+16     	; 0x586 <getSetNextCluster+0xba>
  return ((*FATEntryValue) & 0x0fffffff);
     576:	80 81       	ld	r24, Z
     578:	91 81       	ldd	r25, Z+1	; 0x01
     57a:	a2 81       	ldd	r26, Z+2	; 0x02
     57c:	b3 81       	ldd	r27, Z+3	; 0x03
     57e:	bc 01       	movw	r22, r24
     580:	cd 01       	movw	r24, r26
     582:	9f 70       	andi	r25, 0x0F	; 15
     584:	0b c0       	rjmp	.+22     	; 0x59c <getSetNextCluster+0xd0>


*FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
     586:	40 82       	st	Z, r4
     588:	51 82       	std	Z+1, r5	; 0x01
     58a:	62 82       	std	Z+2, r6	; 0x02
     58c:	73 82       	std	Z+3, r7	; 0x03

SD_writeSingleBlock(FATEntrySector);
     58e:	c7 01       	movw	r24, r14
     590:	b6 01       	movw	r22, r12
     592:	0e 94 2e 13 	call	0x265c	; 0x265c <SD_writeSingleBlock>

return (0);
     596:	60 e0       	ldi	r22, 0x00	; 0
     598:	70 e0       	ldi	r23, 0x00	; 0
     59a:	cb 01       	movw	r24, r22
}
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	1f 91       	pop	r17
     5a2:	0f 91       	pop	r16
     5a4:	ff 90       	pop	r15
     5a6:	ef 90       	pop	r14
     5a8:	df 90       	pop	r13
     5aa:	cf 90       	pop	r12
     5ac:	bf 90       	pop	r11
     5ae:	af 90       	pop	r10
     5b0:	9f 90       	pop	r9
     5b2:	8f 90       	pop	r8
     5b4:	7f 90       	pop	r7
     5b6:	6f 90       	pop	r6
     5b8:	5f 90       	pop	r5
     5ba:	4f 90       	pop	r4
     5bc:	08 95       	ret

000005be <getSetFreeCluster>:
//return: next free cluster, if arg1 is NEXT_FREE & arg2 is GET
//        total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
//		  0xffffffff, if any error or if arg2 is SET
//********************************************************************************************
unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
{
     5be:	cf 92       	push	r12
     5c0:	df 92       	push	r13
     5c2:	ef 92       	push	r14
     5c4:	ff 92       	push	r15
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	d8 2f       	mov	r29, r24
     5cc:	c6 2f       	mov	r28, r22
     5ce:	69 01       	movw	r12, r18
     5d0:	7a 01       	movw	r14, r20
struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &buffer;
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);
     5d2:	80 91 14 04 	lds	r24, 0x0414
     5d6:	90 91 15 04 	lds	r25, 0x0415
     5da:	a0 91 16 04 	lds	r26, 0x0416
     5de:	b0 91 17 04 	lds	r27, 0x0417
     5e2:	bc 01       	movw	r22, r24
     5e4:	cd 01       	movw	r24, r26
     5e6:	6f 5f       	subi	r22, 0xFF	; 255
     5e8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ea:	8f 4f       	sbci	r24, 0xFF	; 255
     5ec:	9f 4f       	sbci	r25, 0xFF	; 255
     5ee:	0e 94 ff 12 	call	0x25fe	; 0x25fe <SD_readSingleBlock>

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
     5f2:	40 91 12 02 	lds	r20, 0x0212
     5f6:	50 91 13 02 	lds	r21, 0x0213
     5fa:	60 91 14 02 	lds	r22, 0x0214
     5fe:	70 91 15 02 	lds	r23, 0x0215
     602:	42 35       	cpi	r20, 0x52	; 82
     604:	52 45       	sbci	r21, 0x52	; 82
     606:	61 46       	sbci	r22, 0x61	; 97
     608:	71 44       	sbci	r23, 0x41	; 65
     60a:	09 f0       	breq	.+2      	; 0x60e <getSetFreeCluster+0x50>
     60c:	59 c0       	rjmp	.+178    	; 0x6c0 <getSetFreeCluster+0x102>
     60e:	40 91 f6 03 	lds	r20, 0x03F6
     612:	50 91 f7 03 	lds	r21, 0x03F7
     616:	60 91 f8 03 	lds	r22, 0x03F8
     61a:	70 91 f9 03 	lds	r23, 0x03F9
     61e:	42 37       	cpi	r20, 0x72	; 114
     620:	52 47       	sbci	r21, 0x72	; 114
     622:	61 44       	sbci	r22, 0x41	; 65
     624:	71 46       	sbci	r23, 0x61	; 97
     626:	09 f0       	breq	.+2      	; 0x62a <getSetFreeCluster+0x6c>
     628:	4f c0       	rjmp	.+158    	; 0x6c8 <getSetFreeCluster+0x10a>
     62a:	40 91 0e 04 	lds	r20, 0x040E
     62e:	50 91 0f 04 	lds	r21, 0x040F
     632:	60 91 10 04 	lds	r22, 0x0410
     636:	70 91 11 04 	lds	r23, 0x0411
     63a:	41 15       	cp	r20, r1
     63c:	51 05       	cpc	r21, r1
     63e:	65 45       	sbci	r22, 0x55	; 85
     640:	7a 4a       	sbci	r23, 0xAA	; 170
     642:	09 f0       	breq	.+2      	; 0x646 <getSetFreeCluster+0x88>
     644:	45 c0       	rjmp	.+138    	; 0x6d0 <getSetFreeCluster+0x112>
  return 0xffffffff;

 if(get_set == GET)
     646:	c1 11       	cpse	r28, r1
     648:	14 c0       	rjmp	.+40     	; 0x672 <getSetFreeCluster+0xb4>
 {
   if(totOrNext == TOTAL_FREE)
     64a:	d1 30       	cpi	r29, 0x01	; 1
     64c:	49 f4       	brne	.+18     	; 0x660 <getSetFreeCluster+0xa2>
      return(FS->freeClusterCount);
     64e:	60 91 fa 03 	lds	r22, 0x03FA
     652:	70 91 fb 03 	lds	r23, 0x03FB
     656:	80 91 fc 03 	lds	r24, 0x03FC
     65a:	90 91 fd 03 	lds	r25, 0x03FD
     65e:	3b c0       	rjmp	.+118    	; 0x6d6 <getSetFreeCluster+0x118>
   else // when totOrNext = NEXT_FREE
      return(FS->nextFreeCluster);
     660:	60 91 fe 03 	lds	r22, 0x03FE
     664:	70 91 ff 03 	lds	r23, 0x03FF
     668:	80 91 00 04 	lds	r24, 0x0400
     66c:	90 91 01 04 	lds	r25, 0x0401
     670:	32 c0       	rjmp	.+100    	; 0x6d6 <getSetFreeCluster+0x118>
 }
 else
 {
   if(totOrNext == TOTAL_FREE)
     672:	d1 30       	cpi	r29, 0x01	; 1
     674:	49 f4       	brne	.+18     	; 0x688 <getSetFreeCluster+0xca>
      FS->freeClusterCount = FSEntry;
     676:	c0 92 fa 03 	sts	0x03FA, r12
     67a:	d0 92 fb 03 	sts	0x03FB, r13
     67e:	e0 92 fc 03 	sts	0x03FC, r14
     682:	f0 92 fd 03 	sts	0x03FD, r15
     686:	08 c0       	rjmp	.+16     	; 0x698 <getSetFreeCluster+0xda>
   else // when totOrNext = NEXT_FREE
	  FS->nextFreeCluster = FSEntry;
     688:	c0 92 fe 03 	sts	0x03FE, r12
     68c:	d0 92 ff 03 	sts	0x03FF, r13
     690:	e0 92 00 04 	sts	0x0400, r14
     694:	f0 92 01 04 	sts	0x0401, r15
 
   error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
     698:	80 91 14 04 	lds	r24, 0x0414
     69c:	90 91 15 04 	lds	r25, 0x0415
     6a0:	a0 91 16 04 	lds	r26, 0x0416
     6a4:	b0 91 17 04 	lds	r27, 0x0417
     6a8:	bc 01       	movw	r22, r24
     6aa:	cd 01       	movw	r24, r26
     6ac:	6f 5f       	subi	r22, 0xFF	; 255
     6ae:	7f 4f       	sbci	r23, 0xFF	; 255
     6b0:	8f 4f       	sbci	r24, 0xFF	; 255
     6b2:	9f 4f       	sbci	r25, 0xFF	; 255
     6b4:	0e 94 2e 13 	call	0x265c	; 0x265c <SD_writeSingleBlock>
 }
 return 0xffffffff;
     6b8:	6f ef       	ldi	r22, 0xFF	; 255
     6ba:	7f ef       	ldi	r23, 0xFF	; 255
     6bc:	cb 01       	movw	r24, r22
     6be:	0b c0       	rjmp	.+22     	; 0x6d6 <getSetFreeCluster+0x118>
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
  return 0xffffffff;
     6c0:	6f ef       	ldi	r22, 0xFF	; 255
     6c2:	7f ef       	ldi	r23, 0xFF	; 255
     6c4:	cb 01       	movw	r24, r22
     6c6:	07 c0       	rjmp	.+14     	; 0x6d6 <getSetFreeCluster+0x118>
     6c8:	6f ef       	ldi	r22, 0xFF	; 255
     6ca:	7f ef       	ldi	r23, 0xFF	; 255
     6cc:	cb 01       	movw	r24, r22
     6ce:	03 c0       	rjmp	.+6      	; 0x6d6 <getSetFreeCluster+0x118>
     6d0:	6f ef       	ldi	r22, 0xFF	; 255
     6d2:	7f ef       	ldi	r23, 0xFF	; 255
     6d4:	cb 01       	movw	r24, r22
	  FS->nextFreeCluster = FSEntry;
 
   error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
 }
 return 0xffffffff;
}
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	ff 90       	pop	r15
     6dc:	ef 90       	pop	r14
     6de:	df 90       	pop	r13
     6e0:	cf 90       	pop	r12
     6e2:	08 95       	ret

000006e4 <getBootSectorData>:
//parameters like bytesPerSector, sectorsPerCluster etc.
//Arguments: none
//return: none
//***************************************************************************
unsigned char getBootSectorData (void)
{
     6e4:	cf 92       	push	r12
     6e6:	df 92       	push	r13
     6e8:	ef 92       	push	r14
     6ea:	ff 92       	push	r15
     6ec:	0f 93       	push	r16
     6ee:	1f 93       	push	r17
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
struct BS_Structure *bpb; //mapping the buffer onto the structure
struct MBRinfo_Structure *mbr;
struct partitionInfo_Structure *partition;
unsigned long dataSectors;

unusedSectors = 0;
     6f4:	10 92 14 04 	sts	0x0414, r1
     6f8:	10 92 15 04 	sts	0x0415, r1
     6fc:	10 92 16 04 	sts	0x0416, r1
     700:	10 92 17 04 	sts	0x0417, r1

SD_readSingleBlock(0);
     704:	60 e0       	ldi	r22, 0x00	; 0
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	cb 01       	movw	r24, r22
     70a:	0e 94 ff 12 	call	0x25fe	; 0x25fe <SD_readSingleBlock>
bpb = (struct BS_Structure *)buffer;

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
     70e:	80 91 12 02 	lds	r24, 0x0212
     712:	8d 7f       	andi	r24, 0xFD	; 253
     714:	89 3e       	cpi	r24, 0xE9	; 233
     716:	01 f1       	breq	.+64     	; 0x758 <getBootSectorData+0x74>
{
  mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
     718:	80 91 10 04 	lds	r24, 0x0410
     71c:	90 91 11 04 	lds	r25, 0x0411
     720:	85 35       	cpi	r24, 0x55	; 85
     722:	9a 4a       	sbci	r25, 0xAA	; 170
     724:	09 f0       	breq	.+2      	; 0x728 <getBootSectorData+0x44>
     726:	aa c0       	rjmp	.+340    	; 0x87c <getBootSectorData+0x198>
  	
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
     728:	60 91 d8 03 	lds	r22, 0x03D8
     72c:	70 91 d9 03 	lds	r23, 0x03D9
     730:	80 91 da 03 	lds	r24, 0x03DA
     734:	90 91 db 03 	lds	r25, 0x03DB
     738:	60 93 14 04 	sts	0x0414, r22
     73c:	70 93 15 04 	sts	0x0415, r23
     740:	80 93 16 04 	sts	0x0416, r24
     744:	90 93 17 04 	sts	0x0417, r25
  
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
     748:	0e 94 ff 12 	call	0x25fe	; 0x25fe <SD_readSingleBlock>
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
     74c:	80 91 12 02 	lds	r24, 0x0212
     750:	8d 7f       	andi	r24, 0xFD	; 253
     752:	89 3e       	cpi	r24, 0xE9	; 233
     754:	09 f0       	breq	.+2      	; 0x758 <getBootSectorData+0x74>
     756:	94 c0       	rjmp	.+296    	; 0x880 <getBootSectorData+0x19c>
}

bytesPerSector = bpb->bytesPerSector;
     758:	80 91 1d 02 	lds	r24, 0x021D
     75c:	90 91 1e 02 	lds	r25, 0x021E
     760:	90 93 05 02 	sts	0x0205, r25
     764:	80 93 04 02 	sts	0x0204, r24
//transmitHex(INT, bytesPerSector); transmitByte(' ');
sectorPerCluster = bpb->sectorPerCluster;
     768:	80 91 1f 02 	lds	r24, 0x021F
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	90 93 13 04 	sts	0x0413, r25
     772:	80 93 12 04 	sts	0x0412, r24
//transmitHex(INT, sectorPerCluster); transmitByte(' ');
reservedSectorCount = bpb->reservedSectorCount;
     776:	e0 91 20 02 	lds	r30, 0x0220
     77a:	f0 91 21 02 	lds	r31, 0x0221
     77e:	f0 93 1e 04 	sts	0x041E, r31
     782:	e0 93 1d 04 	sts	0x041D, r30
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
     786:	80 91 3e 02 	lds	r24, 0x023E
     78a:	90 91 3f 02 	lds	r25, 0x023F
     78e:	a0 91 40 02 	lds	r26, 0x0240
     792:	b0 91 41 02 	lds	r27, 0x0241
     796:	80 93 0a 02 	sts	0x020A, r24
     79a:	90 93 0b 02 	sts	0x020B, r25
     79e:	a0 93 0c 02 	sts	0x020C, r26
     7a2:	b0 93 0d 02 	sts	0x020D, r27
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
     7a6:	c0 91 1d 04 	lds	r28, 0x041D
     7aa:	d0 91 1e 04 	lds	r29, 0x041E
     7ae:	a0 91 22 02 	lds	r26, 0x0222
     7b2:	20 91 36 02 	lds	r18, 0x0236
     7b6:	30 91 37 02 	lds	r19, 0x0237
     7ba:	40 91 38 02 	lds	r20, 0x0238
     7be:	50 91 39 02 	lds	r21, 0x0239
     7c2:	b0 e0       	ldi	r27, 0x00	; 0
     7c4:	0e 94 13 14 	call	0x2826	; 0x2826 <__muluhisi3>
     7c8:	00 91 2e 02 	lds	r16, 0x022E
     7cc:	10 91 2f 02 	lds	r17, 0x022F
     7d0:	20 91 30 02 	lds	r18, 0x0230
     7d4:	30 91 31 02 	lds	r19, 0x0231
     7d8:	0c 0f       	add	r16, r28
     7da:	1d 1f       	adc	r17, r29
     7dc:	21 1d       	adc	r18, r1
     7de:	31 1d       	adc	r19, r1
     7e0:	06 0f       	add	r16, r22
     7e2:	17 1f       	adc	r17, r23
     7e4:	28 1f       	adc	r18, r24
     7e6:	39 1f       	adc	r19, r25
     7e8:	00 93 fc 01 	sts	0x01FC, r16
     7ec:	10 93 fd 01 	sts	0x01FD, r17
     7f0:	20 93 fe 01 	sts	0x01FE, r18
     7f4:	30 93 ff 01 	sts	0x01FF, r19

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
     7f8:	40 91 12 04 	lds	r20, 0x0412
     7fc:	50 91 13 04 	lds	r21, 0x0413
reservedSectorCount = bpb->reservedSectorCount;
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
     800:	00 91 32 02 	lds	r16, 0x0232
     804:	10 91 33 02 	lds	r17, 0x0233
     808:	20 91 34 02 	lds	r18, 0x0234
     80c:	30 91 35 02 	lds	r19, 0x0235
     810:	0e 1b       	sub	r16, r30
     812:	1f 0b       	sbc	r17, r31
     814:	21 09       	sbc	r18, r1
     816:	31 09       	sbc	r19, r1
//transmitHex(INT, sectorPerCluster); transmitByte(' ');
reservedSectorCount = bpb->reservedSectorCount;
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);

dataSectors = bpb->totalSectors_F32
     818:	68 01       	movw	r12, r16
     81a:	79 01       	movw	r14, r18
     81c:	c6 1a       	sub	r12, r22
     81e:	d7 0a       	sbc	r13, r23
     820:	e8 0a       	sbc	r14, r24
     822:	f9 0a       	sbc	r15, r25
     824:	c7 01       	movw	r24, r14
     826:	b6 01       	movw	r22, r12
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
     828:	9a 01       	movw	r18, r20
     82a:	40 e0       	ldi	r20, 0x00	; 0
     82c:	50 e0       	ldi	r21, 0x00	; 0
     82e:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <__udivmodsi4>
     832:	20 93 06 02 	sts	0x0206, r18
     836:	30 93 07 02 	sts	0x0207, r19
     83a:	40 93 08 02 	sts	0x0208, r20
     83e:	50 93 09 02 	sts	0x0209, r21
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     842:	20 e0       	ldi	r18, 0x00	; 0
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	a9 01       	movw	r20, r18
     848:	60 e0       	ldi	r22, 0x00	; 0
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	0e 94 df 02 	call	0x5be	; 0x5be <getSetFreeCluster>
     850:	00 91 06 02 	lds	r16, 0x0206
     854:	10 91 07 02 	lds	r17, 0x0207
     858:	20 91 08 02 	lds	r18, 0x0208
     85c:	30 91 09 02 	lds	r19, 0x0209
     860:	06 17       	cp	r16, r22
     862:	17 07       	cpc	r17, r23
     864:	28 07       	cpc	r18, r24
     866:	39 07       	cpc	r19, r25
     868:	20 f4       	brcc	.+8      	; 0x872 <getBootSectorData+0x18e>
     freeClusterCountUpdated = 0;
     86a:	10 92 24 04 	sts	0x0424, r1
else
	 freeClusterCountUpdated = 1;
return 0;
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	08 c0       	rjmp	.+16     	; 0x882 <getBootSectorData+0x19e>
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	80 93 24 04 	sts	0x0424, r24
return 0;
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	03 c0       	rjmp	.+6      	; 0x882 <getBootSectorData+0x19e>

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
{
  mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	01 c0       	rjmp	.+2      	; 0x882 <getBootSectorData+0x19e>
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
  
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
     880:	81 e0       	ldi	r24, 0x01	; 1
if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
return 0;
}
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	1f 91       	pop	r17
     888:	0f 91       	pop	r16
     88a:	ff 90       	pop	r15
     88c:	ef 90       	pop	r14
     88e:	df 90       	pop	r13
     890:	cf 90       	pop	r12
     892:	08 95       	ret

00000894 <convertFileName>:
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
{
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	cd b7       	in	r28, 0x3d	; 61
     89a:	de b7       	in	r29, 0x3e	; 62
     89c:	2b 97       	sbiw	r28, 0x0b	; 11
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	f8 94       	cli
     8a2:	de bf       	out	0x3e, r29	; 62
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	cd bf       	out	0x3d, r28	; 61
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
if(fileName[j] == '.') break;
     8a8:	fc 01       	movw	r30, r24
     8aa:	20 81       	ld	r18, Z
     8ac:	2e 32       	cpi	r18, 0x2E	; 46
     8ae:	71 f0       	breq	.+28     	; 0x8cc <convertFileName+0x38>
     8b0:	31 96       	adiw	r30, 0x01	; 1
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
     8b2:	31 e0       	ldi	r19, 0x01	; 1
if(fileName[j] == '.') break;
     8b4:	21 91       	ld	r18, Z+
     8b6:	2e 32       	cpi	r18, 0x2E	; 46
     8b8:	21 f0       	breq	.+8      	; 0x8c2 <convertFileName+0x2e>
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
     8ba:	3f 5f       	subi	r19, 0xFF	; 255
     8bc:	3c 30       	cpi	r19, 0x0C	; 12
     8be:	d1 f7       	brne	.-12     	; 0x8b4 <convertFileName+0x20>
     8c0:	09 c0       	rjmp	.+18     	; 0x8d4 <convertFileName+0x40>
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}
     8c2:	39 30       	cpi	r19, 0x09	; 9
     8c4:	38 f4       	brcc	.+14     	; 0x8d4 <convertFileName+0x40>

for(k=0; k<j; k++) //setting file name
     8c6:	31 11       	cpse	r19, r1
     8c8:	0b c0       	rjmp	.+22     	; 0x8e0 <convertFileName+0x4c>
     8ca:	01 c0       	rjmp	.+2      	; 0x8ce <convertFileName+0x3a>
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
     8cc:	30 e0       	ldi	r19, 0x00	; 0
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
     8ce:	23 2f       	mov	r18, r19
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';
     8d0:	40 e2       	ldi	r20, 0x20	; 32
     8d2:	14 c0       	rjmp	.+40     	; 0x8fc <convertFileName+0x68>
unsigned char j, k;

for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}
     8d4:	80 e6       	ldi	r24, 0x60	; 96
     8d6:	91 e0       	ldi	r25, 0x01	; 1
     8d8:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	56 c0       	rjmp	.+172    	; 0x98c <__stack+0x8d>
     8e0:	48 2f       	mov	r20, r24
     8e2:	de 01       	movw	r26, r28
     8e4:	11 96       	adiw	r26, 0x01	; 1

for(k=0; k<j; k++) //setting file name
     8e6:	e8 2f       	mov	r30, r24
     8e8:	f9 2f       	mov	r31, r25
  fileNameFAT[k] = fileName[k];
     8ea:	21 91       	ld	r18, Z+
     8ec:	2d 93       	st	X+, r18
     8ee:	2e 2f       	mov	r18, r30
     8f0:	24 1b       	sub	r18, r20
for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
     8f2:	23 17       	cp	r18, r19
     8f4:	d0 f3       	brcs	.-12     	; 0x8ea <convertFileName+0x56>
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
     8f6:	38 30       	cpi	r19, 0x08	; 8
     8f8:	50 f3       	brcs	.-44     	; 0x8ce <convertFileName+0x3a>
     8fa:	0a c0       	rjmp	.+20     	; 0x910 <__stack+0x11>
  fileNameFAT[k] = ' ';
     8fc:	e1 e0       	ldi	r30, 0x01	; 1
     8fe:	f0 e0       	ldi	r31, 0x00	; 0
     900:	ec 0f       	add	r30, r28
     902:	fd 1f       	adc	r31, r29
     904:	e2 0f       	add	r30, r18
     906:	f1 1d       	adc	r31, r1
     908:	40 83       	st	Z, r20
if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
     90a:	2f 5f       	subi	r18, 0xFF	; 255
     90c:	28 30       	cpi	r18, 0x08	; 8
     90e:	b0 f3       	brcs	.-20     	; 0x8fc <convertFileName+0x68>
  fileNameFAT[k] = ' ';

j++;
     910:	3f 5f       	subi	r19, 0xFF	; 255
for(k=8; k<11; k++) //setting file extention
     912:	28 e0       	ldi	r18, 0x08	; 8
{
  if(fileName[j] != 0)
     914:	fc 01       	movw	r30, r24
     916:	e3 0f       	add	r30, r19
     918:	f1 1d       	adc	r31, r1
     91a:	40 81       	ld	r20, Z
     91c:	41 11       	cpse	r20, r1
     91e:	03 c0       	rjmp	.+6      	; 0x926 <__stack+0x27>
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
     920:	2b 30       	cpi	r18, 0x0B	; 11
     922:	50 f0       	brcs	.+20     	; 0x938 <__stack+0x39>
     924:	17 c0       	rjmp	.+46     	; 0x954 <__stack+0x55>

j++;
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
     926:	3f 5f       	subi	r19, 0xFF	; 255
     928:	e1 e0       	ldi	r30, 0x01	; 1
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	ec 0f       	add	r30, r28
     92e:	fd 1f       	adc	r31, r29
     930:	e2 0f       	add	r30, r18
     932:	f1 1d       	adc	r31, r1
     934:	40 83       	st	Z, r20
     936:	0e c0       	rjmp	.+28     	; 0x954 <__stack+0x55>
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
     938:	40 e2       	ldi	r20, 0x20	; 32
     93a:	31 e0       	ldi	r19, 0x01	; 1
     93c:	32 0f       	add	r19, r18
     93e:	e1 e0       	ldi	r30, 0x01	; 1
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	ec 0f       	add	r30, r28
     944:	fd 1f       	adc	r31, r29
     946:	e2 0f       	add	r30, r18
     948:	f1 1d       	adc	r31, r1
     94a:	40 83       	st	Z, r20
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
     94c:	3b 30       	cpi	r19, 0x0B	; 11
     94e:	29 f0       	breq	.+10     	; 0x95a <__stack+0x5b>
      fileNameFAT[k++] = ' ';
     950:	23 2f       	mov	r18, r19
     952:	f3 cf       	rjmp	.-26     	; 0x93a <__stack+0x3b>

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
     954:	2f 5f       	subi	r18, 0xFF	; 255
     956:	2b 30       	cpi	r18, 0x0B	; 11
     958:	e8 f2       	brcs	.-70     	; 0x914 <__stack+0x15>
     95a:	9e 01       	movw	r18, r28
     95c:	24 5f       	subi	r18, 0xF4	; 244
     95e:	3f 4f       	sbci	r19, 0xFF	; 255
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
     960:	fe 01       	movw	r30, r28
     962:	31 96       	adiw	r30, 0x01	; 1
}

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
     964:	40 81       	ld	r20, Z
     966:	5f e9       	ldi	r21, 0x9F	; 159
     968:	54 0f       	add	r21, r20
     96a:	5a 31       	cpi	r21, 0x1A	; 26
     96c:	10 f4       	brcc	.+4      	; 0x972 <__stack+0x73>
    fileNameFAT[j] -= 0x20;
     96e:	40 52       	subi	r20, 0x20	; 32
     970:	40 83       	st	Z, r20
     972:	31 96       	adiw	r30, 0x01	; 1
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
     974:	e2 17       	cp	r30, r18
     976:	f3 07       	cpc	r31, r19
     978:	a9 f7       	brne	.-22     	; 0x964 <__stack+0x65>
     97a:	dc 01       	movw	r26, r24
     97c:	fe 01       	movw	r30, r28
     97e:	31 96       	adiw	r30, 0x01	; 1
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
  fileName[j] = fileNameFAT[j];
     980:	81 91       	ld	r24, Z+
     982:	8d 93       	st	X+, r24

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
     984:	2e 17       	cp	r18, r30
     986:	3f 07       	cpc	r19, r31
     988:	d9 f7       	brne	.-10     	; 0x980 <__stack+0x81>
  fileName[j] = fileNameFAT[j];

return 0;
     98a:	80 e0       	ldi	r24, 0x00	; 0
}
     98c:	2b 96       	adiw	r28, 0x0b	; 11
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	f8 94       	cli
     992:	de bf       	out	0x3e, r29	; 62
     994:	0f be       	out	0x3f, r0	; 63
     996:	cd bf       	out	0x3d, r28	; 61
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	08 95       	ret

0000099e <searchNextFreeCluster>:
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
{
     99e:	4f 92       	push	r4
     9a0:	5f 92       	push	r5
     9a2:	6f 92       	push	r6
     9a4:	7f 92       	push	r7
     9a6:	8f 92       	push	r8
     9a8:	9f 92       	push	r9
     9aa:	af 92       	push	r10
     9ac:	bf 92       	push	r11
     9ae:	cf 92       	push	r12
     9b0:	df 92       	push	r13
     9b2:	ef 92       	push	r14
     9b4:	ff 92       	push	r15
     9b6:	1f 93       	push	r17
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
     9bc:	6b 01       	movw	r12, r22
     9be:	7c 01       	movw	r14, r24
     9c0:	20 e8       	ldi	r18, 0x80	; 128
     9c2:	c2 22       	and	r12, r18
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
     9c4:	80 91 06 02 	lds	r24, 0x0206
     9c8:	90 91 07 02 	lds	r25, 0x0207
     9cc:	a0 91 08 02 	lds	r26, 0x0208
     9d0:	b0 91 09 02 	lds	r27, 0x0209
     9d4:	c8 16       	cp	r12, r24
     9d6:	d9 06       	cpc	r13, r25
     9d8:	ea 06       	cpc	r14, r26
     9da:	fb 06       	cpc	r15, r27
     9dc:	08 f0       	brcs	.+2      	; 0x9e0 <searchNextFreeCluster+0x42>
     9de:	6d c0       	rjmp	.+218    	; 0xaba <searchNextFreeCluster+0x11c>
     9e0:	46 01       	movw	r8, r12
     9e2:	57 01       	movw	r10, r14
     9e4:	88 0c       	add	r8, r8
     9e6:	99 1c       	adc	r9, r9
     9e8:	aa 1c       	adc	r10, r10
     9ea:	bb 1c       	adc	r11, r11
     9ec:	88 0c       	add	r8, r8
     9ee:	99 1c       	adc	r9, r9
     9f0:	aa 1c       	adc	r10, r10
     9f2:	bb 1c       	adc	r11, r11
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
     9f4:	c2 e1       	ldi	r28, 0x12	; 18
     9f6:	d2 e0       	ldi	r29, 0x02	; 2
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     9f8:	11 e0       	ldi	r17, 0x01	; 1
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
     9fa:	80 91 1d 04 	lds	r24, 0x041D
     9fe:	90 91 1e 04 	lds	r25, 0x041E
     a02:	20 91 04 02 	lds	r18, 0x0204
     a06:	30 91 05 02 	lds	r19, 0x0205
     a0a:	40 90 14 04 	lds	r4, 0x0414
     a0e:	50 90 15 04 	lds	r5, 0x0415
     a12:	60 90 16 04 	lds	r6, 0x0416
     a16:	70 90 17 04 	lds	r7, 0x0417
     a1a:	48 0e       	add	r4, r24
     a1c:	59 1e       	adc	r5, r25
     a1e:	61 1c       	adc	r6, r1
     a20:	71 1c       	adc	r7, r1
     a22:	40 e0       	ldi	r20, 0x00	; 0
     a24:	50 e0       	ldi	r21, 0x00	; 0
     a26:	c5 01       	movw	r24, r10
     a28:	b4 01       	movw	r22, r8
     a2a:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <__udivmodsi4>
     a2e:	c3 01       	movw	r24, r6
     a30:	b2 01       	movw	r22, r4
     a32:	62 0f       	add	r22, r18
     a34:	73 1f       	adc	r23, r19
     a36:	84 1f       	adc	r24, r20
     a38:	95 1f       	adc	r25, r21
      SD_readSingleBlock(sector);
     a3a:	0e 94 ff 12 	call	0x25fe	; 0x25fe <SD_readSingleBlock>
      for(i=0; i<128; i++)
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
     a3e:	88 81       	ld	r24, Y
     a40:	99 81       	ldd	r25, Y+1	; 0x01
     a42:	aa 81       	ldd	r26, Y+2	; 0x02
     a44:	bb 81       	ldd	r27, Y+3	; 0x03
     a46:	bf 70       	andi	r27, 0x0F	; 15
     a48:	89 2b       	or	r24, r25
     a4a:	8a 2b       	or	r24, r26
     a4c:	8b 2b       	or	r24, r27
     a4e:	99 f0       	breq	.+38     	; 0xa76 <searchNextFreeCluster+0xd8>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     a50:	21 2f       	mov	r18, r17
      {
       	 value = (unsigned long *) &buffer[i*4];
     a52:	e2 2f       	mov	r30, r18
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	ee 0f       	add	r30, r30
     a58:	ff 1f       	adc	r31, r31
     a5a:	ee 0f       	add	r30, r30
     a5c:	ff 1f       	adc	r31, r31
         if(((*value) & 0x0fffffff) == 0)
     a5e:	ee 5e       	subi	r30, 0xEE	; 238
     a60:	fd 4f       	sbci	r31, 0xFD	; 253
     a62:	80 81       	ld	r24, Z
     a64:	91 81       	ldd	r25, Z+1	; 0x01
     a66:	a2 81       	ldd	r26, Z+2	; 0x02
     a68:	b3 81       	ldd	r27, Z+3	; 0x03
     a6a:	bf 70       	andi	r27, 0x0F	; 15
     a6c:	89 2b       	or	r24, r25
     a6e:	8a 2b       	or	r24, r26
     a70:	8b 2b       	or	r24, r27
     a72:	49 f4       	brne	.+18     	; 0xa86 <searchNextFreeCluster+0xe8>
     a74:	01 c0       	rjmp	.+2      	; 0xa78 <searchNextFreeCluster+0xda>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     a76:	20 e0       	ldi	r18, 0x00	; 0
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
            return(cluster+i);
     a78:	c7 01       	movw	r24, r14
     a7a:	b6 01       	movw	r22, r12
     a7c:	62 0f       	add	r22, r18
     a7e:	71 1d       	adc	r23, r1
     a80:	81 1d       	adc	r24, r1
     a82:	91 1d       	adc	r25, r1
     a84:	21 c0       	rjmp	.+66     	; 0xac8 <searchNextFreeCluster+0x12a>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     a86:	2f 5f       	subi	r18, 0xFF	; 255
     a88:	22 f7       	brpl	.-56     	; 0xa52 <searchNextFreeCluster+0xb4>
{
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
     a8a:	80 e8       	ldi	r24, 0x80	; 128
     a8c:	c8 0e       	add	r12, r24
     a8e:	d1 1c       	adc	r13, r1
     a90:	e1 1c       	adc	r14, r1
     a92:	f1 1c       	adc	r15, r1
     a94:	80 91 06 02 	lds	r24, 0x0206
     a98:	90 91 07 02 	lds	r25, 0x0207
     a9c:	a0 91 08 02 	lds	r26, 0x0208
     aa0:	b0 91 09 02 	lds	r27, 0x0209
     aa4:	22 e0       	ldi	r18, 0x02	; 2
     aa6:	92 0e       	add	r9, r18
     aa8:	a1 1c       	adc	r10, r1
     aaa:	b1 1c       	adc	r11, r1
     aac:	c8 16       	cp	r12, r24
     aae:	d9 06       	cpc	r13, r25
     ab0:	ea 06       	cpc	r14, r26
     ab2:	fb 06       	cpc	r15, r27
     ab4:	08 f4       	brcc	.+2      	; 0xab8 <searchNextFreeCluster+0x11a>
     ab6:	a1 cf       	rjmp	.-190    	; 0x9fa <searchNextFreeCluster+0x5c>
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <searchNextFreeCluster+0x124>
         if(((*value) & 0x0fffffff) == 0)
            return(cluster+i);
      }  
    } 

 return 0;
     aba:	60 e0       	ldi	r22, 0x00	; 0
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	cb 01       	movw	r24, r22
     ac0:	03 c0       	rjmp	.+6      	; 0xac8 <searchNextFreeCluster+0x12a>
     ac2:	60 e0       	ldi	r22, 0x00	; 0
     ac4:	70 e0       	ldi	r23, 0x00	; 0
     ac6:	cb 01       	movw	r24, r22
}
     ac8:	df 91       	pop	r29
     aca:	cf 91       	pop	r28
     acc:	1f 91       	pop	r17
     ace:	ff 90       	pop	r15
     ad0:	ef 90       	pop	r14
     ad2:	df 90       	pop	r13
     ad4:	cf 90       	pop	r12
     ad6:	bf 90       	pop	r11
     ad8:	af 90       	pop	r10
     ada:	9f 90       	pop	r9
     adc:	8f 90       	pop	r8
     ade:	7f 90       	pop	r7
     ae0:	6f 90       	pop	r6
     ae2:	5f 90       	pop	r5
     ae4:	4f 90       	pop	r4
     ae6:	08 95       	ret

00000ae8 <displayMemory>:
//Arguments: 1. unsigned char flag. If flag is HIGH, memory will be displayed in KBytes, else in Bytes. 
//			 2. unsigned long memory value
//return: none
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
     ae8:	9f 92       	push	r9
     aea:	af 92       	push	r10
     aec:	bf 92       	push	r11
     aee:	cf 92       	push	r12
     af0:	df 92       	push	r13
     af2:	ef 92       	push	r14
     af4:	ff 92       	push	r15
     af6:	0f 93       	push	r16
     af8:	1f 93       	push	r17
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	cd b7       	in	r28, 0x3d	; 61
     b00:	de b7       	in	r29, 0x3e	; 62
     b02:	64 97       	sbiw	r28, 0x14	; 20
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	f8 94       	cli
     b08:	de bf       	out	0x3e, r29	; 62
     b0a:	0f be       	out	0x3f, r0	; 63
     b0c:	cd bf       	out	0x3d, r28	; 61
     b0e:	98 2e       	mov	r9, r24
     b10:	cb 01       	movw	r24, r22
     b12:	ba 01       	movw	r22, r20
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
     b14:	24 e1       	ldi	r18, 0x14	; 20
     b16:	ee e0       	ldi	r30, 0x0E	; 14
     b18:	f1 e0       	ldi	r31, 0x01	; 1
     b1a:	de 01       	movw	r26, r28
     b1c:	11 96       	adiw	r26, 0x01	; 1
     b1e:	01 90       	ld	r0, Z+
     b20:	0d 92       	st	X+, r0
     b22:	2a 95       	dec	r18
     b24:	e1 f7       	brne	.-8      	; 0xb1e <displayMemory+0x36>
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
     b26:	0f 2e       	mov	r0, r31
     b28:	fc e0       	ldi	r31, 0x0C	; 12
     b2a:	bf 2e       	mov	r11, r31
     b2c:	f0 2d       	mov	r31, r0
  {
    if(i==5 || i==9) 
	{
	   memoryString[i-1] = ',';  
     b2e:	0f 2e       	mov	r0, r31
     b30:	fc e2       	ldi	r31, 0x2C	; 44
     b32:	af 2e       	mov	r10, r31
     b34:	f0 2d       	mov	r31, r0
	   i--;
	}
    memoryString[i-1] = (memory % 10) | 0x30;
     b36:	0f 2e       	mov	r0, r31
     b38:	fa e0       	ldi	r31, 0x0A	; 10
     b3a:	cf 2e       	mov	r12, r31
     b3c:	d1 2c       	mov	r13, r1
     b3e:	e1 2c       	mov	r14, r1
     b40:	f1 2c       	mov	r15, r1
     b42:	f0 2d       	mov	r31, r0
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i==5 || i==9) 
     b44:	25 e0       	ldi	r18, 0x05	; 5
     b46:	b2 16       	cp	r11, r18
     b48:	19 f0       	breq	.+6      	; 0xb50 <displayMemory+0x68>
     b4a:	e9 e0       	ldi	r30, 0x09	; 9
     b4c:	be 12       	cpse	r11, r30
     b4e:	05 c0       	rjmp	.+10     	; 0xb5a <displayMemory+0x72>
	{
	   memoryString[i-1] = ',';  
     b50:	fe 01       	movw	r30, r28
     b52:	eb 0d       	add	r30, r11
     b54:	f1 1d       	adc	r31, r1
     b56:	a0 82       	st	Z, r10
	   i--;
     b58:	ba 94       	dec	r11
	}
    memoryString[i-1] = (memory % 10) | 0x30;
     b5a:	8e 01       	movw	r16, r28
     b5c:	0b 0d       	add	r16, r11
     b5e:	11 1d       	adc	r17, r1
     b60:	a7 01       	movw	r20, r14
     b62:	96 01       	movw	r18, r12
     b64:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <__udivmodsi4>
     b68:	60 63       	ori	r22, 0x30	; 48
     b6a:	f8 01       	movw	r30, r16
     b6c:	60 83       	st	Z, r22
    memory /= 10;
     b6e:	62 2f       	mov	r22, r18
     b70:	73 2f       	mov	r23, r19
     b72:	84 2f       	mov	r24, r20
     b74:	95 2f       	mov	r25, r21
	if(memory == 0) break;
     b76:	61 15       	cp	r22, r1
     b78:	71 05       	cpc	r23, r1
     b7a:	81 05       	cpc	r24, r1
     b7c:	91 05       	cpc	r25, r1
     b7e:	11 f0       	breq	.+4      	; 0xb84 <displayMemory+0x9c>
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
     b80:	ba 94       	dec	r11
     b82:	01 f7       	brne	.-64     	; 0xb44 <displayMemory+0x5c>
	}
    memoryString[i-1] = (memory % 10) | 0x30;
    memory /= 10;
	if(memory == 0) break;
  }
  if(flag == HIGH)  memoryString[13] = 'K';
     b84:	f1 e0       	ldi	r31, 0x01	; 1
     b86:	9f 12       	cpse	r9, r31
     b88:	02 c0       	rjmp	.+4      	; 0xb8e <displayMemory+0xa6>
     b8a:	8b e4       	ldi	r24, 0x4B	; 75
     b8c:	8e 87       	std	Y+14, r24	; 0x0e
  transmitString(memoryString);
     b8e:	ce 01       	movw	r24, r28
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	0e 94 bd 13 	call	0x277a	; 0x277a <transmitString>
}
     b96:	64 96       	adiw	r28, 0x14	; 20
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	cd bf       	out	0x3d, r28	; 61
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	1f 91       	pop	r17
     ba8:	0f 91       	pop	r16
     baa:	ff 90       	pop	r15
     bac:	ef 90       	pop	r14
     bae:	df 90       	pop	r13
     bb0:	cf 90       	pop	r12
     bb2:	bf 90       	pop	r11
     bb4:	af 90       	pop	r10
     bb6:	9f 90       	pop	r9
     bb8:	08 95       	ret

00000bba <memoryStatistics>:
//it tries to read from SD whether a free cluster count is stored, if it is stored
//then it will return immediately. Otherwise it will count the total number of
//free clusters, which takes time
//****************************************************************************
void memoryStatistics (void)
{
     bba:	2f 92       	push	r2
     bbc:	3f 92       	push	r3
     bbe:	4f 92       	push	r4
     bc0:	5f 92       	push	r5
     bc2:	6f 92       	push	r6
     bc4:	7f 92       	push	r7
     bc6:	8f 92       	push	r8
     bc8:	9f 92       	push	r9
     bca:	af 92       	push	r10
     bcc:	bf 92       	push	r11
     bce:	cf 92       	push	r12
     bd0:	df 92       	push	r13
     bd2:	ef 92       	push	r14
     bd4:	ff 92       	push	r15
     bd6:	0f 93       	push	r16
     bd8:	1f 93       	push	r17
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	00 d0       	rcall	.+0      	; 0xbe0 <memoryStatistics+0x26>
     be0:	00 d0       	rcall	.+0      	; 0xbe2 <memoryStatistics+0x28>
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
unsigned long totalMemory, freeMemory;
unsigned long sector, *value;
unsigned int i;


totalMemory = totalClusters * sectorPerCluster / 1024;
     be6:	a0 91 12 04 	lds	r26, 0x0412
     bea:	b0 91 13 04 	lds	r27, 0x0413
     bee:	20 91 06 02 	lds	r18, 0x0206
     bf2:	30 91 07 02 	lds	r19, 0x0207
     bf6:	40 91 08 02 	lds	r20, 0x0208
     bfa:	50 91 09 02 	lds	r21, 0x0209
     bfe:	0e 94 13 14 	call	0x2826	; 0x2826 <__muluhisi3>
     c02:	9b 01       	movw	r18, r22
     c04:	ac 01       	movw	r20, r24
     c06:	01 2e       	mov	r0, r17
     c08:	1a e0       	ldi	r17, 0x0A	; 10
     c0a:	56 95       	lsr	r21
     c0c:	47 95       	ror	r20
     c0e:	37 95       	ror	r19
     c10:	27 95       	ror	r18
     c12:	1a 95       	dec	r17
     c14:	d1 f7       	brne	.-12     	; 0xc0a <memoryStatistics+0x50>
     c16:	10 2d       	mov	r17, r0
totalMemory *= bytesPerSector;
     c18:	a0 91 04 02 	lds	r26, 0x0204
     c1c:	b0 91 05 02 	lds	r27, 0x0205
     c20:	0e 94 13 14 	call	0x2826	; 0x2826 <__muluhisi3>
     c24:	6b 01       	movw	r12, r22
     c26:	7c 01       	movw	r14, r24

printf("\n");
     c28:	8a e0       	ldi	r24, 0x0A	; 10
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
printf("\n");
     c30:	8a e0       	ldi	r24, 0x0A	; 10
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
transmitString_F(PSTR("Total Memory: "));
     c38:	8b e8       	ldi	r24, 0x8B	; 139
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>

displayMemory (HIGH, totalMemory);
     c40:	b7 01       	movw	r22, r14
     c42:	a6 01       	movw	r20, r12
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	0e 94 74 05 	call	0xae8	; 0xae8 <displayMemory>

freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
     c4a:	20 e0       	ldi	r18, 0x00	; 0
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	a9 01       	movw	r20, r18
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	0e 94 df 02 	call	0x5be	; 0x5be <getSetFreeCluster>
     c58:	4b 01       	movw	r8, r22
     c5a:	5c 01       	movw	r10, r24
//freeClusters = 0xffffffff;    

if(freeClusters > totalClusters)
     c5c:	80 91 06 02 	lds	r24, 0x0206
     c60:	90 91 07 02 	lds	r25, 0x0207
     c64:	a0 91 08 02 	lds	r26, 0x0208
     c68:	b0 91 09 02 	lds	r27, 0x0209
     c6c:	88 15       	cp	r24, r8
     c6e:	99 05       	cpc	r25, r9
     c70:	aa 05       	cpc	r26, r10
     c72:	bb 05       	cpc	r27, r11
     c74:	08 f0       	brcs	.+2      	; 0xc78 <memoryStatistics+0xbe>
     c76:	80 c0       	rjmp	.+256    	; 0xd78 <memoryStatistics+0x1be>
{
   freeClusterCountUpdated = 0;
     c78:	10 92 24 04 	sts	0x0424, r1
   freeClusters = 0;
   totalClusterCount = 0;
   cluster = rootCluster;    
     c7c:	40 90 0a 02 	lds	r4, 0x020A
     c80:	50 90 0b 02 	lds	r5, 0x020B
     c84:	60 90 0c 02 	lds	r6, 0x020C
     c88:	70 90 0d 02 	lds	r7, 0x020D
     c8c:	44 0c       	add	r4, r4
     c8e:	55 1c       	adc	r5, r5
     c90:	66 1c       	adc	r6, r6
     c92:	77 1c       	adc	r7, r7
     c94:	44 0c       	add	r4, r4
     c96:	55 1c       	adc	r5, r5
     c98:	66 1c       	adc	r6, r6
     c9a:	77 1c       	adc	r7, r7

if(freeClusters > totalClusters)
{
   freeClusterCountUpdated = 0;
   freeClusters = 0;
   totalClusterCount = 0;
     c9c:	c1 2c       	mov	r12, r1
     c9e:	d1 2c       	mov	r13, r1
     ca0:	76 01       	movw	r14, r12
//freeClusters = 0xffffffff;    

if(freeClusters > totalClusters)
{
   freeClusterCountUpdated = 0;
   freeClusters = 0;
     ca2:	81 2c       	mov	r8, r1
     ca4:	91 2c       	mov	r9, r1
     ca6:	54 01       	movw	r10, r8
     ca8:	0f 2e       	mov	r0, r31
     caa:	f2 e1       	ldi	r31, 0x12	; 18
     cac:	2f 2e       	mov	r2, r31
     cae:	f2 e0       	ldi	r31, 0x02	; 2
     cb0:	3f 2e       	mov	r3, r31
     cb2:	f0 2d       	mov	r31, r0
   totalClusterCount = 0;
   cluster = rootCluster;    
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
     cb4:	00 91 1d 04 	lds	r16, 0x041D
     cb8:	10 91 1e 04 	lds	r17, 0x041E
     cbc:	20 91 04 02 	lds	r18, 0x0204
     cc0:	30 91 05 02 	lds	r19, 0x0205
     cc4:	40 91 14 04 	lds	r20, 0x0414
     cc8:	50 91 15 04 	lds	r21, 0x0415
     ccc:	60 91 16 04 	lds	r22, 0x0416
     cd0:	70 91 17 04 	lds	r23, 0x0417
     cd4:	db 01       	movw	r26, r22
     cd6:	ca 01       	movw	r24, r20
     cd8:	80 0f       	add	r24, r16
     cda:	91 1f       	adc	r25, r17
     cdc:	a1 1d       	adc	r26, r1
     cde:	b1 1d       	adc	r27, r1
     ce0:	89 83       	std	Y+1, r24	; 0x01
     ce2:	9a 83       	std	Y+2, r25	; 0x02
     ce4:	ab 83       	std	Y+3, r26	; 0x03
     ce6:	bc 83       	std	Y+4, r27	; 0x04
     ce8:	40 e0       	ldi	r20, 0x00	; 0
     cea:	50 e0       	ldi	r21, 0x00	; 0
     cec:	c3 01       	movw	r24, r6
     cee:	b2 01       	movw	r22, r4
     cf0:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <__udivmodsi4>
     cf4:	69 81       	ldd	r22, Y+1	; 0x01
     cf6:	7a 81       	ldd	r23, Y+2	; 0x02
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	9c 81       	ldd	r25, Y+4	; 0x04
     cfc:	62 0f       	add	r22, r18
     cfe:	73 1f       	adc	r23, r19
     d00:	84 1f       	adc	r24, r20
     d02:	95 1f       	adc	r25, r21
      SD_readSingleBlock(sector);
     d04:	0e 94 ff 12 	call	0x25fe	; 0x25fe <SD_readSingleBlock>
     d08:	f1 01       	movw	r30, r2
     d0a:	b7 01       	movw	r22, r14
     d0c:	a6 01       	movw	r20, r12
     d0e:	ca 01       	movw	r24, r20
     d10:	8c 19       	sub	r24, r12
     d12:	9d 09       	sbc	r25, r13
      for(i=0; i<128; i++)
      {
           value = (unsigned long *) &buffer[i*4];
         if(((*value)& 0x0fffffff) == 0)
     d14:	01 91       	ld	r16, Z+
     d16:	11 91       	ld	r17, Z+
     d18:	21 91       	ld	r18, Z+
     d1a:	31 91       	ld	r19, Z+
     d1c:	3f 70       	andi	r19, 0x0F	; 15
     d1e:	01 2b       	or	r16, r17
     d20:	02 2b       	or	r16, r18
     d22:	03 2b       	or	r16, r19
     d24:	29 f4       	brne	.+10     	; 0xd30 <memoryStatistics+0x176>
            freeClusters++;;
     d26:	af ef       	ldi	r26, 0xFF	; 255
     d28:	8a 1a       	sub	r8, r26
     d2a:	9a 0a       	sbc	r9, r26
     d2c:	aa 0a       	sbc	r10, r26
     d2e:	ba 0a       	sbc	r11, r26
        
         totalClusterCount++;
     d30:	4f 5f       	subi	r20, 0xFF	; 255
     d32:	5f 4f       	sbci	r21, 0xFF	; 255
     d34:	6f 4f       	sbci	r22, 0xFF	; 255
     d36:	7f 4f       	sbci	r23, 0xFF	; 255
         if(totalClusterCount == (totalClusters+2)) break;
     d38:	00 91 06 02 	lds	r16, 0x0206
     d3c:	10 91 07 02 	lds	r17, 0x0207
     d40:	20 91 08 02 	lds	r18, 0x0208
     d44:	30 91 09 02 	lds	r19, 0x0209
     d48:	0e 5f       	subi	r16, 0xFE	; 254
     d4a:	1f 4f       	sbci	r17, 0xFF	; 255
     d4c:	2f 4f       	sbci	r18, 0xFF	; 255
     d4e:	3f 4f       	sbci	r19, 0xFF	; 255
     d50:	04 17       	cp	r16, r20
     d52:	15 07       	cpc	r17, r21
     d54:	26 07       	cpc	r18, r22
     d56:	37 07       	cpc	r19, r23
     d58:	29 f0       	breq	.+10     	; 0xd64 <memoryStatistics+0x1aa>
   cluster = rootCluster;    
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     d5a:	b4 e0       	ldi	r27, 0x04	; 4
     d5c:	e2 31       	cpi	r30, 0x12	; 18
     d5e:	fb 07       	cpc	r31, r27
     d60:	b1 f6       	brne	.-84     	; 0xd0e <memoryStatistics+0x154>
     d62:	03 c0       	rjmp	.+6      	; 0xd6a <memoryStatistics+0x1b0>
            freeClusters++;;
        
         totalClusterCount++;
         if(totalClusterCount == (totalClusters+2)) break;
      }  
      if(i < 128) break;
     d64:	80 38       	cpi	r24, 0x80	; 128
     d66:	91 05       	cpc	r25, r1
     d68:	38 f0       	brcs	.+14     	; 0xd78 <memoryStatistics+0x1be>
     d6a:	e2 e0       	ldi	r30, 0x02	; 2
     d6c:	5e 0e       	add	r5, r30
     d6e:	61 1c       	adc	r6, r1
     d70:	71 1c       	adc	r7, r1
      cluster+=128;
    } 
     d72:	6a 01       	movw	r12, r20
     d74:	7b 01       	movw	r14, r22
     d76:	9e cf       	rjmp	.-196    	; 0xcb4 <memoryStatistics+0xfa>
}

if(!freeClusterCountUpdated)
     d78:	80 91 24 04 	lds	r24, 0x0424
     d7c:	81 11       	cpse	r24, r1
     d7e:	06 c0       	rjmp	.+12     	; 0xd8c <memoryStatistics+0x1d2>
  getSetFreeCluster (TOTAL_FREE, SET, freeClusters); //update FSinfo next free cluster entry
     d80:	a5 01       	movw	r20, r10
     d82:	94 01       	movw	r18, r8
     d84:	61 e0       	ldi	r22, 0x01	; 1
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	0e 94 df 02 	call	0x5be	; 0x5be <getSetFreeCluster>
freeClusterCountUpdated = 1;  //set flag
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	80 93 24 04 	sts	0x0424, r24
freeMemory = freeClusters * sectorPerCluster / 1024;
     d92:	a0 91 12 04 	lds	r26, 0x0412
     d96:	b0 91 13 04 	lds	r27, 0x0413
     d9a:	a5 01       	movw	r20, r10
     d9c:	94 01       	movw	r18, r8
     d9e:	0e 94 13 14 	call	0x2826	; 0x2826 <__muluhisi3>
     da2:	9b 01       	movw	r18, r22
     da4:	ac 01       	movw	r20, r24
     da6:	01 2e       	mov	r0, r17
     da8:	1a e0       	ldi	r17, 0x0A	; 10
     daa:	56 95       	lsr	r21
     dac:	47 95       	ror	r20
     dae:	37 95       	ror	r19
     db0:	27 95       	ror	r18
     db2:	1a 95       	dec	r17
     db4:	d1 f7       	brne	.-12     	; 0xdaa <memoryStatistics+0x1f0>
     db6:	10 2d       	mov	r17, r0
freeMemory *= bytesPerSector ;
     db8:	a0 91 04 02 	lds	r26, 0x0204
     dbc:	b0 91 05 02 	lds	r27, 0x0205
     dc0:	0e 94 13 14 	call	0x2826	; 0x2826 <__muluhisi3>
     dc4:	6b 01       	movw	r12, r22
     dc6:	7c 01       	movw	r14, r24
printf("\n");
     dc8:	8a e0       	ldi	r24, 0x0A	; 10
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
transmitString_F(PSTR(" Free Memory: "));
     dd0:	8c e7       	ldi	r24, 0x7C	; 124
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
displayMemory (HIGH, freeMemory);
     dd8:	b7 01       	movw	r22, r14
     dda:	a6 01       	movw	r20, r12
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	0e 94 74 05 	call	0xae8	; 0xae8 <displayMemory>
printf("\n"); 
     de2:	8a e0       	ldi	r24, 0x0A	; 10
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
}
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	1f 91       	pop	r17
     df8:	0f 91       	pop	r16
     dfa:	ff 90       	pop	r15
     dfc:	ef 90       	pop	r14
     dfe:	df 90       	pop	r13
     e00:	cf 90       	pop	r12
     e02:	bf 90       	pop	r11
     e04:	af 90       	pop	r10
     e06:	9f 90       	pop	r9
     e08:	8f 90       	pop	r8
     e0a:	7f 90       	pop	r7
     e0c:	6f 90       	pop	r6
     e0e:	5f 90       	pop	r5
     e10:	4f 90       	pop	r4
     e12:	3f 90       	pop	r3
     e14:	2f 90       	pop	r2
     e16:	08 95       	ret

00000e18 <freeMemoryUpdate>:
//			to ADD or REMOVE clusters occupied by the file
//Arguments: #1.flag ADD or REMOVE #2.file size in Bytes
//return: none
//********************************************************************
void freeMemoryUpdate (unsigned char flag, unsigned long size)
{
     e18:	cf 92       	push	r12
     e1a:	df 92       	push	r13
     e1c:	ef 92       	push	r14
     e1e:	ff 92       	push	r15
     e20:	cf 93       	push	r28
     e22:	c8 2f       	mov	r28, r24
  unsigned long freeClusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
     e24:	6a 01       	movw	r12, r20
     e26:	7b 01       	movw	r14, r22
     e28:	21 e0       	ldi	r18, 0x01	; 1
     e2a:	d2 22       	and	r13, r18
     e2c:	ee 24       	eor	r14, r14
     e2e:	ff 24       	eor	r15, r15
     e30:	cd 28       	or	r12, r13
     e32:	ce 28       	or	r12, r14
     e34:	cf 28       	or	r12, r15
     e36:	61 f4       	brne	.+24     	; 0xe50 <freeMemoryUpdate+0x38>
     e38:	db 01       	movw	r26, r22
     e3a:	ca 01       	movw	r24, r20
     e3c:	07 2e       	mov	r0, r23
     e3e:	79 e0       	ldi	r23, 0x09	; 9
     e40:	b6 95       	lsr	r27
     e42:	a7 95       	ror	r26
     e44:	97 95       	ror	r25
     e46:	87 95       	ror	r24
     e48:	7a 95       	dec	r23
     e4a:	d1 f7       	brne	.-12     	; 0xe40 <freeMemoryUpdate+0x28>
     e4c:	70 2d       	mov	r23, r0
     e4e:	0e c0       	rjmp	.+28     	; 0xe6c <freeMemoryUpdate+0x54>
  else size = (size / 512) +1;
     e50:	db 01       	movw	r26, r22
     e52:	ca 01       	movw	r24, r20
     e54:	07 2e       	mov	r0, r23
     e56:	79 e0       	ldi	r23, 0x09	; 9
     e58:	b6 95       	lsr	r27
     e5a:	a7 95       	ror	r26
     e5c:	97 95       	ror	r25
     e5e:	87 95       	ror	r24
     e60:	7a 95       	dec	r23
     e62:	d1 f7       	brne	.-12     	; 0xe58 <freeMemoryUpdate+0x40>
     e64:	70 2d       	mov	r23, r0
     e66:	01 96       	adiw	r24, 0x01	; 1
     e68:	a1 1d       	adc	r26, r1
     e6a:	b1 1d       	adc	r27, r1
  if((size % 8) == 0) size = size / 8;
     e6c:	6c 01       	movw	r12, r24
     e6e:	7d 01       	movw	r14, r26
     e70:	27 e0       	ldi	r18, 0x07	; 7
     e72:	c2 22       	and	r12, r18
     e74:	dd 24       	eor	r13, r13
     e76:	ee 24       	eor	r14, r14
     e78:	ff 24       	eor	r15, r15
     e7a:	cd 28       	or	r12, r13
     e7c:	ce 28       	or	r12, r14
     e7e:	cf 28       	or	r12, r15
     e80:	59 f4       	brne	.+22     	; 0xe98 <freeMemoryUpdate+0x80>
     e82:	6c 01       	movw	r12, r24
     e84:	7d 01       	movw	r14, r26
     e86:	68 94       	set
     e88:	12 f8       	bld	r1, 2
     e8a:	f6 94       	lsr	r15
     e8c:	e7 94       	ror	r14
     e8e:	d7 94       	ror	r13
     e90:	c7 94       	ror	r12
     e92:	16 94       	lsr	r1
     e94:	d1 f7       	brne	.-12     	; 0xe8a <freeMemoryUpdate+0x72>
     e96:	0f c0       	rjmp	.+30     	; 0xeb6 <freeMemoryUpdate+0x9e>
  else size = (size / 8) +1;
     e98:	6c 01       	movw	r12, r24
     e9a:	7d 01       	movw	r14, r26
     e9c:	68 94       	set
     e9e:	12 f8       	bld	r1, 2
     ea0:	f6 94       	lsr	r15
     ea2:	e7 94       	ror	r14
     ea4:	d7 94       	ror	r13
     ea6:	c7 94       	ror	r12
     ea8:	16 94       	lsr	r1
     eaa:	d1 f7       	brne	.-12     	; 0xea0 <freeMemoryUpdate+0x88>
     eac:	8f ef       	ldi	r24, 0xFF	; 255
     eae:	c8 1a       	sub	r12, r24
     eb0:	d8 0a       	sbc	r13, r24
     eb2:	e8 0a       	sbc	r14, r24
     eb4:	f8 0a       	sbc	r15, r24

  if(freeClusterCountUpdated)
     eb6:	90 91 24 04 	lds	r25, 0x0424
     eba:	99 23       	and	r25, r25
     ebc:	d1 f0       	breq	.+52     	; 0xef2 <freeMemoryUpdate+0xda>
  {
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	a9 01       	movw	r20, r18
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	0e 94 df 02 	call	0x5be	; 0x5be <getSetFreeCluster>
	if(flag == ADD)
     ecc:	c1 11       	cpse	r28, r1
     ece:	07 c0       	rjmp	.+14     	; 0xede <freeMemoryUpdate+0xc6>
  	   freeClusters = freeClusters + size;
     ed0:	9b 01       	movw	r18, r22
     ed2:	ac 01       	movw	r20, r24
     ed4:	2c 0d       	add	r18, r12
     ed6:	3d 1d       	adc	r19, r13
     ed8:	4e 1d       	adc	r20, r14
     eda:	5f 1d       	adc	r21, r15
     edc:	06 c0       	rjmp	.+12     	; 0xeea <freeMemoryUpdate+0xd2>
	else  //when flag = REMOVE
	   freeClusters = freeClusters - size;
     ede:	9b 01       	movw	r18, r22
     ee0:	ac 01       	movw	r20, r24
     ee2:	2c 19       	sub	r18, r12
     ee4:	3d 09       	sbc	r19, r13
     ee6:	4e 09       	sbc	r20, r14
     ee8:	5f 09       	sbc	r21, r15
	getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
     eea:	61 e0       	ldi	r22, 0x01	; 1
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	0e 94 df 02 	call	0x5be	; 0x5be <getSetFreeCluster>
  }
}
     ef2:	cf 91       	pop	r28
     ef4:	ff 90       	pop	r15
     ef6:	ef 90       	pop	r14
     ef8:	df 90       	pop	r13
     efa:	cf 90       	pop	r12
     efc:	08 95       	ret

00000efe <findFiles>:
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
{
     efe:	2f 92       	push	r2
     f00:	3f 92       	push	r3
     f02:	4f 92       	push	r4
     f04:	5f 92       	push	r5
     f06:	6f 92       	push	r6
     f08:	7f 92       	push	r7
     f0a:	8f 92       	push	r8
     f0c:	9f 92       	push	r9
     f0e:	af 92       	push	r10
     f10:	bf 92       	push	r11
     f12:	cf 92       	push	r12
     f14:	df 92       	push	r13
     f16:	ef 92       	push	r14
     f18:	ff 92       	push	r15
     f1a:	0f 93       	push	r16
     f1c:	1f 93       	push	r17
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	66 97       	sbiw	r28, 0x16	; 22
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	f8 94       	cli
     f2c:	de bf       	out	0x3e, r29	; 62
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	cd bf       	out	0x3d, r28	; 61
     f32:	8e 83       	std	Y+6, r24	; 0x06
     f34:	78 87       	std	Y+8, r23	; 0x08
     f36:	6f 83       	std	Y+7, r22	; 0x07
unsigned long cluster, sector, firstSector, firstCluster, nextCluster;
struct dir_Structure *dir;
unsigned int i;
unsigned char j;

cluster = rootCluster; //root cluster
     f38:	80 91 0a 02 	lds	r24, 0x020A
     f3c:	90 91 0b 02 	lds	r25, 0x020B
     f40:	a0 91 0c 02 	lds	r26, 0x020C
     f44:	b0 91 0d 02 	lds	r27, 0x020D
     f48:	8e 87       	std	Y+14, r24	; 0x0e
     f4a:	9f 87       	std	Y+15, r25	; 0x0f
     f4c:	a8 8b       	std	Y+16, r26	; 0x10
     f4e:	b9 8b       	std	Y+17, r27	; 0x11

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &buffer[i];

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
     f50:	a2 e1       	ldi	r26, 0x12	; 18
     f52:	b2 e0       	ldi	r27, 0x02	; 2
     f54:	ad 87       	std	Y+13, r26	; 0x0d
     f56:	bc 8b       	std	Y+20, r27	; 0x14
     f58:	9b 01       	movw	r18, r22
     f5a:	2f 5f       	subi	r18, 0xFF	; 255
     f5c:	3f 4f       	sbci	r19, 0xFF	; 255
     f5e:	3b 8b       	std	Y+19, r19	; 0x13
     f60:	2a 8b       	std	Y+18, r18	; 0x12

cluster = rootCluster; //root cluster

while(1)
{
   firstSector = getFirstSector (cluster);
     f62:	6e 85       	ldd	r22, Y+14	; 0x0e
     f64:	7f 85       	ldd	r23, Y+15	; 0x0f
     f66:	88 89       	ldd	r24, Y+16	; 0x10
     f68:	99 89       	ldd	r25, Y+17	; 0x11
     f6a:	0e 94 45 02 	call	0x48a	; 0x48a <getFirstSector>
     f6e:	6b 01       	movw	r12, r22
     f70:	7c 01       	movw	r14, r24

   for(sector = 0; sector < sectorPerCluster; sector++)
     f72:	80 91 12 04 	lds	r24, 0x0412
     f76:	90 91 13 04 	lds	r25, 0x0413
     f7a:	89 2b       	or	r24, r25
     f7c:	09 f4       	brne	.+2      	; 0xf80 <findFiles+0x82>
     f7e:	96 c1       	rjmp	.+812    	; 0x12ac <findFiles+0x3ae>
     f80:	81 2c       	mov	r8, r1
     f82:	91 2c       	mov	r9, r1
     f84:	a1 2c       	mov	r10, r1
     f86:	b1 2c       	mov	r11, r1
		      transmitString_F(PSTR("File does not exist!"));
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
     f88:	3e 81       	ldd	r19, Y+6	; 0x06
     f8a:	31 50       	subi	r19, 0x01	; 1
     f8c:	39 83       	std	Y+1, r19	; 0x01
			  }
            }
          }
          else  //when flag = GET_LIST
		  {
		     printf("\n");
     f8e:	44 24       	eor	r4, r4
     f90:	43 94       	inc	r4
     f92:	c9 86       	std	Y+9, r12	; 0x09
     f94:	da 86       	std	Y+10, r13	; 0x0a
     f96:	eb 86       	std	Y+11, r14	; 0x0b
     f98:	fc 86       	std	Y+12, r15	; 0x0c
     f9a:	cf 80       	ldd	r12, Y+7	; 0x07
     f9c:	d8 84       	ldd	r13, Y+8	; 0x08
     f9e:	6a 88       	ldd	r6, Y+18	; 0x12
     fa0:	7b 88       	ldd	r7, Y+19	; 0x13
     fa2:	5c 88       	ldd	r5, Y+20	; 0x14
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
     fa4:	89 85       	ldd	r24, Y+9	; 0x09
     fa6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fa8:	ab 85       	ldd	r26, Y+11	; 0x0b
     faa:	bc 85       	ldd	r27, Y+12	; 0x0c
     fac:	88 0d       	add	r24, r8
     fae:	99 1d       	adc	r25, r9
     fb0:	aa 1d       	adc	r26, r10
     fb2:	bb 1d       	adc	r27, r11
     fb4:	8a 83       	std	Y+2, r24	; 0x02
     fb6:	9b 83       	std	Y+3, r25	; 0x03
     fb8:	ac 83       	std	Y+4, r26	; 0x04
     fba:	bd 83       	std	Y+5, r27	; 0x05
     fbc:	bc 01       	movw	r22, r24
     fbe:	cd 01       	movw	r24, r26
     fc0:	0e 94 ff 12 	call	0x25fe	; 0x25fe <SD_readSingleBlock>
	

     for(i=0; i<bytesPerSector; i+=32)
     fc4:	80 91 04 02 	lds	r24, 0x0204
     fc8:	90 91 05 02 	lds	r25, 0x0205
     fcc:	89 2b       	or	r24, r25
     fce:	09 f4       	brne	.+2      	; 0xfd2 <findFiles+0xd4>
     fd0:	5c c1       	rjmp	.+696    	; 0x128a <findFiles+0x38c>
     {
	    dir = (struct dir_Structure *) &buffer[i];

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
     fd2:	a2 e1       	ldi	r26, 0x12	; 18
     fd4:	b2 e0       	ldi	r27, 0x02	; 2
     fd6:	8c 91       	ld	r24, X
     fd8:	81 11       	cpse	r24, r1
     fda:	17 c0       	rjmp	.+46     	; 0x100a <findFiles+0x10c>
     fdc:	0a c0       	rjmp	.+20     	; 0xff2 <findFiles+0xf4>
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &buffer[i];
     fde:	fe 8a       	std	Y+22, r15	; 0x16
     fe0:	ed 8a       	std	Y+21, r14	; 0x15
     fe2:	b0 e2       	ldi	r27, 0x20	; 32
     fe4:	eb 0e       	add	r14, r27
     fe6:	f1 1c       	adc	r15, r1
     fe8:	f7 01       	movw	r30, r14
     fea:	b0 97       	sbiw	r30, 0x20	; 32

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
     fec:	80 81       	ld	r24, Z
     fee:	81 11       	cpse	r24, r1
     ff0:	18 c0       	rjmp	.+48     	; 0x1022 <findFiles+0x124>
		{
		  if((flag == GET_FILE) || (flag == DELETE))
     ff2:	8e 81       	ldd	r24, Y+6	; 0x06
     ff4:	81 50       	subi	r24, 0x01	; 1
     ff6:	82 30       	cpi	r24, 0x02	; 2
     ff8:	08 f0       	brcs	.+2      	; 0xffc <findFiles+0xfe>
     ffa:	7a c1       	rjmp	.+756    	; 0x12f0 <findFiles+0x3f2>
		      transmitString_F(PSTR("File does not exist!"));
     ffc:	84 ed       	ldi	r24, 0xD4	; 212
     ffe:	91 e0       	ldi	r25, 0x01	; 1
    1000:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
		  return 0;   
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	78 c1       	rjmp	.+752    	; 0x12fa <findFiles+0x3fc>
    100a:	0f 2e       	mov	r0, r31
    100c:	f2 e3       	ldi	r31, 0x32	; 50
    100e:	ef 2e       	mov	r14, r31
    1010:	f2 e0       	ldi	r31, 0x02	; 2
    1012:	ff 2e       	mov	r15, r31
    1014:	f0 2d       	mov	r31, r0
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &buffer[i];
    1016:	0d 85       	ldd	r16, Y+13	; 0x0d
    1018:	15 2d       	mov	r17, r5
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    101a:	21 2c       	mov	r2, r1
    101c:	31 2c       	mov	r3, r1
			  }
            }
          }
          else  //when flag = GET_LIST
		  {
		     printf("\n");
    101e:	1e 8b       	std	Y+22, r17	; 0x16
    1020:	0d 8b       	std	Y+21, r16	; 0x15
		{
		  if((flag == GET_FILE) || (flag == DELETE))
		      transmitString_F(PSTR("File does not exist!"));
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
    1022:	85 3e       	cpi	r24, 0xE5	; 229
    1024:	09 f4       	brne	.+2      	; 0x1028 <findFiles+0x12a>
    1026:	26 c1       	rjmp	.+588    	; 0x1274 <findFiles+0x376>
    1028:	ed 89       	ldd	r30, Y+21	; 0x15
    102a:	fe 89       	ldd	r31, Y+22	; 0x16
    102c:	83 85       	ldd	r24, Z+11	; 0x0b
    102e:	8f 30       	cpi	r24, 0x0F	; 15
    1030:	09 f4       	brne	.+2      	; 0x1034 <findFiles+0x136>
    1032:	20 c1       	rjmp	.+576    	; 0x1274 <findFiles+0x376>
        {
          if((flag == GET_FILE) || (flag == DELETE))
    1034:	f9 81       	ldd	r31, Y+1	; 0x01
    1036:	f2 30       	cpi	r31, 0x02	; 2
    1038:	08 f0       	brcs	.+2      	; 0x103c <findFiles+0x13e>
    103a:	d2 c0       	rjmp	.+420    	; 0x11e0 <findFiles+0x2e2>
          {
            for(j=0; j<11; j++)
            if(dir->name[j] != fileName[j]) break;
    103c:	ad 89       	ldd	r26, Y+21	; 0x15
    103e:	be 89       	ldd	r27, Y+22	; 0x16
    1040:	9c 91       	ld	r25, X
    1042:	f6 01       	movw	r30, r12
    1044:	80 81       	ld	r24, Z
    1046:	98 13       	cpse	r25, r24
    1048:	15 c1       	rjmp	.+554    	; 0x1274 <findFiles+0x376>
    104a:	11 96       	adiw	r26, 0x01	; 1
    104c:	f3 01       	movw	r30, r6
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
    104e:	84 2d       	mov	r24, r4
    1050:	4d 89       	ldd	r20, Y+21	; 0x15
    1052:	5e 89       	ldd	r21, Y+22	; 0x16
            if(dir->name[j] != fileName[j]) break;
    1054:	2d 91       	ld	r18, X+
    1056:	91 91       	ld	r25, Z+
    1058:	29 13       	cpse	r18, r25
    105a:	04 c0       	rjmp	.+8      	; 0x1064 <findFiles+0x166>
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
    105c:	8f 5f       	subi	r24, 0xFF	; 255
    105e:	8b 30       	cpi	r24, 0x0B	; 11
    1060:	c9 f7       	brne	.-14     	; 0x1054 <findFiles+0x156>
    1062:	09 c0       	rjmp	.+18     	; 0x1076 <findFiles+0x178>
    1064:	5e 8b       	std	Y+22, r21	; 0x16
    1066:	4d 8b       	std	Y+21, r20	; 0x15
            if(dir->name[j] != fileName[j]) break;
            if(j == 11)
    1068:	8b 30       	cpi	r24, 0x0B	; 11
    106a:	09 f0       	breq	.+2      	; 0x106e <findFiles+0x170>
    106c:	03 c1       	rjmp	.+518    	; 0x1274 <findFiles+0x376>
    106e:	3a 01       	movw	r6, r20
    1070:	21 01       	movw	r4, r2
    1072:	8a 01       	movw	r16, r20
    1074:	03 c0       	rjmp	.+6      	; 0x107c <findFiles+0x17e>
    1076:	3a 01       	movw	r6, r20
    1078:	21 01       	movw	r4, r2
    107a:	8a 01       	movw	r16, r20
			{
			  if(flag == GET_FILE)
    107c:	fe 81       	ldd	r31, Y+6	; 0x06
    107e:	f1 30       	cpi	r31, 0x01	; 1
    1080:	09 f0       	breq	.+2      	; 0x1084 <findFiles+0x186>
    1082:	41 c0       	rjmp	.+130    	; 0x1106 <findFiles+0x208>
              {
			    appendFileSector = firstSector + sector;
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	9b 81       	ldd	r25, Y+3	; 0x03
    1088:	ac 81       	ldd	r26, Y+4	; 0x04
    108a:	bd 81       	ldd	r27, Y+5	; 0x05
    108c:	80 93 25 04 	sts	0x0425, r24
    1090:	90 93 26 04 	sts	0x0426, r25
    1094:	a0 93 27 04 	sts	0x0427, r26
    1098:	b0 93 28 04 	sts	0x0428, r27
				appendFileLocation = i;
    109c:	c2 01       	movw	r24, r4
    109e:	a0 e0       	ldi	r26, 0x00	; 0
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	80 93 f8 01 	sts	0x01F8, r24
    10a6:	90 93 f9 01 	sts	0x01F9, r25
    10aa:	a0 93 fa 01 	sts	0x01FA, r26
    10ae:	b0 93 fb 01 	sts	0x01FB, r27
				appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    10b2:	d8 01       	movw	r26, r16
    10b4:	54 96       	adiw	r26, 0x14	; 20
    10b6:	8d 91       	ld	r24, X+
    10b8:	9c 91       	ld	r25, X
    10ba:	55 97       	sbiw	r26, 0x15	; 21
    10bc:	a0 e0       	ldi	r26, 0x00	; 0
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	dc 01       	movw	r26, r24
    10c2:	99 27       	eor	r25, r25
    10c4:	88 27       	eor	r24, r24
    10c6:	f8 01       	movw	r30, r16
    10c8:	42 8d       	ldd	r20, Z+26	; 0x1a
    10ca:	53 8d       	ldd	r21, Z+27	; 0x1b
    10cc:	60 e0       	ldi	r22, 0x00	; 0
    10ce:	70 e0       	ldi	r23, 0x00	; 0
    10d0:	84 2b       	or	r24, r20
    10d2:	95 2b       	or	r25, r21
    10d4:	a6 2b       	or	r26, r22
    10d6:	b7 2b       	or	r27, r23
    10d8:	80 93 1f 04 	sts	0x041F, r24
    10dc:	90 93 20 04 	sts	0x0420, r25
    10e0:	a0 93 21 04 	sts	0x0421, r26
    10e4:	b0 93 22 04 	sts	0x0422, r27
				fileSize = dir->fileSize;
    10e8:	84 8d       	ldd	r24, Z+28	; 0x1c
    10ea:	95 8d       	ldd	r25, Z+29	; 0x1d
    10ec:	a6 8d       	ldd	r26, Z+30	; 0x1e
    10ee:	b7 8d       	ldd	r27, Z+31	; 0x1f
    10f0:	80 93 00 02 	sts	0x0200, r24
    10f4:	90 93 01 02 	sts	0x0201, r25
    10f8:	a0 93 02 02 	sts	0x0202, r26
    10fc:	b0 93 03 02 	sts	0x0203, r27
			    return (dir);
    1100:	86 2d       	mov	r24, r6
    1102:	97 2d       	mov	r25, r7
    1104:	fa c0       	rjmp	.+500    	; 0x12fa <findFiles+0x3fc>
			  }	
			  else    //when flag = DELETE
			  {
			     printf("\n");
    1106:	8a e0       	ldi	r24, 0x0A	; 10
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
				 transmitString_F(PSTR("Deleting.."));
    110e:	89 ec       	ldi	r24, 0xC9	; 201
    1110:	91 e0       	ldi	r25, 0x01	; 1
    1112:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
				 printf("\n");
    1116:	8a e0       	ldi	r24, 0x0A	; 10
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
				 printf("\n");
    111e:	8a e0       	ldi	r24, 0x0A	; 10
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
				 firstCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1126:	d8 01       	movw	r26, r16
    1128:	54 96       	adiw	r26, 0x14	; 20
    112a:	8d 90       	ld	r8, X+
    112c:	9c 90       	ld	r9, X
    112e:	55 97       	sbiw	r26, 0x15	; 21
    1130:	a1 2c       	mov	r10, r1
    1132:	b1 2c       	mov	r11, r1
    1134:	54 01       	movw	r10, r8
    1136:	99 24       	eor	r9, r9
    1138:	88 24       	eor	r8, r8
    113a:	5a 96       	adiw	r26, 0x1a	; 26
    113c:	8d 91       	ld	r24, X+
    113e:	9c 91       	ld	r25, X
    1140:	5b 97       	sbiw	r26, 0x1b	; 27
    1142:	a0 e0       	ldi	r26, 0x00	; 0
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	88 2a       	or	r8, r24
    1148:	99 2a       	or	r9, r25
    114a:	aa 2a       	or	r10, r26
    114c:	bb 2a       	or	r11, r27
                
				 //mark file as 'deleted' in FAT table
				 dir->name[0] = DELETED;    
    114e:	85 ee       	ldi	r24, 0xE5	; 229
    1150:	f8 01       	movw	r30, r16
    1152:	80 83       	st	Z, r24
				 SD_writeSingleBlock (firstSector+sector);
    1154:	6a 81       	ldd	r22, Y+2	; 0x02
    1156:	7b 81       	ldd	r23, Y+3	; 0x03
    1158:	8c 81       	ldd	r24, Y+4	; 0x04
    115a:	9d 81       	ldd	r25, Y+5	; 0x05
    115c:	0e 94 2e 13 	call	0x265c	; 0x265c <SD_writeSingleBlock>
				 			 
				 freeMemoryUpdate (ADD, dir->fileSize);
    1160:	d8 01       	movw	r26, r16
    1162:	5c 96       	adiw	r26, 0x1c	; 28
    1164:	4d 91       	ld	r20, X+
    1166:	5d 91       	ld	r21, X+
    1168:	6d 91       	ld	r22, X+
    116a:	7c 91       	ld	r23, X
    116c:	5f 97       	sbiw	r26, 0x1f	; 31
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	0e 94 0c 07 	call	0xe18	; 0xe18 <freeMemoryUpdate>

				 //update next free cluster entry in FSinfo sector
				 cluster = getSetFreeCluster (NEXT_FREE, GET, 0); 
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	a9 01       	movw	r20, r18
    117a:	60 e0       	ldi	r22, 0x00	; 0
    117c:	82 e0       	ldi	r24, 0x02	; 2
    117e:	0e 94 df 02 	call	0x5be	; 0x5be <getSetFreeCluster>
				 if(firstCluster < cluster)
    1182:	86 16       	cp	r8, r22
    1184:	97 06       	cpc	r9, r23
    1186:	a8 06       	cpc	r10, r24
    1188:	b9 06       	cpc	r11, r25
    118a:	30 f4       	brcc	.+12     	; 0x1198 <findFiles+0x29a>
				     getSetFreeCluster (NEXT_FREE, SET, firstCluster);
    118c:	a5 01       	movw	r20, r10
    118e:	94 01       	movw	r18, r8
    1190:	61 e0       	ldi	r22, 0x01	; 1
    1192:	82 e0       	ldi	r24, 0x02	; 2
    1194:	0e 94 df 02 	call	0x5be	; 0x5be <getSetFreeCluster>

				 //mark all the clusters allocated to the file as 'free'
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
    1198:	00 e0       	ldi	r16, 0x00	; 0
    119a:	10 e0       	ldi	r17, 0x00	; 0
    119c:	98 01       	movw	r18, r16
    119e:	40 e0       	ldi	r20, 0x00	; 0
    11a0:	c5 01       	movw	r24, r10
    11a2:	b4 01       	movw	r22, r8
    11a4:	0e 94 66 02 	call	0x4cc	; 0x4cc <getSetNextCluster>
    11a8:	6b 01       	movw	r12, r22
    11aa:	7c 01       	movw	r14, r24
					getSetNextCluster (firstCluster, SET, 0);
    11ac:	00 e0       	ldi	r16, 0x00	; 0
    11ae:	10 e0       	ldi	r17, 0x00	; 0
    11b0:	98 01       	movw	r18, r16
    11b2:	41 e0       	ldi	r20, 0x01	; 1
    11b4:	c5 01       	movw	r24, r10
    11b6:	b4 01       	movw	r22, r8
    11b8:	0e 94 66 02 	call	0x4cc	; 0x4cc <getSetNextCluster>
					if(nextCluster > 0x0ffffff6) 
    11bc:	b7 ef       	ldi	r27, 0xF7	; 247
    11be:	cb 16       	cp	r12, r27
    11c0:	bf ef       	ldi	r27, 0xFF	; 255
    11c2:	db 06       	cpc	r13, r27
    11c4:	eb 06       	cpc	r14, r27
    11c6:	bf e0       	ldi	r27, 0x0F	; 15
    11c8:	fb 06       	cpc	r15, r27
    11ca:	18 f4       	brcc	.+6      	; 0x11d2 <findFiles+0x2d4>
					   {transmitString_F(PSTR("File deleted!"));return 0;}
					firstCluster = nextCluster;
    11cc:	46 01       	movw	r8, r12
    11ce:	57 01       	movw	r10, r14
    11d0:	e3 cf       	rjmp	.-58     	; 0x1198 <findFiles+0x29a>
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
					getSetNextCluster (firstCluster, SET, 0);
					if(nextCluster > 0x0ffffff6) 
					   {transmitString_F(PSTR("File deleted!"));return 0;}
    11d2:	8b eb       	ldi	r24, 0xBB	; 187
    11d4:	91 e0       	ldi	r25, 0x01	; 1
    11d6:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	8d c0       	rjmp	.+282    	; 0x12fa <findFiles+0x3fc>
			  }
            }
          }
          else  //when flag = GET_LIST
		  {
		     printf("\n");
    11e0:	8a e0       	ldi	r24, 0x0A	; 10
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
    11e8:	14 2d       	mov	r17, r4
    11ea:	00 e0       	ldi	r16, 0x00	; 0
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <findFiles+0x2f4>
    11ee:	0f 5f       	subi	r16, 0xFF	; 255
    11f0:	1f 5f       	subi	r17, 0xFF	; 255
			 for(j=0; j<11; j++)
		     {
			   if(j == 8) transmitByte(' ');
    11f2:	08 30       	cpi	r16, 0x08	; 8
    11f4:	59 f4       	brne	.+22     	; 0x120c <findFiles+0x30e>
    11f6:	80 e2       	ldi	r24, 0x20	; 32
    11f8:	0e 94 a1 13 	call	0x2742	; 0x2742 <transmitByte>
			   transmitByte (dir->name[j]);
    11fc:	ed 89       	ldd	r30, Y+21	; 0x15
    11fe:	fe 89       	ldd	r31, Y+22	; 0x16
    1200:	e0 0f       	add	r30, r16
    1202:	f1 1d       	adc	r31, r1
    1204:	80 81       	ld	r24, Z
    1206:	0e 94 a1 13 	call	0x2742	; 0x2742 <transmitByte>
    120a:	f1 cf       	rjmp	.-30     	; 0x11ee <findFiles+0x2f0>
    120c:	ed 89       	ldd	r30, Y+21	; 0x15
    120e:	fe 89       	ldd	r31, Y+22	; 0x16
    1210:	e0 0f       	add	r30, r16
    1212:	f1 1d       	adc	r31, r1
    1214:	80 81       	ld	r24, Z
    1216:	0e 94 a1 13 	call	0x2742	; 0x2742 <transmitByte>
            }
          }
          else  //when flag = GET_LIST
		  {
		     printf("\n");
			 for(j=0; j<11; j++)
    121a:	1b 30       	cpi	r17, 0x0B	; 11
    121c:	40 f3       	brcs	.-48     	; 0x11ee <findFiles+0x2f0>
		     {
			   if(j == 8) transmitByte(' ');
			   transmitByte (dir->name[j]);
			 }
		     transmitString_F (PSTR("   "));
    121e:	87 eb       	ldi	r24, 0xB7	; 183
    1220:	91 e0       	ldi	r25, 0x01	; 1
    1222:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
		     if((dir->attrib != 0x10) && (dir->attrib != 0x08))
    1226:	ad 89       	ldd	r26, Y+21	; 0x15
    1228:	be 89       	ldd	r27, Y+22	; 0x16
    122a:	1b 96       	adiw	r26, 0x0b	; 11
    122c:	8c 91       	ld	r24, X
    122e:	80 31       	cpi	r24, 0x10	; 16
    1230:	a1 f0       	breq	.+40     	; 0x125a <findFiles+0x35c>
    1232:	88 30       	cpi	r24, 0x08	; 8
    1234:	c1 f0       	breq	.+48     	; 0x1266 <findFiles+0x368>
			 {
			     transmitString_F (PSTR("FILE" ));
    1236:	82 eb       	ldi	r24, 0xB2	; 178
    1238:	91 e0       	ldi	r25, 0x01	; 1
    123a:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
		         transmitString_F (PSTR("   "));
    123e:	8e ea       	ldi	r24, 0xAE	; 174
    1240:	91 e0       	ldi	r25, 0x01	; 1
    1242:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
			     displayMemory (LOW, dir->fileSize);
    1246:	ed 89       	ldd	r30, Y+21	; 0x15
    1248:	fe 89       	ldd	r31, Y+22	; 0x16
    124a:	44 8d       	ldd	r20, Z+28	; 0x1c
    124c:	55 8d       	ldd	r21, Z+29	; 0x1d
    124e:	66 8d       	ldd	r22, Z+30	; 0x1e
    1250:	77 8d       	ldd	r23, Z+31	; 0x1f
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	0e 94 74 05 	call	0xae8	; 0xae8 <displayMemory>
    1258:	0d c0       	rjmp	.+26     	; 0x1274 <findFiles+0x376>
			 }
			 else
			   transmitString_F ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    125a:	2a ea       	ldi	r18, 0xAA	; 170
    125c:	31 e0       	ldi	r19, 0x01	; 1
    125e:	82 2f       	mov	r24, r18
    1260:	d9 01       	movw	r26, r18
    1262:	9b 2f       	mov	r25, r27
    1264:	05 c0       	rjmp	.+10     	; 0x1270 <findFiles+0x372>
    1266:	e5 ea       	ldi	r30, 0xA5	; 165
    1268:	f1 e0       	ldi	r31, 0x01	; 1
    126a:	8e 2f       	mov	r24, r30
    126c:	df 01       	movw	r26, r30
    126e:	9b 2f       	mov	r25, r27
    1270:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    1274:	b0 e2       	ldi	r27, 0x20	; 32
    1276:	2b 0e       	add	r2, r27
    1278:	31 1c       	adc	r3, r1
    127a:	80 91 04 02 	lds	r24, 0x0204
    127e:	90 91 05 02 	lds	r25, 0x0205
    1282:	28 16       	cp	r2, r24
    1284:	39 06       	cpc	r3, r25
    1286:	08 f4       	brcc	.+2      	; 0x128a <findFiles+0x38c>
    1288:	aa ce       	rjmp	.-684    	; 0xfde <findFiles+0xe0>

while(1)
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    128a:	ef ef       	ldi	r30, 0xFF	; 255
    128c:	8e 1a       	sub	r8, r30
    128e:	9e 0a       	sbc	r9, r30
    1290:	ae 0a       	sbc	r10, r30
    1292:	be 0a       	sbc	r11, r30
    1294:	80 91 12 04 	lds	r24, 0x0412
    1298:	90 91 13 04 	lds	r25, 0x0413
    129c:	a0 e0       	ldi	r26, 0x00	; 0
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	88 16       	cp	r8, r24
    12a2:	99 06       	cpc	r9, r25
    12a4:	aa 06       	cpc	r10, r26
    12a6:	bb 06       	cpc	r11, r27
    12a8:	08 f4       	brcc	.+2      	; 0x12ac <findFiles+0x3ae>
    12aa:	7c ce       	rjmp	.-776    	; 0xfa4 <findFiles+0xa6>
		  }
       }
     }
   }

   cluster = (getSetNextCluster (cluster, GET, 0));
    12ac:	00 e0       	ldi	r16, 0x00	; 0
    12ae:	10 e0       	ldi	r17, 0x00	; 0
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	40 e0       	ldi	r20, 0x00	; 0
    12b6:	6e 85       	ldd	r22, Y+14	; 0x0e
    12b8:	7f 85       	ldd	r23, Y+15	; 0x0f
    12ba:	88 89       	ldd	r24, Y+16	; 0x10
    12bc:	99 89       	ldd	r25, Y+17	; 0x11
    12be:	0e 94 66 02 	call	0x4cc	; 0x4cc <getSetNextCluster>
    12c2:	6e 87       	std	Y+14, r22	; 0x0e
    12c4:	7f 87       	std	Y+15, r23	; 0x0f
    12c6:	88 8b       	std	Y+16, r24	; 0x10
    12c8:	99 8b       	std	Y+17, r25	; 0x11

   if(cluster > 0x0ffffff6)
    12ca:	67 3f       	cpi	r22, 0xF7	; 247
    12cc:	ff ef       	ldi	r31, 0xFF	; 255
    12ce:	7f 07       	cpc	r23, r31
    12d0:	8f 07       	cpc	r24, r31
    12d2:	ff e0       	ldi	r31, 0x0F	; 15
    12d4:	9f 07       	cpc	r25, r31
    12d6:	78 f4       	brcc	.+30     	; 0x12f6 <findFiles+0x3f8>
   	 return 0;
   if(cluster == 0) 
    12d8:	67 2b       	or	r22, r23
    12da:	68 2b       	or	r22, r24
    12dc:	69 2b       	or	r22, r25
    12de:	09 f0       	breq	.+2      	; 0x12e2 <findFiles+0x3e4>
    12e0:	40 ce       	rjmp	.-896    	; 0xf62 <findFiles+0x64>
   {transmitString_F(PSTR("Error in getting cluster"));  return 0;}
    12e2:	8c e8       	ldi	r24, 0x8C	; 140
    12e4:	91 e0       	ldi	r25, 0x01	; 1
    12e6:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	05 c0       	rjmp	.+10     	; 0x12fa <findFiles+0x3fc>

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
		{
		  if((flag == GET_FILE) || (flag == DELETE))
		      transmitString_F(PSTR("File does not exist!"));
		  return 0;   
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <findFiles+0x3fc>
   }

   cluster = (getSetNextCluster (cluster, GET, 0));

   if(cluster > 0x0ffffff6)
   	 return 0;
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	90 e0       	ldi	r25, 0x00	; 0
   if(cluster == 0) 
   {transmitString_F(PSTR("Error in getting cluster"));  return 0;}
 }
return 0;
}
    12fa:	66 96       	adiw	r28, 0x16	; 22
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	de bf       	out	0x3e, r29	; 62
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	cd bf       	out	0x3d, r28	; 61
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	1f 91       	pop	r17
    130c:	0f 91       	pop	r16
    130e:	ff 90       	pop	r15
    1310:	ef 90       	pop	r14
    1312:	df 90       	pop	r13
    1314:	cf 90       	pop	r12
    1316:	bf 90       	pop	r11
    1318:	af 90       	pop	r10
    131a:	9f 90       	pop	r9
    131c:	8f 90       	pop	r8
    131e:	7f 90       	pop	r7
    1320:	6f 90       	pop	r6
    1322:	5f 90       	pop	r5
    1324:	4f 90       	pop	r4
    1326:	3f 90       	pop	r3
    1328:	2f 90       	pop	r2
    132a:	08 95       	ret

0000132c <readFile>:
//return: 0, if normal operation or flag is READ
//	      1, if file is already existing and flag = VERIFY
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
    132c:	3f 92       	push	r3
    132e:	4f 92       	push	r4
    1330:	5f 92       	push	r5
    1332:	6f 92       	push	r6
    1334:	7f 92       	push	r7
    1336:	8f 92       	push	r8
    1338:	9f 92       	push	r9
    133a:	af 92       	push	r10
    133c:	bf 92       	push	r11
    133e:	cf 92       	push	r12
    1340:	df 92       	push	r13
    1342:	ef 92       	push	r14
    1344:	ff 92       	push	r15
    1346:	0f 93       	push	r16
    1348:	1f 93       	push	r17
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	2c 97       	sbiw	r28, 0x0c	; 12
    1354:	0f b6       	in	r0, 0x3f	; 63
    1356:	f8 94       	cli
    1358:	de bf       	out	0x3e, r29	; 62
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	cd bf       	out	0x3d, r28	; 61
    135e:	18 2f       	mov	r17, r24
    1360:	7b 01       	movw	r14, r22
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
    1362:	cb 01       	movw	r24, r22
    1364:	0e 94 4a 04 	call	0x894	; 0x894 <convertFileName>
if(error) return 2;
    1368:	81 11       	cpse	r24, r1
    136a:	a8 c0       	rjmp	.+336    	; 0x14bc <readFile+0x190>

dir = findFiles (GET_FILE, fileName); //get the file location
    136c:	b7 01       	movw	r22, r14
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	0e 94 7f 07 	call	0xefe	; 0xefe <findFiles>
if(dir == 0) 
    1374:	00 97       	sbiw	r24, 0x00	; 0
    1376:	09 f4       	brne	.+2      	; 0x137a <readFile+0x4e>
    1378:	a3 c0       	rjmp	.+326    	; 0x14c0 <readFile+0x194>
  return (0);

if(flag == VERIFY) return (1);	//specified file name is already existing
    137a:	11 30       	cpi	r17, 0x01	; 1
    137c:	09 f4       	brne	.+2      	; 0x1380 <readFile+0x54>
    137e:	a2 c0       	rjmp	.+324    	; 0x14c4 <readFile+0x198>

cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1380:	dc 01       	movw	r26, r24
    1382:	54 96       	adiw	r26, 0x14	; 20
    1384:	4d 90       	ld	r4, X+
    1386:	5c 90       	ld	r5, X
    1388:	55 97       	sbiw	r26, 0x15	; 21
    138a:	61 2c       	mov	r6, r1
    138c:	71 2c       	mov	r7, r1
    138e:	32 01       	movw	r6, r4
    1390:	55 24       	eor	r5, r5
    1392:	44 24       	eor	r4, r4
    1394:	5a 96       	adiw	r26, 0x1a	; 26
    1396:	4d 91       	ld	r20, X+
    1398:	5c 91       	ld	r21, X
    139a:	5b 97       	sbiw	r26, 0x1b	; 27
    139c:	60 e0       	ldi	r22, 0x00	; 0
    139e:	70 e0       	ldi	r23, 0x00	; 0
    13a0:	93 01       	movw	r18, r6
    13a2:	82 01       	movw	r16, r4
    13a4:	04 2b       	or	r16, r20
    13a6:	15 2b       	or	r17, r21
    13a8:	26 2b       	or	r18, r22
    13aa:	37 2b       	or	r19, r23
    13ac:	09 87       	std	Y+9, r16	; 0x09
    13ae:	1a 87       	std	Y+10, r17	; 0x0a
    13b0:	2b 87       	std	Y+11, r18	; 0x0b
    13b2:	3c 87       	std	Y+12, r19	; 0x0c

fileSize = dir->fileSize;
    13b4:	5c 96       	adiw	r26, 0x1c	; 28
    13b6:	4d 90       	ld	r4, X+
    13b8:	5d 90       	ld	r5, X+
    13ba:	6d 90       	ld	r6, X+
    13bc:	7c 90       	ld	r7, X
    13be:	5f 97       	sbiw	r26, 0x1f	; 31

printf("\n");
    13c0:	8a e0       	ldi	r24, 0x0A	; 10
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
printf("\n");
    13c8:	8a e0       	ldi	r24, 0x0A	; 10
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
    13d0:	19 82       	std	Y+1, r1	; 0x01
    13d2:	1a 82       	std	Y+2, r1	; 0x02
    13d4:	1b 82       	std	Y+3, r1	; 0x03
    13d6:	1c 82       	std	Y+4, r1	; 0x04

while(1)
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
    13d8:	31 2c       	mov	r3, r1
printf("\n");
printf("\n");

while(1)
{
  firstSector = getFirstSector (cluster);
    13da:	69 85       	ldd	r22, Y+9	; 0x09
    13dc:	7a 85       	ldd	r23, Y+10	; 0x0a
    13de:	8b 85       	ldd	r24, Y+11	; 0x0b
    13e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    13e2:	0e 94 45 02 	call	0x48a	; 0x48a <getFirstSector>
    13e6:	6d 83       	std	Y+5, r22	; 0x05
    13e8:	7e 83       	std	Y+6, r23	; 0x06
    13ea:	8f 83       	std	Y+7, r24	; 0x07
    13ec:	98 87       	std	Y+8, r25	; 0x08

  for(j=0; j<sectorPerCluster; j++)
    13ee:	80 91 12 04 	lds	r24, 0x0412
    13f2:	90 91 13 04 	lds	r25, 0x0413
    13f6:	89 2b       	or	r24, r25
    13f8:	09 f4       	brne	.+2      	; 0x13fc <readFile+0xd0>
    13fa:	47 c0       	rjmp	.+142    	; 0x148a <readFile+0x15e>
    13fc:	13 2d       	mov	r17, r3
  {
    SD_readSingleBlock(firstSector + j);
    13fe:	6d 81       	ldd	r22, Y+5	; 0x05
    1400:	7e 81       	ldd	r23, Y+6	; 0x06
    1402:	8f 81       	ldd	r24, Y+7	; 0x07
    1404:	98 85       	ldd	r25, Y+8	; 0x08
    1406:	61 0f       	add	r22, r17
    1408:	71 1d       	adc	r23, r1
    140a:	81 1d       	adc	r24, r1
    140c:	91 1d       	adc	r25, r1
    140e:	0e 94 ff 12 	call	0x25fe	; 0x25fe <SD_readSingleBlock>
    1412:	89 80       	ldd	r8, Y+1	; 0x01
    1414:	9a 80       	ldd	r9, Y+2	; 0x02
    1416:	ab 80       	ldd	r10, Y+3	; 0x03
    1418:	bc 80       	ldd	r11, Y+4	; 0x04
    141a:	22 e0       	ldi	r18, 0x02	; 2
    141c:	92 0e       	add	r9, r18
    141e:	a1 1c       	adc	r10, r1
    1420:	b1 1c       	adc	r11, r1
    1422:	c9 80       	ldd	r12, Y+1	; 0x01
    1424:	da 80       	ldd	r13, Y+2	; 0x02
    1426:	eb 80       	ldd	r14, Y+3	; 0x03
    1428:	fc 80       	ldd	r15, Y+4	; 0x04
    142a:	f6 01       	movw	r30, r12
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	9a 81       	ldd	r25, Y+2	; 0x02
    1430:	e8 1b       	sub	r30, r24
    1432:	f9 0b       	sbc	r31, r25
    
	for(k=0; k<512; k++)
    {
      transmitByte(buffer[k]);
    1434:	ee 5e       	subi	r30, 0xEE	; 238
    1436:	fd 4f       	sbci	r31, 0xFD	; 253
    1438:	80 81       	ld	r24, Z
    143a:	0e 94 a1 13 	call	0x2742	; 0x2742 <transmitByte>
      if ((byteCounter++) >= fileSize ) return 0;
    143e:	b7 01       	movw	r22, r14
    1440:	a6 01       	movw	r20, r12
    1442:	4f 5f       	subi	r20, 0xFF	; 255
    1444:	5f 4f       	sbci	r21, 0xFF	; 255
    1446:	6f 4f       	sbci	r22, 0xFF	; 255
    1448:	7f 4f       	sbci	r23, 0xFF	; 255
    144a:	c4 14       	cp	r12, r4
    144c:	d5 04       	cpc	r13, r5
    144e:	e6 04       	cpc	r14, r6
    1450:	f7 04       	cpc	r15, r7
    1452:	d0 f5       	brcc	.+116    	; 0x14c8 <readFile+0x19c>

  for(j=0; j<sectorPerCluster; j++)
  {
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
    1454:	48 15       	cp	r20, r8
    1456:	59 05       	cpc	r21, r9
    1458:	6a 05       	cpc	r22, r10
    145a:	7b 05       	cpc	r23, r11
    145c:	19 f0       	breq	.+6      	; 0x1464 <readFile+0x138>
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    145e:	6a 01       	movw	r12, r20
    1460:	7b 01       	movw	r14, r22
    1462:	e3 cf       	rjmp	.-58     	; 0x142a <readFile+0xfe>

while(1)
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
    1464:	1f 5f       	subi	r17, 0xFF	; 255
    1466:	80 91 12 04 	lds	r24, 0x0412
    146a:	90 91 13 04 	lds	r25, 0x0413
    146e:	21 2f       	mov	r18, r17
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	28 17       	cp	r18, r24
    1474:	39 07       	cpc	r19, r25
    1476:	28 f4       	brcc	.+10     	; 0x1482 <readFile+0x156>
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    1478:	49 83       	std	Y+1, r20	; 0x01
    147a:	5a 83       	std	Y+2, r21	; 0x02
    147c:	6b 83       	std	Y+3, r22	; 0x03
    147e:	7c 83       	std	Y+4, r23	; 0x04
    1480:	be cf       	rjmp	.-132    	; 0x13fe <readFile+0xd2>
    1482:	49 83       	std	Y+1, r20	; 0x01
    1484:	5a 83       	std	Y+2, r21	; 0x02
    1486:	6b 83       	std	Y+3, r22	; 0x03
    1488:	7c 83       	std	Y+4, r23	; 0x04
    }
  }
  cluster = getSetNextCluster (cluster, GET, 0);
    148a:	00 e0       	ldi	r16, 0x00	; 0
    148c:	10 e0       	ldi	r17, 0x00	; 0
    148e:	98 01       	movw	r18, r16
    1490:	43 2d       	mov	r20, r3
    1492:	69 85       	ldd	r22, Y+9	; 0x09
    1494:	7a 85       	ldd	r23, Y+10	; 0x0a
    1496:	8b 85       	ldd	r24, Y+11	; 0x0b
    1498:	9c 85       	ldd	r25, Y+12	; 0x0c
    149a:	0e 94 66 02 	call	0x4cc	; 0x4cc <getSetNextCluster>
    149e:	69 87       	std	Y+9, r22	; 0x09
    14a0:	7a 87       	std	Y+10, r23	; 0x0a
    14a2:	8b 87       	std	Y+11, r24	; 0x0b
    14a4:	9c 87       	std	Y+12, r25	; 0x0c
  if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 0;}
    14a6:	67 2b       	or	r22, r23
    14a8:	68 2b       	or	r22, r24
    14aa:	69 2b       	or	r22, r25
    14ac:	09 f0       	breq	.+2      	; 0x14b0 <readFile+0x184>
    14ae:	95 cf       	rjmp	.-214    	; 0x13da <readFile+0xae>
    14b0:	83 e7       	ldi	r24, 0x73	; 115
    14b2:	91 e0       	ldi	r25, 0x01	; 1
    14b4:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	07 c0       	rjmp	.+14     	; 0x14ca <readFile+0x19e>
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
if(error) return 2;
    14bc:	82 e0       	ldi	r24, 0x02	; 2
    14be:	05 c0       	rjmp	.+10     	; 0x14ca <readFile+0x19e>

dir = findFiles (GET_FILE, fileName); //get the file location
if(dir == 0) 
  return (0);
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	03 c0       	rjmp	.+6      	; 0x14ca <readFile+0x19e>

if(flag == VERIFY) return (1);	//specified file name is already existing
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	01 c0       	rjmp	.+2      	; 0x14ca <readFile+0x19e>
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    14c8:	80 e0       	ldi	r24, 0x00	; 0
  }
  cluster = getSetNextCluster (cluster, GET, 0);
  if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 0;}
}
return 0;
}
    14ca:	2c 96       	adiw	r28, 0x0c	; 12
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	f8 94       	cli
    14d0:	de bf       	out	0x3e, r29	; 62
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	cd bf       	out	0x3d, r28	; 61
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	1f 91       	pop	r17
    14dc:	0f 91       	pop	r16
    14de:	ff 90       	pop	r15
    14e0:	ef 90       	pop	r14
    14e2:	df 90       	pop	r13
    14e4:	cf 90       	pop	r12
    14e6:	bf 90       	pop	r11
    14e8:	af 90       	pop	r10
    14ea:	9f 90       	pop	r9
    14ec:	8f 90       	pop	r8
    14ee:	7f 90       	pop	r7
    14f0:	6f 90       	pop	r6
    14f2:	5f 90       	pop	r5
    14f4:	4f 90       	pop	r4
    14f6:	3f 90       	pop	r3
    14f8:	08 95       	ret

000014fa <deleteFile>:
//Function: to delete a specified file from the root directory
//Arguments: pointer to the file name
//return: none
//********************************************************************
void deleteFile (unsigned char *fileName)
{
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	ec 01       	movw	r28, r24
  unsigned char error;

  error = convertFileName (fileName);
    1500:	0e 94 4a 04 	call	0x894	; 0x894 <convertFileName>
  if(error) return;
    1504:	81 11       	cpse	r24, r1
    1506:	04 c0       	rjmp	.+8      	; 0x1510 <deleteFile+0x16>

  findFiles (DELETE, fileName);
    1508:	be 01       	movw	r22, r28
    150a:	82 e0       	ldi	r24, 0x02	; 2
    150c:	0e 94 7f 07 	call	0xefe	; 0xefe <findFiles>
}
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	08 95       	ret

00001516 <writeFile>:
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
    1516:	2f 92       	push	r2
    1518:	3f 92       	push	r3
    151a:	4f 92       	push	r4
    151c:	5f 92       	push	r5
    151e:	6f 92       	push	r6
    1520:	7f 92       	push	r7
    1522:	8f 92       	push	r8
    1524:	9f 92       	push	r9
    1526:	af 92       	push	r10
    1528:	bf 92       	push	r11
    152a:	cf 92       	push	r12
    152c:	df 92       	push	r13
    152e:	ef 92       	push	r14
    1530:	ff 92       	push	r15
    1532:	0f 93       	push	r16
    1534:	1f 93       	push	r17
    1536:	cf 93       	push	r28
    1538:	df 93       	push	r29
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62
    153e:	60 97       	sbiw	r28, 0x10	; 16
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	cd bf       	out	0x3d, r28	; 61
    154a:	8f 83       	std	Y+7, r24	; 0x07
    154c:	9b 87       	std	Y+11, r25	; 0x0b
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector;
unsigned int i, firstClusterHigh, firstClusterLow;
struct dir_Structure *dir;
unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;

j = readFile (VERIFY, fileName);
    154e:	68 2f       	mov	r22, r24
    1550:	79 2f       	mov	r23, r25
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	0e 94 96 09 	call	0x132c	; 0x132c <readFile>

if(j == 1) 
    1558:	81 30       	cpi	r24, 0x01	; 1
    155a:	09 f0       	breq	.+2      	; 0x155e <writeFile+0x48>
    155c:	53 c0       	rjmp	.+166    	; 0x1604 <writeFile+0xee>
{
  transmitString_F(PSTR("  File already existing, appending data..")); 
    155e:	86 e3       	ldi	r24, 0x36	; 54
    1560:	91 e0       	ldi	r25, 0x01	; 1
    1562:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
  appendFile = 1;
  cluster = appendStartCluster;
    1566:	c0 90 1f 04 	lds	r12, 0x041F
    156a:	d0 90 20 04 	lds	r13, 0x0420
    156e:	e0 90 21 04 	lds	r14, 0x0421
    1572:	f0 90 22 04 	lds	r15, 0x0422
  clusterCount=0;
    1576:	81 2c       	mov	r8, r1
    1578:	91 2c       	mov	r9, r1
    157a:	54 01       	movw	r10, r8
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    157c:	00 e0       	ldi	r16, 0x00	; 0
    157e:	10 e0       	ldi	r17, 0x00	; 0
    1580:	98 01       	movw	r18, r16
    1582:	40 e0       	ldi	r20, 0x00	; 0
    1584:	c7 01       	movw	r24, r14
    1586:	b6 01       	movw	r22, r12
    1588:	0e 94 66 02 	call	0x4cc	; 0x4cc <getSetNextCluster>
    if(nextCluster == EOF) break;
    158c:	6f 3f       	cpi	r22, 0xFF	; 255
    158e:	2f ef       	ldi	r18, 0xFF	; 255
    1590:	72 07       	cpc	r23, r18
    1592:	82 07       	cpc	r24, r18
    1594:	2f e0       	ldi	r18, 0x0F	; 15
    1596:	92 07       	cpc	r25, r18
    1598:	41 f0       	breq	.+16     	; 0x15aa <writeFile+0x94>
	cluster = nextCluster;
	clusterCount++;
    159a:	3f ef       	ldi	r19, 0xFF	; 255
    159c:	83 1a       	sub	r8, r19
    159e:	93 0a       	sbc	r9, r19
    15a0:	a3 0a       	sbc	r10, r19
    15a2:	b3 0a       	sbc	r11, r19
  clusterCount=0;
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    if(nextCluster == EOF) break;
	cluster = nextCluster;
    15a4:	6b 01       	movw	r12, r22
    15a6:	7c 01       	movw	r14, r24
	clusterCount++;
  }
    15a8:	e9 cf       	rjmp	.-46     	; 0x157c <writeFile+0x66>

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
    15aa:	a0 91 12 04 	lds	r26, 0x0412
    15ae:	b0 91 13 04 	lds	r27, 0x0413
    15b2:	20 91 04 02 	lds	r18, 0x0204
    15b6:	30 91 05 02 	lds	r19, 0x0205
    15ba:	e0 91 04 02 	lds	r30, 0x0204
    15be:	f0 91 05 02 	lds	r31, 0x0205
    15c2:	0e 94 04 14 	call	0x2808	; 0x2808 <__umulhisi3>
    15c6:	9b 01       	movw	r18, r22
    15c8:	ac 01       	movw	r20, r24
    15ca:	c5 01       	movw	r24, r10
    15cc:	b4 01       	movw	r22, r8
    15ce:	0e 94 cc 13 	call	0x2798	; 0x2798 <__mulsi3>
    15d2:	00 91 00 02 	lds	r16, 0x0200
    15d6:	10 91 01 02 	lds	r17, 0x0201
    15da:	20 91 02 02 	lds	r18, 0x0202
    15de:	30 91 03 02 	lds	r19, 0x0203
    15e2:	48 01       	movw	r8, r16
    15e4:	59 01       	movw	r10, r18
    15e6:	86 1a       	sub	r8, r22
    15e8:	97 0a       	sbc	r9, r23
    15ea:	a8 0a       	sbc	r10, r24
    15ec:	b9 0a       	sbc	r11, r25
    15ee:	c5 01       	movw	r24, r10
    15f0:	b4 01       	movw	r22, r8
    15f2:	9f 01       	movw	r18, r30
    15f4:	40 e0       	ldi	r20, 0x00	; 0
    15f6:	50 e0       	ldi	r21, 0x00	; 0
    15f8:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <__udivmodsi4>
    15fc:	b2 2e       	mov	r11, r18
  start = 1;
    15fe:	21 e0       	ldi	r18, 0x01	; 1
    1600:	2c 87       	std	Y+12, r18	; 0x0c
    1602:	4d c0       	rjmp	.+154    	; 0x169e <writeFile+0x188>
//  appendFile();
//  return;
}
else if(j == 2) 
    1604:	82 30       	cpi	r24, 0x02	; 2
    1606:	09 f4       	brne	.+2      	; 0x160a <writeFile+0xf4>
    1608:	44 c3       	rjmp	.+1672   	; 0x1c92 <writeFile+0x77c>
   return; //invalid file name
else
{
  printf("\n");
    160a:	8a e0       	ldi	r24, 0x0A	; 10
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
  transmitString_F(PSTR(" Creating File.."));
    1612:	85 e2       	ldi	r24, 0x25	; 37
    1614:	91 e0       	ldi	r25, 0x01	; 1
    1616:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>

  cluster = getSetFreeCluster (NEXT_FREE, GET, 0);
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	a9 01       	movw	r20, r18
    1620:	60 e0       	ldi	r22, 0x00	; 0
    1622:	82 e0       	ldi	r24, 0x02	; 2
    1624:	0e 94 df 02 	call	0x5be	; 0x5be <getSetFreeCluster>
  if(cluster > totalClusters)
    1628:	00 91 06 02 	lds	r16, 0x0206
    162c:	10 91 07 02 	lds	r17, 0x0207
    1630:	20 91 08 02 	lds	r18, 0x0208
    1634:	30 91 09 02 	lds	r19, 0x0209
    1638:	06 17       	cp	r16, r22
    163a:	17 07       	cpc	r17, r23
    163c:	28 07       	cpc	r18, r24
    163e:	39 07       	cpc	r19, r25
    1640:	40 f4       	brcc	.+16     	; 0x1652 <writeFile+0x13c>
     cluster = rootCluster;
    1642:	60 91 0a 02 	lds	r22, 0x020A
    1646:	70 91 0b 02 	lds	r23, 0x020B
    164a:	80 91 0c 02 	lds	r24, 0x020C
    164e:	90 91 0d 02 	lds	r25, 0x020D

  cluster = searchNextFreeCluster(cluster);
    1652:	0e 94 cf 04 	call	0x99e	; 0x99e <searchNextFreeCluster>
    1656:	6b 01       	movw	r12, r22
    1658:	7c 01       	movw	r14, r24
   if(cluster == 0)
    165a:	61 15       	cp	r22, r1
    165c:	71 05       	cpc	r23, r1
    165e:	81 05       	cpc	r24, r1
    1660:	91 05       	cpc	r25, r1
    1662:	49 f4       	brne	.+18     	; 0x1676 <writeFile+0x160>
   {
      printf("\n");
    1664:	8a e0       	ldi	r24, 0x0A	; 10
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
      transmitString_F(PSTR(" No free cluster!"));
    166c:	83 e1       	ldi	r24, 0x13	; 19
    166e:	91 e0       	ldi	r25, 0x01	; 1
    1670:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
	  return;
    1674:	0e c3       	rjmp	.+1564   	; 0x1c92 <writeFile+0x77c>
   }
  getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    1676:	0f ef       	ldi	r16, 0xFF	; 255
    1678:	1f ef       	ldi	r17, 0xFF	; 255
    167a:	2f ef       	ldi	r18, 0xFF	; 255
    167c:	3f e0       	ldi	r19, 0x0F	; 15
    167e:	41 e0       	ldi	r20, 0x01	; 1
    1680:	0e 94 66 02 	call	0x4cc	; 0x4cc <getSetNextCluster>
   
  firstClusterHigh = (unsigned int) ((cluster & 0xffff0000) >> 16 );
    1684:	fe 86       	std	Y+14, r15	; 0x0e
    1686:	ed 86       	std	Y+13, r14	; 0x0d
  firstClusterLow = (unsigned int) ( cluster & 0x0000ffff);
    1688:	d8 8a       	std	Y+16, r13	; 0x10
    168a:	cf 86       	std	Y+15, r12	; 0x0f
  fileSize = 0;
    168c:	10 92 00 02 	sts	0x0200, r1
    1690:	10 92 01 02 	sts	0x0201, r1
    1694:	10 92 02 02 	sts	0x0202, r1
    1698:	10 92 03 02 	sts	0x0203, r1
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector;
    169c:	1c 86       	std	Y+12, r1	; 0x0c
    169e:	8c 85       	ldd	r24, Y+12	; 0x0c
    16a0:	61 2c       	mov	r6, r1
   }
   else
   {
      startBlock = getFirstSector (cluster);
	  i=0;
	  j=0;
    16a2:	71 2c       	mov	r7, r1
while(1)
{
   if(start)
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    16a4:	2b 2d       	mov	r18, r11
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 e0       	ldi	r20, 0x00	; 0
    16aa:	50 e0       	ldi	r21, 0x00	; 0
    16ac:	2a 83       	std	Y+2, r18	; 0x02
    16ae:	3b 83       	std	Y+3, r19	; 0x03
    16b0:	4c 83       	std	Y+4, r20	; 0x04
    16b2:	5d 83       	std	Y+5, r21	; 0x05
	  SD_readSingleBlock (startBlock);
	  i = fileSize % bytesPerSector;
	  j = sector;
    16b4:	be 82       	std	Y+6, r11	; 0x06
     buffer[i++] = data;
	 fileSize++;
     if(data == '\r')  //'Carriege Return (CR)' character
     {
        if(i == 512)
		   sectorEndFlag = 1;  //flag to indicate that the appended '\n' char should be put in the next sector
    16b6:	88 24       	eor	r8, r8
    16b8:	83 94       	inc	r8
   }
   else
   {
      startBlock = getFirstSector (cluster);
	  i=0;
	  j=0;
    16ba:	b7 2c       	mov	r11, r7
     buffer[i++] = data;
	 fileSize++;
     if(data == '\r')  //'Carriege Return (CR)' character
     {
        if(i == 512)
		   sectorEndFlag = 1;  //flag to indicate that the appended '\n' char should be put in the next sector
    16bc:	89 82       	std	Y+1, r8	; 0x01
	    }
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
    16be:	91 2c       	mov	r9, r1
    16c0:	a1 2c       	mov	r10, r1



while(1)
{
   if(start)
    16c2:	88 23       	and	r24, r24
    16c4:	89 f1       	breq	.+98     	; 0x1728 <writeFile+0x212>
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    16c6:	c7 01       	movw	r24, r14
    16c8:	b6 01       	movw	r22, r12
    16ca:	0e 94 45 02 	call	0x48a	; 0x48a <getFirstSector>
    16ce:	2a 81       	ldd	r18, Y+2	; 0x02
    16d0:	3b 81       	ldd	r19, Y+3	; 0x03
    16d2:	4c 81       	ldd	r20, Y+4	; 0x04
    16d4:	5d 81       	ldd	r21, Y+5	; 0x05
    16d6:	26 0f       	add	r18, r22
    16d8:	37 1f       	adc	r19, r23
    16da:	48 1f       	adc	r20, r24
    16dc:	59 1f       	adc	r21, r25
    16de:	20 93 0e 02 	sts	0x020E, r18
    16e2:	30 93 0f 02 	sts	0x020F, r19
    16e6:	40 93 10 02 	sts	0x0210, r20
    16ea:	50 93 11 02 	sts	0x0211, r21
	  SD_readSingleBlock (startBlock);
    16ee:	60 91 0e 02 	lds	r22, 0x020E
    16f2:	70 91 0f 02 	lds	r23, 0x020F
    16f6:	80 91 10 02 	lds	r24, 0x0210
    16fa:	90 91 11 02 	lds	r25, 0x0211
    16fe:	0e 94 ff 12 	call	0x25fe	; 0x25fe <SD_readSingleBlock>
	  i = fileSize % bytesPerSector;
    1702:	20 91 04 02 	lds	r18, 0x0204
    1706:	30 91 05 02 	lds	r19, 0x0205
    170a:	40 e0       	ldi	r20, 0x00	; 0
    170c:	50 e0       	ldi	r21, 0x00	; 0
    170e:	60 91 00 02 	lds	r22, 0x0200
    1712:	70 91 01 02 	lds	r23, 0x0201
    1716:	80 91 02 02 	lds	r24, 0x0202
    171a:	90 91 03 02 	lds	r25, 0x0203
    171e:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <__udivmodsi4>
    1722:	1b 01       	movw	r2, r22
	  j = sector;
    1724:	4e 80       	ldd	r4, Y+6	; 0x06
    1726:	0f c0       	rjmp	.+30     	; 0x1746 <writeFile+0x230>
   }
   else
   {
      startBlock = getFirstSector (cluster);
    1728:	c7 01       	movw	r24, r14
    172a:	b6 01       	movw	r22, r12
    172c:	0e 94 45 02 	call	0x48a	; 0x48a <getFirstSector>
    1730:	60 93 0e 02 	sts	0x020E, r22
    1734:	70 93 0f 02 	sts	0x020F, r23
    1738:	80 93 10 02 	sts	0x0210, r24
    173c:	90 93 11 02 	sts	0x0211, r25
	  i=0;
    1740:	21 2c       	mov	r2, r1
    1742:	31 2c       	mov	r3, r1
	  j=0;
    1744:	47 2c       	mov	r4, r7
   }
   

   printf("\n");
    1746:	8a e0       	ldi	r24, 0x0A	; 10
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
   transmitString_F(PSTR(" Enter text (end with ~):"));
    174e:	89 ef       	ldi	r24, 0xF9	; 249
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
    1756:	16 2d       	mov	r17, r6
   
   do
   {
     if(sectorEndFlag == 1) //special case when the last character in previous sector was '\r'
    1758:	11 30       	cpi	r17, 0x01	; 1
    175a:	f9 f4       	brne	.+62     	; 0x179a <writeFile+0x284>
	 {
	 	transmitByte ('\n');
    175c:	8a e0       	ldi	r24, 0x0A	; 10
    175e:	0e 94 a1 13 	call	0x2742	; 0x2742 <transmitByte>
        buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    1762:	f1 01       	movw	r30, r2
    1764:	ee 5e       	subi	r30, 0xEE	; 238
    1766:	fd 4f       	sbci	r31, 0xFD	; 253
    1768:	8a e0       	ldi	r24, 0x0A	; 10
    176a:	80 83       	st	Z, r24
		fileSize++;
    176c:	80 91 00 02 	lds	r24, 0x0200
    1770:	90 91 01 02 	lds	r25, 0x0201
    1774:	a0 91 02 02 	lds	r26, 0x0202
    1778:	b0 91 03 02 	lds	r27, 0x0203
    177c:	01 96       	adiw	r24, 0x01	; 1
    177e:	a1 1d       	adc	r26, r1
    1780:	b1 1d       	adc	r27, r1
    1782:	80 93 00 02 	sts	0x0200, r24
    1786:	90 93 01 02 	sts	0x0201, r25
    178a:	a0 93 02 02 	sts	0x0202, r26
    178e:	b0 93 03 02 	sts	0x0203, r27
   do
   {
     if(sectorEndFlag == 1) //special case when the last character in previous sector was '\r'
	 {
	 	transmitByte ('\n');
        buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    1792:	a1 01       	movw	r20, r2
    1794:	4f 5f       	subi	r20, 0xFF	; 255
    1796:	5f 4f       	sbci	r21, 0xFF	; 255
    1798:	1a 01       	movw	r2, r20
		fileSize++;
	 }

	sectorEndFlag = 0;

	 data = receiveByte();
    179a:	0e 94 99 13 	call	0x2732	; 0x2732 <receiveByte>
    179e:	58 2e       	mov	r5, r24
	 if(data == 0x08)	//'Back Space' key pressed
    17a0:	58 e0       	ldi	r21, 0x08	; 8
    17a2:	85 13       	cpse	r24, r21
    17a4:	24 c0       	rjmp	.+72     	; 0x17ee <writeFile+0x2d8>
	 { 
	   if(i != 0)
    17a6:	21 14       	cp	r2, r1
    17a8:	31 04       	cpc	r3, r1
    17aa:	09 f4       	brne	.+2      	; 0x17ae <writeFile+0x298>
    17ac:	5c c2       	rjmp	.+1208   	; 0x1c66 <writeFile+0x750>
	   { 
	     transmitByte(data);
    17ae:	88 e0       	ldi	r24, 0x08	; 8
    17b0:	0e 94 a1 13 	call	0x2742	; 0x2742 <transmitByte>
		 transmitByte(' '); 
    17b4:	80 e2       	ldi	r24, 0x20	; 32
    17b6:	0e 94 a1 13 	call	0x2742	; 0x2742 <transmitByte>
	     transmitByte(data); 
    17ba:	88 e0       	ldi	r24, 0x08	; 8
    17bc:	0e 94 a1 13 	call	0x2742	; 0x2742 <transmitByte>
	     i--; 
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	28 1a       	sub	r2, r24
    17c4:	31 08       	sbc	r3, r1
		 fileSize--;
    17c6:	80 91 00 02 	lds	r24, 0x0200
    17ca:	90 91 01 02 	lds	r25, 0x0201
    17ce:	a0 91 02 02 	lds	r26, 0x0202
    17d2:	b0 91 03 02 	lds	r27, 0x0203
    17d6:	01 97       	sbiw	r24, 0x01	; 1
    17d8:	a1 09       	sbc	r26, r1
    17da:	b1 09       	sbc	r27, r1
    17dc:	80 93 00 02 	sts	0x0200, r24
    17e0:	90 93 01 02 	sts	0x0201, r25
    17e4:	a0 93 02 02 	sts	0x0202, r26
    17e8:	b0 93 03 02 	sts	0x0203, r27
    17ec:	3c c2       	rjmp	.+1144   	; 0x1c66 <writeFile+0x750>
	   } 
	   continue;     
	 }
	 transmitByte(data);
    17ee:	0e 94 a1 13 	call	0x2742	; 0x2742 <transmitByte>
     buffer[i++] = data;
    17f2:	81 01       	movw	r16, r2
    17f4:	0f 5f       	subi	r16, 0xFF	; 255
    17f6:	1f 4f       	sbci	r17, 0xFF	; 255
    17f8:	f1 01       	movw	r30, r2
    17fa:	ee 5e       	subi	r30, 0xEE	; 238
    17fc:	fd 4f       	sbci	r31, 0xFD	; 253
    17fe:	50 82       	st	Z, r5
	 fileSize++;
    1800:	80 91 00 02 	lds	r24, 0x0200
    1804:	90 91 01 02 	lds	r25, 0x0201
    1808:	a0 91 02 02 	lds	r26, 0x0202
    180c:	b0 91 03 02 	lds	r27, 0x0203
    1810:	01 96       	adiw	r24, 0x01	; 1
    1812:	a1 1d       	adc	r26, r1
    1814:	b1 1d       	adc	r27, r1
    1816:	80 93 00 02 	sts	0x0200, r24
    181a:	90 93 01 02 	sts	0x0201, r25
    181e:	a0 93 02 02 	sts	0x0202, r26
    1822:	b0 93 03 02 	sts	0x0203, r27
     if(data == '\r')  //'Carriege Return (CR)' character
    1826:	9d e0       	ldi	r25, 0x0D	; 13
    1828:	59 12       	cpse	r5, r25
    182a:	21 c0       	rjmp	.+66     	; 0x186e <writeFile+0x358>
     {
        if(i == 512)
    182c:	01 15       	cp	r16, r1
    182e:	a2 e0       	ldi	r26, 0x02	; 2
    1830:	1a 07       	cpc	r17, r26
    1832:	19 f1       	breq	.+70     	; 0x187a <writeFile+0x364>
		   sectorEndFlag = 1;  //flag to indicate that the appended '\n' char should be put in the next sector
	    else
		{ 
		   transmitByte ('\n');
    1834:	8a e0       	ldi	r24, 0x0A	; 10
    1836:	0e 94 a1 13 	call	0x2742	; 0x2742 <transmitByte>
           buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    183a:	f8 01       	movw	r30, r16
    183c:	ee 5e       	subi	r30, 0xEE	; 238
    183e:	fd 4f       	sbci	r31, 0xFD	; 253
    1840:	8a e0       	ldi	r24, 0x0A	; 10
    1842:	80 83       	st	Z, r24
		   fileSize++;
    1844:	80 91 00 02 	lds	r24, 0x0200
    1848:	90 91 01 02 	lds	r25, 0x0201
    184c:	a0 91 02 02 	lds	r26, 0x0202
    1850:	b0 91 03 02 	lds	r27, 0x0203
    1854:	01 96       	adiw	r24, 0x01	; 1
    1856:	a1 1d       	adc	r26, r1
    1858:	b1 1d       	adc	r27, r1
    185a:	80 93 00 02 	sts	0x0200, r24
    185e:	90 93 01 02 	sts	0x0201, r25
    1862:	a0 93 02 02 	sts	0x0202, r26
    1866:	b0 93 03 02 	sts	0x0203, r27
        if(i == 512)
		   sectorEndFlag = 1;  //flag to indicate that the appended '\n' char should be put in the next sector
	    else
		{ 
		   transmitByte ('\n');
           buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    186a:	0f 5f       	subi	r16, 0xFF	; 255
    186c:	1f 4f       	sbci	r17, 0xFF	; 255
		   fileSize++;
	    }
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
    186e:	01 15       	cp	r16, r1
    1870:	b2 e0       	ldi	r27, 0x02	; 2
    1872:	1b 07       	cpc	r17, r27
    1874:	68 f1       	brcs	.+90     	; 0x18d0 <writeFile+0x3ba>
    1876:	1b 2d       	mov	r17, r11
    1878:	01 c0       	rjmp	.+2      	; 0x187c <writeFile+0x366>
     buffer[i++] = data;
	 fileSize++;
     if(data == '\r')  //'Carriege Return (CR)' character
     {
        if(i == 512)
		   sectorEndFlag = 1;  //flag to indicate that the appended '\n' char should be put in the next sector
    187a:	19 81       	ldd	r17, Y+1	; 0x01
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
	   error = SD_writeSingleBlock (startBlock);
    187c:	60 91 0e 02 	lds	r22, 0x020E
    1880:	70 91 0f 02 	lds	r23, 0x020F
    1884:	80 91 10 02 	lds	r24, 0x0210
    1888:	90 91 11 02 	lds	r25, 0x0211
    188c:	0e 94 2e 13 	call	0x265c	; 0x265c <SD_writeSingleBlock>
       j++;
    1890:	43 94       	inc	r4
	   if(j == sectorPerCluster) {j = 0; break;}
    1892:	80 91 12 04 	lds	r24, 0x0412
    1896:	90 91 13 04 	lds	r25, 0x0413
    189a:	24 2d       	mov	r18, r4
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	28 17       	cp	r18, r24
    18a0:	39 07       	cpc	r19, r25
    18a2:	e1 f0       	breq	.+56     	; 0x18dc <writeFile+0x3c6>
	   startBlock++; 
    18a4:	80 91 0e 02 	lds	r24, 0x020E
    18a8:	90 91 0f 02 	lds	r25, 0x020F
    18ac:	a0 91 10 02 	lds	r26, 0x0210
    18b0:	b0 91 11 02 	lds	r27, 0x0211
    18b4:	01 96       	adiw	r24, 0x01	; 1
    18b6:	a1 1d       	adc	r26, r1
    18b8:	b1 1d       	adc	r27, r1
    18ba:	80 93 0e 02 	sts	0x020E, r24
    18be:	90 93 0f 02 	sts	0x020F, r25
    18c2:	a0 93 10 02 	sts	0x0210, r26
    18c6:	b0 93 11 02 	sts	0x0211, r27
	    }
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
    18ca:	29 2c       	mov	r2, r9
    18cc:	3a 2c       	mov	r3, r10
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <writeFile+0x3be>
    18d0:	18 01       	movw	r2, r16
    18d2:	1b 2d       	mov	r17, r11
	   error = SD_writeSingleBlock (startBlock);
       j++;
	   if(j == sectorPerCluster) {j = 0; break;}
	   startBlock++; 
     }
	}while (data != '~');
    18d4:	ee e7       	ldi	r30, 0x7E	; 126
    18d6:	5e 12       	cpse	r5, r30
    18d8:	3f cf       	rjmp	.-386    	; 0x1758 <writeFile+0x242>
    18da:	05 c0       	rjmp	.+10     	; 0x18e6 <writeFile+0x3d0>
    18dc:	61 2e       	mov	r6, r17

   if(data == '~') 
    18de:	fe e7       	ldi	r31, 0x7E	; 126
    18e0:	5f 12       	cpse	r5, r31
    18e2:	3a c0       	rjmp	.+116    	; 0x1958 <writeFile+0x442>
    18e4:	c2 c1       	rjmp	.+900    	; 0x1c6a <writeFile+0x754>
   {
      fileSize--;	//to remove the last entered '~' character
    18e6:	80 91 00 02 	lds	r24, 0x0200
    18ea:	90 91 01 02 	lds	r25, 0x0201
    18ee:	a0 91 02 02 	lds	r26, 0x0202
    18f2:	b0 91 03 02 	lds	r27, 0x0203
    18f6:	01 97       	sbiw	r24, 0x01	; 1
    18f8:	a1 09       	sbc	r26, r1
    18fa:	b1 09       	sbc	r27, r1
    18fc:	80 93 00 02 	sts	0x0200, r24
    1900:	90 93 01 02 	sts	0x0201, r25
    1904:	a0 93 02 02 	sts	0x0202, r26
    1908:	b0 93 03 02 	sts	0x0203, r27
	  i--;
    190c:	91 01       	movw	r18, r2
    190e:	21 50       	subi	r18, 0x01	; 1
    1910:	31 09       	sbc	r19, r1
	  for(;i<512;i++)  //fill the rest of the buffer with 0x00
    1912:	21 15       	cp	r18, r1
    1914:	42 e0       	ldi	r20, 0x02	; 2
    1916:	34 07       	cpc	r19, r20
    1918:	50 f4       	brcc	.+20     	; 0x192e <writeFile+0x418>
        buffer[i]= 0x00;
    191a:	f9 01       	movw	r30, r18
    191c:	ee 5e       	subi	r30, 0xEE	; 238
    191e:	fd 4f       	sbci	r31, 0xFD	; 253
    1920:	10 82       	st	Z, r1

   if(data == '~') 
   {
      fileSize--;	//to remove the last entered '~' character
	  i--;
	  for(;i<512;i++)  //fill the rest of the buffer with 0x00
    1922:	2f 5f       	subi	r18, 0xFF	; 255
    1924:	3f 4f       	sbci	r19, 0xFF	; 255
    1926:	21 15       	cp	r18, r1
    1928:	52 e0       	ldi	r21, 0x02	; 2
    192a:	35 07       	cpc	r19, r21
    192c:	b1 f7       	brne	.-20     	; 0x191a <writeFile+0x404>
        buffer[i]= 0x00;
   	  error = SD_writeSingleBlock (startBlock);
    192e:	60 91 0e 02 	lds	r22, 0x020E
    1932:	70 91 0f 02 	lds	r23, 0x020F
    1936:	80 91 10 02 	lds	r24, 0x0210
    193a:	90 91 11 02 	lds	r25, 0x0211
    193e:	0e 94 2e 13 	call	0x265c	; 0x265c <SD_writeSingleBlock>

   getSetNextCluster(prevCluster, SET, cluster);
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
}        

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry
    1942:	a7 01       	movw	r20, r14
    1944:	96 01       	movw	r18, r12
    1946:	61 e0       	ldi	r22, 0x01	; 1
    1948:	82 e0       	ldi	r24, 0x02	; 2
    194a:	0e 94 df 02 	call	0x5be	; 0x5be <getSetFreeCluster>

if(appendFile)  //executes this loop if file is to be appended
    194e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1950:	88 20       	and	r8, r8
    1952:	09 f4       	brne	.+2      	; 0x1956 <writeFile+0x440>
    1954:	6b c0       	rjmp	.+214    	; 0x1a2c <writeFile+0x516>
    1956:	28 c0       	rjmp	.+80     	; 0x19a8 <writeFile+0x492>
      break;
   } 
	  
   prevCluster = cluster;

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    1958:	c7 01       	movw	r24, r14
    195a:	b6 01       	movw	r22, r12
    195c:	0e 94 cf 04 	call	0x99e	; 0x99e <searchNextFreeCluster>
    1960:	1b 01       	movw	r2, r22
    1962:	2c 01       	movw	r4, r24

   if(cluster == 0)
    1964:	61 15       	cp	r22, r1
    1966:	71 05       	cpc	r23, r1
    1968:	81 05       	cpc	r24, r1
    196a:	91 05       	cpc	r25, r1
    196c:	49 f4       	brne	.+18     	; 0x1980 <writeFile+0x46a>
   {
      printf("\n");
    196e:	8a e0       	ldi	r24, 0x0A	; 10
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
      transmitString_F(PSTR(" No free cluster!"));
    1976:	87 ee       	ldi	r24, 0xE7	; 231
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
	  return;
    197e:	89 c1       	rjmp	.+786    	; 0x1c92 <writeFile+0x77c>
   }

   getSetNextCluster(prevCluster, SET, cluster);
    1980:	8b 01       	movw	r16, r22
    1982:	9c 01       	movw	r18, r24
    1984:	48 2d       	mov	r20, r8
    1986:	c7 01       	movw	r24, r14
    1988:	b6 01       	movw	r22, r12
    198a:	0e 94 66 02 	call	0x4cc	; 0x4cc <getSetNextCluster>
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    198e:	0f ef       	ldi	r16, 0xFF	; 255
    1990:	1f ef       	ldi	r17, 0xFF	; 255
    1992:	2f ef       	ldi	r18, 0xFF	; 255
    1994:	3f e0       	ldi	r19, 0x0F	; 15
    1996:	48 2d       	mov	r20, r8
    1998:	c2 01       	movw	r24, r4
    199a:	b1 01       	movw	r22, r2
    199c:	0e 94 66 02 	call	0x4cc	; 0x4cc <getSetNextCluster>
    19a0:	87 2d       	mov	r24, r7
      break;
   } 
	  
   prevCluster = cluster;

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    19a2:	72 01       	movw	r14, r4
    19a4:	61 01       	movw	r12, r2
	  return;
   }

   getSetNextCluster(prevCluster, SET, cluster);
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
}        
    19a6:	8d ce       	rjmp	.-742    	; 0x16c2 <writeFile+0x1ac>

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry

if(appendFile)  //executes this loop if file is to be appended
{
  SD_readSingleBlock (appendFileSector);    
    19a8:	60 91 25 04 	lds	r22, 0x0425
    19ac:	70 91 26 04 	lds	r23, 0x0426
    19b0:	80 91 27 04 	lds	r24, 0x0427
    19b4:	90 91 28 04 	lds	r25, 0x0428
    19b8:	0e 94 ff 12 	call	0x25fe	; 0x25fe <SD_readSingleBlock>
  dir = (struct dir_Structure *) &buffer[appendFileLocation]; 
    19bc:	e0 91 f8 01 	lds	r30, 0x01F8
    19c0:	f0 91 f9 01 	lds	r31, 0x01F9
    19c4:	ee 5e       	subi	r30, 0xEE	; 238
    19c6:	fd 4f       	sbci	r31, 0xFD	; 253
  extraMemory = fileSize - dir->fileSize;
    19c8:	80 91 00 02 	lds	r24, 0x0200
    19cc:	90 91 01 02 	lds	r25, 0x0201
    19d0:	a0 91 02 02 	lds	r26, 0x0202
    19d4:	b0 91 03 02 	lds	r27, 0x0203
    19d8:	44 8d       	ldd	r20, Z+28	; 0x1c
    19da:	55 8d       	ldd	r21, Z+29	; 0x1d
    19dc:	66 8d       	ldd	r22, Z+30	; 0x1e
    19de:	77 8d       	ldd	r23, Z+31	; 0x1f
    19e0:	6c 01       	movw	r12, r24
    19e2:	7d 01       	movw	r14, r26
    19e4:	c4 1a       	sub	r12, r20
    19e6:	d5 0a       	sbc	r13, r21
    19e8:	e6 0a       	sbc	r14, r22
    19ea:	f7 0a       	sbc	r15, r23
  dir->fileSize = fileSize;
    19ec:	84 8f       	std	Z+28, r24	; 0x1c
    19ee:	95 8f       	std	Z+29, r25	; 0x1d
    19f0:	a6 8f       	std	Z+30, r26	; 0x1e
    19f2:	b7 8f       	std	Z+31, r27	; 0x1f
  SD_writeSingleBlock (appendFileSector);
    19f4:	60 91 25 04 	lds	r22, 0x0425
    19f8:	70 91 26 04 	lds	r23, 0x0426
    19fc:	80 91 27 04 	lds	r24, 0x0427
    1a00:	90 91 28 04 	lds	r25, 0x0428
    1a04:	0e 94 2e 13 	call	0x265c	; 0x265c <SD_writeSingleBlock>
  freeMemoryUpdate (REMOVE, extraMemory); //updating free memory count in FSinfo sector;
    1a08:	b7 01       	movw	r22, r14
    1a0a:	a6 01       	movw	r20, r12
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	0e 94 0c 07 	call	0xe18	; 0xe18 <freeMemoryUpdate>

  
  printf("\n");
    1a12:	8a e0       	ldi	r24, 0x0A	; 10
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
  transmitString_F(PSTR(" File appended!"));
    1a1a:	87 ed       	ldi	r24, 0xD7	; 215
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
  printf("\n");
    1a22:	8a e0       	ldi	r24, 0x0A	; 10
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
  return;
    1a2a:	33 c1       	rjmp	.+614    	; 0x1c92 <writeFile+0x77c>
}

//executes following portion when new file is created

prevCluster = rootCluster; //root cluster
    1a2c:	80 90 0a 02 	lds	r8, 0x020A
    1a30:	90 90 0b 02 	lds	r9, 0x020B
    1a34:	a0 90 0c 02 	lds	r10, 0x020C
    1a38:	b0 90 0d 02 	lds	r11, 0x020D
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector;
    1a3c:	31 2c       	mov	r3, r1
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
		  dir->NTreserved = 0;			//always set to 0
		  dir->timeTenth = 0;			//always set to 0
		  dir->createTime = 0x9684;		//fixed time of creation
    1a3e:	0f 2e       	mov	r0, r31
    1a40:	f4 e8       	ldi	r31, 0x84	; 132
    1a42:	4f 2e       	mov	r4, r31
    1a44:	f6 e9       	ldi	r31, 0x96	; 150
    1a46:	5f 2e       	mov	r5, r31
    1a48:	f0 2d       	mov	r31, r0
		  dir->createDate = 0x3a37;		//fixed date of creation
    1a4a:	0f 2e       	mov	r0, r31
    1a4c:	f7 e3       	ldi	r31, 0x37	; 55
    1a4e:	6f 2e       	mov	r6, r31
    1a50:	fa e3       	ldi	r31, 0x3A	; 58
    1a52:	7f 2e       	mov	r7, r31
    1a54:	f0 2d       	mov	r31, r0
    1a56:	1f 81       	ldd	r17, Y+7	; 0x07
    1a58:	2b 84       	ldd	r2, Y+11	; 0x0b
    1a5a:	39 82       	std	Y+1, r3	; 0x01
    1a5c:	8a 82       	std	Y+2, r8	; 0x02
    1a5e:	9b 82       	std	Y+3, r9	; 0x03
    1a60:	ac 82       	std	Y+4, r10	; 0x04
    1a62:	bd 82       	std	Y+5, r11	; 0x05
    1a64:	af 84       	ldd	r10, Y+15	; 0x0f
    1a66:	b8 88       	ldd	r11, Y+16	; 0x10
    1a68:	91 2e       	mov	r9, r17
    1a6a:	82 2c       	mov	r8, r2
    1a6c:	2d 84       	ldd	r2, Y+13	; 0x0d
    1a6e:	3e 84       	ldd	r3, Y+14	; 0x0e

prevCluster = rootCluster; //root cluster

while(1)
{
   firstSector = getFirstSector (prevCluster);
    1a70:	6a 81       	ldd	r22, Y+2	; 0x02
    1a72:	7b 81       	ldd	r23, Y+3	; 0x03
    1a74:	8c 81       	ldd	r24, Y+4	; 0x04
    1a76:	9d 81       	ldd	r25, Y+5	; 0x05
    1a78:	0e 94 45 02 	call	0x48a	; 0x48a <getFirstSector>
    1a7c:	6f 83       	std	Y+7, r22	; 0x07
    1a7e:	78 87       	std	Y+8, r23	; 0x08
    1a80:	89 87       	std	Y+9, r24	; 0x09
    1a82:	9a 87       	std	Y+10, r25	; 0x0a

   for(sector = 0; sector < sectorPerCluster; sector++)
    1a84:	80 91 12 04 	lds	r24, 0x0412
    1a88:	90 91 13 04 	lds	r25, 0x0413
    1a8c:	89 2b       	or	r24, r25
    1a8e:	09 f4       	brne	.+2      	; 0x1a92 <writeFile+0x57c>
    1a90:	98 c0       	rjmp	.+304    	; 0x1bc2 <writeFile+0x6ac>
    1a92:	1e 82       	std	Y+6, r1	; 0x06

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    1a94:	00 e2       	ldi	r16, 0x20	; 32
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    1a96:	1b e0       	ldi	r17, 0x0B	; 11
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
    1a98:	cf 80       	ldd	r12, Y+7	; 0x07
    1a9a:	d8 84       	ldd	r13, Y+8	; 0x08
    1a9c:	e9 84       	ldd	r14, Y+9	; 0x09
    1a9e:	fa 84       	ldd	r15, Y+10	; 0x0a
    1aa0:	2e 81       	ldd	r18, Y+6	; 0x06
    1aa2:	c2 0e       	add	r12, r18
    1aa4:	d1 1c       	adc	r13, r1
    1aa6:	e1 1c       	adc	r14, r1
    1aa8:	f1 1c       	adc	r15, r1
    1aaa:	c7 01       	movw	r24, r14
    1aac:	b6 01       	movw	r22, r12
    1aae:	0e 94 ff 12 	call	0x25fe	; 0x25fe <SD_readSingleBlock>
	

     for(i=0; i<bytesPerSector; i+=32)
    1ab2:	80 91 04 02 	lds	r24, 0x0204
    1ab6:	90 91 05 02 	lds	r25, 0x0205
    1aba:	89 2b       	or	r24, r25
    1abc:	09 f4       	brne	.+2      	; 0x1ac0 <writeFile+0x5aa>
    1abe:	71 c0       	rjmp	.+226    	; 0x1ba2 <writeFile+0x68c>
     {
	    dir = (struct dir_Structure *) &buffer[i];

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
    1ac0:	39 81       	ldd	r19, Y+1	; 0x01
    1ac2:	33 23       	and	r19, r19
    1ac4:	69 f0       	breq	.+26     	; 0x1ae0 <writeFile+0x5ca>
    1ac6:	07 c0       	rjmp	.+14     	; 0x1ad6 <writeFile+0x5c0>
    1ac8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1acc:	8e 5e       	subi	r24, 0xEE	; 238
    1ace:	9d 4f       	sbci	r25, 0xFD	; 253
    1ad0:	22 23       	and	r18, r18
    1ad2:	51 f0       	breq	.+20     	; 0x1ae8 <writeFile+0x5d2>
    1ad4:	02 c0       	rjmp	.+4      	; 0x1ada <writeFile+0x5c4>
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &buffer[i];
    1ad6:	82 e1       	ldi	r24, 0x12	; 18
    1ad8:	92 e0       	ldi	r25, 0x02	; 2

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
		 { 					  //indicating end of the directory file list
		   dir->name[0] = 0x00;
    1ada:	dc 01       	movw	r26, r24
    1adc:	1c 92       	st	X, r1
           return;
    1ade:	d9 c0       	rjmp	.+434    	; 0x1c92 <writeFile+0x77c>
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &buffer[i];
    1ae0:	82 e1       	ldi	r24, 0x12	; 18
    1ae2:	92 e0       	ldi	r25, 0x02	; 2
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    1ae4:	1d 86       	std	Y+13, r1	; 0x0d
    1ae6:	1e 86       	std	Y+14, r1	; 0x0e
		 { 					  //indicating end of the directory file list
		   dir->name[0] = 0x00;
           return;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    1ae8:	dc 01       	movw	r26, r24
    1aea:	2c 91       	ld	r18, X
    1aec:	22 23       	and	r18, r18
    1aee:	19 f0       	breq	.+6      	; 0x1af6 <writeFile+0x5e0>
    1af0:	25 3e       	cpi	r18, 0xE5	; 229
    1af2:	09 f0       	breq	.+2      	; 0x1af6 <writeFile+0x5e0>
    1af4:	47 c0       	rjmp	.+142    	; 0x1b84 <writeFile+0x66e>
    1af6:	e9 2d       	mov	r30, r9
    1af8:	f8 2d       	mov	r31, r8
    1afa:	dc 01       	movw	r26, r24
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    1afc:	21 2f       	mov	r18, r17
    1afe:	4d 85       	ldd	r20, Y+13	; 0x0d
    1b00:	5e 85       	ldd	r21, Y+14	; 0x0e
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
    1b02:	31 91       	ld	r19, Z+
    1b04:	3d 93       	st	X+, r19
    1b06:	21 50       	subi	r18, 0x01	; 1
           return;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
    1b08:	e1 f7       	brne	.-8      	; 0x1b02 <writeFile+0x5ec>
    1b0a:	5e 87       	std	Y+14, r21	; 0x0e
    1b0c:	4d 87       	std	Y+13, r20	; 0x0d
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    1b0e:	fc 01       	movw	r30, r24
    1b10:	03 87       	std	Z+11, r16	; 0x0b
		  dir->NTreserved = 0;			//always set to 0
    1b12:	14 86       	std	Z+12, r1	; 0x0c
		  dir->timeTenth = 0;			//always set to 0
    1b14:	15 86       	std	Z+13, r1	; 0x0d
		  dir->createTime = 0x9684;		//fixed time of creation
    1b16:	57 86       	std	Z+15, r5	; 0x0f
    1b18:	46 86       	std	Z+14, r4	; 0x0e
		  dir->createDate = 0x3a37;		//fixed date of creation
    1b1a:	71 8a       	std	Z+17, r7	; 0x11
    1b1c:	60 8a       	std	Z+16, r6	; 0x10
		  dir->lastAccessDate = 0x3a37;	//fixed date of last access
    1b1e:	73 8a       	std	Z+19, r7	; 0x13
    1b20:	62 8a       	std	Z+18, r6	; 0x12
		  dir->writeTime = 0x9684;		//fixed time of last write
    1b22:	57 8a       	std	Z+23, r5	; 0x17
    1b24:	46 8a       	std	Z+22, r4	; 0x16
		  dir->writeDate = 0x3a37;		//fixed date of last write
    1b26:	71 8e       	std	Z+25, r7	; 0x19
    1b28:	60 8e       	std	Z+24, r6	; 0x18
		  dir->firstClusterHI = firstClusterHigh;
    1b2a:	35 8a       	std	Z+21, r3	; 0x15
    1b2c:	24 8a       	std	Z+20, r2	; 0x14
		  dir->firstClusterLO = firstClusterLow;
    1b2e:	b3 8e       	std	Z+27, r11	; 0x1b
    1b30:	a2 8e       	std	Z+26, r10	; 0x1a
		  dir->fileSize = fileSize;
    1b32:	40 91 00 02 	lds	r20, 0x0200
    1b36:	50 91 01 02 	lds	r21, 0x0201
    1b3a:	60 91 02 02 	lds	r22, 0x0202
    1b3e:	70 91 03 02 	lds	r23, 0x0203
    1b42:	44 8f       	std	Z+28, r20	; 0x1c
    1b44:	55 8f       	std	Z+29, r21	; 0x1d
    1b46:	66 8f       	std	Z+30, r22	; 0x1e
    1b48:	77 8f       	std	Z+31, r23	; 0x1f

		  SD_writeSingleBlock (firstSector + sector);
    1b4a:	c7 01       	movw	r24, r14
    1b4c:	b6 01       	movw	r22, r12
    1b4e:	0e 94 2e 13 	call	0x265c	; 0x265c <SD_writeSingleBlock>
		  fileCreatedFlag = 1;

		  printf("\n");
    1b52:	8a e0       	ldi	r24, 0x0A	; 10
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
		  printf("\n");
    1b5a:	8a e0       	ldi	r24, 0x0A	; 10
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
		  transmitString_F(PSTR(" File Created!"));
    1b62:	88 ec       	ldi	r24, 0xC8	; 200
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>

		  freeMemoryUpdate (REMOVE, fileSize); //updating free memory count in FSinfo sector
    1b6a:	40 91 00 02 	lds	r20, 0x0200
    1b6e:	50 91 01 02 	lds	r21, 0x0201
    1b72:	60 91 02 02 	lds	r22, 0x0202
    1b76:	70 91 03 02 	lds	r23, 0x0203
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	0e 94 0c 07 	call	0xe18	; 0xe18 <freeMemoryUpdate>
		  dir->firstClusterHI = firstClusterHigh;
		  dir->firstClusterLO = firstClusterLow;
		  dir->fileSize = fileSize;

		  SD_writeSingleBlock (firstSector + sector);
		  fileCreatedFlag = 1;
    1b80:	21 e0       	ldi	r18, 0x01	; 1
    1b82:	01 c0       	rjmp	.+2      	; 0x1b86 <writeFile+0x670>
    1b84:	29 81       	ldd	r18, Y+1	; 0x01
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    1b86:	ed 85       	ldd	r30, Y+13	; 0x0d
    1b88:	fe 85       	ldd	r31, Y+14	; 0x0e
    1b8a:	b0 96       	adiw	r30, 0x20	; 32
    1b8c:	fe 87       	std	Y+14, r31	; 0x0e
    1b8e:	ed 87       	std	Y+13, r30	; 0x0d
    1b90:	80 91 04 02 	lds	r24, 0x0204
    1b94:	90 91 05 02 	lds	r25, 0x0205
    1b98:	e8 17       	cp	r30, r24
    1b9a:	f9 07       	cpc	r31, r25
    1b9c:	08 f4       	brcc	.+2      	; 0x1ba0 <writeFile+0x68a>
    1b9e:	94 cf       	rjmp	.-216    	; 0x1ac8 <writeFile+0x5b2>
    1ba0:	01 c0       	rjmp	.+2      	; 0x1ba4 <writeFile+0x68e>
    1ba2:	29 81       	ldd	r18, Y+1	; 0x01

while(1)
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    1ba4:	fe 81       	ldd	r31, Y+6	; 0x06
    1ba6:	ff 5f       	subi	r31, 0xFF	; 255
    1ba8:	fe 83       	std	Y+6, r31	; 0x06
    1baa:	80 91 12 04 	lds	r24, 0x0412
    1bae:	90 91 13 04 	lds	r25, 0x0413
    1bb2:	4f 2f       	mov	r20, r31
    1bb4:	50 e0       	ldi	r21, 0x00	; 0
    1bb6:	48 17       	cp	r20, r24
    1bb8:	59 07       	cpc	r21, r25
    1bba:	10 f4       	brcc	.+4      	; 0x1bc0 <writeFile+0x6aa>
    1bbc:	29 83       	std	Y+1, r18	; 0x01
    1bbe:	6c cf       	rjmp	.-296    	; 0x1a98 <writeFile+0x582>
    1bc0:	29 83       	std	Y+1, r18	; 0x01
	     
        }
     }
   }

   cluster = getSetNextCluster (prevCluster, GET, 0);
    1bc2:	00 e0       	ldi	r16, 0x00	; 0
    1bc4:	10 e0       	ldi	r17, 0x00	; 0
    1bc6:	98 01       	movw	r18, r16
    1bc8:	40 e0       	ldi	r20, 0x00	; 0
    1bca:	6a 81       	ldd	r22, Y+2	; 0x02
    1bcc:	7b 81       	ldd	r23, Y+3	; 0x03
    1bce:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd0:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd2:	0e 94 66 02 	call	0x4cc	; 0x4cc <getSetNextCluster>

   if(cluster > 0x0ffffff6)
    1bd6:	67 3f       	cpi	r22, 0xF7	; 247
    1bd8:	2f ef       	ldi	r18, 0xFF	; 255
    1bda:	72 07       	cpc	r23, r18
    1bdc:	82 07       	cpc	r24, r18
    1bde:	2f e0       	ldi	r18, 0x0F	; 15
    1be0:	92 07       	cpc	r25, r18
    1be2:	78 f1       	brcs	.+94     	; 0x1c42 <writeFile+0x72c>
   {
      if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
    1be4:	6f 3f       	cpi	r22, 0xFF	; 255
    1be6:	7f 4f       	sbci	r23, 0xFF	; 255
    1be8:	8f 4f       	sbci	r24, 0xFF	; 255
    1bea:	9f 40       	sbci	r25, 0x0F	; 15
    1bec:	29 f5       	brne	.+74     	; 0x1c38 <writeFile+0x722>
	  {  
		cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
    1bee:	6a 81       	ldd	r22, Y+2	; 0x02
    1bf0:	7b 81       	ldd	r23, Y+3	; 0x03
    1bf2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf4:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf6:	0e 94 cf 04 	call	0x99e	; 0x99e <searchNextFreeCluster>
    1bfa:	e6 2e       	mov	r14, r22
    1bfc:	f7 2e       	mov	r15, r23
    1bfe:	c8 2e       	mov	r12, r24
    1c00:	d9 2e       	mov	r13, r25
		getSetNextCluster(prevCluster, SET, cluster); //link the new cluster of root to the previous cluster
    1c02:	06 2f       	mov	r16, r22
    1c04:	17 2f       	mov	r17, r23
    1c06:	28 2f       	mov	r18, r24
    1c08:	39 2f       	mov	r19, r25
    1c0a:	41 e0       	ldi	r20, 0x01	; 1
    1c0c:	6a 81       	ldd	r22, Y+2	; 0x02
    1c0e:	7b 81       	ldd	r23, Y+3	; 0x03
    1c10:	8c 81       	ldd	r24, Y+4	; 0x04
    1c12:	9d 81       	ldd	r25, Y+5	; 0x05
    1c14:	0e 94 66 02 	call	0x4cc	; 0x4cc <getSetNextCluster>
		getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
    1c18:	0f ef       	ldi	r16, 0xFF	; 255
    1c1a:	1f ef       	ldi	r17, 0xFF	; 255
    1c1c:	2f ef       	ldi	r18, 0xFF	; 255
    1c1e:	3f e0       	ldi	r19, 0x0F	; 15
    1c20:	41 e0       	ldi	r20, 0x01	; 1
    1c22:	6e 2d       	mov	r22, r14
    1c24:	7f 2d       	mov	r23, r15
    1c26:	8c 2d       	mov	r24, r12
    1c28:	9d 2d       	mov	r25, r13
    1c2a:	0e 94 66 02 	call	0x4cc	; 0x4cc <getSetNextCluster>

   if(cluster > 0x0ffffff6)
   {
      if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
	  {  
		cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
    1c2e:	ea 82       	std	Y+2, r14	; 0x02
    1c30:	fb 82       	std	Y+3, r15	; 0x03
    1c32:	cc 82       	std	Y+4, r12	; 0x04
    1c34:	dd 82       	std	Y+5, r13	; 0x05
    1c36:	09 c0       	rjmp	.+18     	; 0x1c4a <writeFile+0x734>
		getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
      } 

      else
      {	
	    transmitString_F(PSTR("End of Cluster Chain")); 
    1c38:	83 eb       	ldi	r24, 0xB3	; 179
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
	    return;
    1c40:	28 c0       	rjmp	.+80     	; 0x1c92 <writeFile+0x77c>
	     
        }
     }
   }

   cluster = getSetNextCluster (prevCluster, GET, 0);
    1c42:	6a 83       	std	Y+2, r22	; 0x02
    1c44:	7b 83       	std	Y+3, r23	; 0x03
    1c46:	8c 83       	std	Y+4, r24	; 0x04
    1c48:	9d 83       	std	Y+5, r25	; 0x05
      {	
	    transmitString_F(PSTR("End of Cluster Chain")); 
	    return;
      }
   }
   if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return;}
    1c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c4e:	ac 81       	ldd	r26, Y+4	; 0x04
    1c50:	bd 81       	ldd	r27, Y+5	; 0x05
    1c52:	89 2b       	or	r24, r25
    1c54:	8a 2b       	or	r24, r26
    1c56:	8b 2b       	or	r24, r27
    1c58:	09 f0       	breq	.+2      	; 0x1c5c <writeFile+0x746>
    1c5a:	0a cf       	rjmp	.-492    	; 0x1a70 <writeFile+0x55a>
    1c5c:	8a e9       	ldi	r24, 0x9A	; 154
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
    1c64:	16 c0       	rjmp	.+44     	; 0x1c92 <writeFile+0x77c>
   }
   else
   {
      startBlock = getFirstSector (cluster);
	  i=0;
	  j=0;
    1c66:	1b 2d       	mov	r17, r11
    1c68:	77 cd       	rjmp	.-1298   	; 0x1758 <writeFile+0x242>
     }
	}while (data != '~');

   if(data == '~') 
   {
      fileSize--;	//to remove the last entered '~' character
    1c6a:	80 91 00 02 	lds	r24, 0x0200
    1c6e:	90 91 01 02 	lds	r25, 0x0201
    1c72:	a0 91 02 02 	lds	r26, 0x0202
    1c76:	b0 91 03 02 	lds	r27, 0x0203
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	a1 09       	sbc	r26, r1
    1c7e:	b1 09       	sbc	r27, r1
    1c80:	80 93 00 02 	sts	0x0200, r24
    1c84:	90 93 01 02 	sts	0x0201, r25
    1c88:	a0 93 02 02 	sts	0x0202, r26
    1c8c:	b0 93 03 02 	sts	0x0203, r27
    1c90:	4e ce       	rjmp	.-868    	; 0x192e <writeFile+0x418>
   
   prevCluster = cluster;
 }
 
 return;
}
    1c92:	60 96       	adiw	r28, 0x10	; 16
    1c94:	0f b6       	in	r0, 0x3f	; 63
    1c96:	f8 94       	cli
    1c98:	de bf       	out	0x3e, r29	; 62
    1c9a:	0f be       	out	0x3f, r0	; 63
    1c9c:	cd bf       	out	0x3d, r28	; 61
    1c9e:	df 91       	pop	r29
    1ca0:	cf 91       	pop	r28
    1ca2:	1f 91       	pop	r17
    1ca4:	0f 91       	pop	r16
    1ca6:	ff 90       	pop	r15
    1ca8:	ef 90       	pop	r14
    1caa:	df 90       	pop	r13
    1cac:	cf 90       	pop	r12
    1cae:	bf 90       	pop	r11
    1cb0:	af 90       	pop	r10
    1cb2:	9f 90       	pop	r9
    1cb4:	8f 90       	pop	r8
    1cb6:	7f 90       	pop	r7
    1cb8:	6f 90       	pop	r6
    1cba:	5f 90       	pop	r5
    1cbc:	4f 90       	pop	r4
    1cbe:	3f 90       	pop	r3
    1cc0:	2f 90       	pop	r2
    1cc2:	08 95       	ret

00001cc4 <UARTPutChar>:

// the following function sends a single character out of the serial port
static int UARTPutChar(char ch, FILE *stream)
{

    while ( (UCSR0A & (1 << UDRE0)) == 0 )		// wait until there is room in the transmit buffer
    1cc4:	e0 ec       	ldi	r30, 0xC0	; 192
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	90 81       	ld	r25, Z
    1cca:	95 ff       	sbrs	r25, 5
    1ccc:	fd cf       	rjmp	.-6      	; 0x1cc8 <UARTPutChar+0x4>
	{
	}

    UDR0 = ch;									// load the character into the UART data register
    1cce:	80 93 c6 00 	sts	0x00C6, r24

    return 0;
}
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	08 95       	ret

00001cd8 <UARTGetChar>:
// the following function waits for a serial character to be received
static int UARTGetChar(FILE *stream)
{
   unsigned char ch;   							// create a variable to hold the received value
   
   while ( (UCSR0A & (1<<RXC0)) == 0 )			// wait until the received character flag is set
    1cd8:	e0 ec       	ldi	r30, 0xC0	; 192
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	88 23       	and	r24, r24
    1ce0:	ec f7       	brge	.-6      	; 0x1cdc <UARTGetChar+0x4>
   {
   }
   
   ch=UDR0;  									// load the received character into the local variable
    1ce2:	80 91 c6 00 	lds	r24, 0x00C6


   return ch;									// return the value
}
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	08 95       	ret

00001cea <InitUART>:


void InitUART(void)
{

	UCSR0A = 0x00;			
    1cea:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x18;			// enable UART TX and RX
    1cee:	88 e1       	ldi	r24, 0x18	; 24
    1cf0:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = 0x06;			// set the UART for N, 8, 1
    1cf4:	86 e0       	ldi	r24, 0x06	; 6
    1cf6:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0L = 8;				// set BAUD Rate for 115200 with 16MHz clock
    1cfa:	88 e0       	ldi	r24, 0x08	; 8
    1cfc:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0;
    1d00:	10 92 c5 00 	sts	0x00C5, r1

	stdout = &mystdout;		// define the output stream
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	91 e0       	ldi	r25, 0x01	; 1
    1d08:	90 93 2c 04 	sts	0x042C, r25
    1d0c:	80 93 2b 04 	sts	0x042B, r24
	stdin = &mystdout;		// define the input stream	
    1d10:	90 93 2a 04 	sts	0x042A, r25
    1d14:	80 93 29 04 	sts	0x0429, r24
    1d18:	08 95       	ret

00001d1a <port_init>:
void port_init(void)
{
    //PORTA = 0x00;		//no port A on this device, leave commented out for now
    //DDRA  = 0x00;

    PORTB = 0xEF;
    1d1a:	8f ee       	ldi	r24, 0xEF	; 239
    1d1c:	85 b9       	out	0x05, r24	; 5
    DDRB  = 0xBF;       //MISO line i/p, rest o/p
    1d1e:	8f eb       	ldi	r24, 0xBF	; 191
    1d20:	84 b9       	out	0x04, r24	; 4

    PORTC = 0x00;
    1d22:	18 b8       	out	0x08, r1	; 8
    DDRC  = 0x00;
    1d24:	17 b8       	out	0x07, r1	; 7

    PORTD = 0x00;
    1d26:	1b b8       	out	0x0b, r1	; 11
    PORTD |= (1<<5);    //output high on CS pin
    1d28:	5d 9a       	sbi	0x0b, 5	; 11
    DDRD  = 0xFE;
    1d2a:	8e ef       	ldi	r24, 0xFE	; 254
    1d2c:	8a b9       	out	0x0a, r24	; 10
    1d2e:	08 95       	ret

00001d30 <init_devices>:


//call this routine to initialize all peripherals
void init_devices(void)
{
	cli();  //all interrupts disabled
    1d30:	f8 94       	cli
	port_init();
    1d32:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <port_init>
	spi_init();
    1d36:	0e 94 78 13 	call	0x26f0	; 0x26f0 <spi_init>
	uart0_init();
    1d3a:	0e 94 8b 13 	call	0x2716	; 0x2716 <uart0_init>
    1d3e:	08 95       	ret

00001d40 <main>:
	//all peripherals are now initialized
}

//*************************** MAIN *******************************//
int main(void)
{
    1d40:	cf 93       	push	r28
    1d42:	df 93       	push	r29
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
    1d48:	2d 97       	sbiw	r28, 0x0d	; 13
    1d4a:	0f b6       	in	r0, 0x3f	; 63
    1d4c:	f8 94       	cli
    1d4e:	de bf       	out	0x3e, r29	; 62
    1d50:	0f be       	out	0x3f, r0	; 63
    1d52:	cd bf       	out	0x3d, r28	; 61
	InitUART();
    1d54:	0e 94 75 0e 	call	0x1cea	; 0x1cea <InitUART>
	
	printf("\nI'm about to init some variables...");
    1d58:	82 e2       	ldi	r24, 0x22	; 34
    1d5a:	91 e0       	ldi	r25, 0x01	; 1
    1d5c:	9f 93       	push	r25
    1d5e:	8f 93       	push	r24
    1d60:	0e 94 1e 14 	call	0x283c	; 0x283c <printf>
	unsigned char option, error, data, FAT32_active;
	unsigned int i;
	unsigned char fileName[13];
	printf("init done.");
    1d64:	87 e4       	ldi	r24, 0x47	; 71
    1d66:	91 e0       	ldi	r25, 0x01	; 1
    1d68:	9f 93       	push	r25
    1d6a:	8f 93       	push	r24
    1d6c:	0e 94 1e 14 	call	0x283c	; 0x283c <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1d70:	2f ef       	ldi	r18, 0xFF	; 255
    1d72:	31 ee       	ldi	r19, 0xE1	; 225
    1d74:	84 e0       	ldi	r24, 0x04	; 4
    1d76:	21 50       	subi	r18, 0x01	; 1
    1d78:	30 40       	sbci	r19, 0x00	; 0
    1d7a:	80 40       	sbci	r24, 0x00	; 0
    1d7c:	e1 f7       	brne	.-8      	; 0x1d76 <main+0x36>
    1d7e:	00 c0       	rjmp	.+0      	; 0x1d80 <main+0x40>
    1d80:	00 00       	nop

	_delay_ms(100);  //delay for VCC stabilization
	
	
	printf("\nTime to init some devices...");
    1d82:	82 e5       	ldi	r24, 0x52	; 82
    1d84:	91 e0       	ldi	r25, 0x01	; 1
    1d86:	9f 93       	push	r25
    1d88:	8f 93       	push	r24
    1d8a:	0e 94 1e 14 	call	0x283c	; 0x283c <printf>
	init_devices();
    1d8e:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <init_devices>
	printf("done.");
    1d92:	8c e4       	ldi	r24, 0x4C	; 76
    1d94:	91 e0       	ldi	r25, 0x01	; 1
    1d96:	9f 93       	push	r25
    1d98:	8f 93       	push	r24
    1d9a:	0e 94 1e 14 	call	0x283c	; 0x283c <printf>

	//PORTD |= 0x04; //switching ON the LED (for testing purpose only)
	printf("\n");
    1d9e:	8a e0       	ldi	r24, 0x0A	; 10
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
	printf("\n");
    1da6:	8a e0       	ldi	r24, 0x0A	; 10
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
	//transmitString_F (PSTR("*********************************************"));
	printf("*********************************************");
    1dae:	00 e7       	ldi	r16, 0x70	; 112
    1db0:	11 e0       	ldi	r17, 0x01	; 1
    1db2:	1f 93       	push	r17
    1db4:	0f 93       	push	r16
    1db6:	0e 94 1e 14 	call	0x283c	; 0x283c <printf>
	printf("\n");
    1dba:	8a e0       	ldi	r24, 0x0A	; 10
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
	//transmitString_F (PSTR("    Dharmani's microSD Card Testing..  "));
	printf("            microSD Card Testing..  ");
    1dc2:	8e e9       	ldi	r24, 0x9E	; 158
    1dc4:	91 e0       	ldi	r25, 0x01	; 1
    1dc6:	9f 93       	push	r25
    1dc8:	8f 93       	push	r24
    1dca:	0e 94 1e 14 	call	0x283c	; 0x283c <printf>
	printf("\n");
    1dce:	8a e0       	ldi	r24, 0x0A	; 10
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
	//transmitString_F (PSTR("*********************************************"));
	printf("*********************************************");
    1dd6:	1f 93       	push	r17
    1dd8:	0f 93       	push	r16
    1dda:	0e 94 1e 14 	call	0x283c	; 0x283c <printf>
	printf("\n");
    1dde:	8a e0       	ldi	r24, 0x0A	; 10
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>

	cardType = 0;
    1de6:	10 92 23 04 	sts	0x0423, r1
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	f8 94       	cli
    1dee:	de bf       	out	0x3e, r29	; 62
    1df0:	0f be       	out	0x3f, r0	; 63
    1df2:	cd bf       	out	0x3d, r28	; 61
    1df4:	0a e0       	ldi	r16, 0x0A	; 10
    1df6:	10 e0       	ldi	r17, 0x00	; 0

	for (i=0; i<10; i++)
	{
	  error = SD_init();
    1df8:	0e 94 2a 12 	call	0x2454	; 0x2454 <SD_init>
	  if(!error) break;
    1dfc:	88 23       	and	r24, r24
    1dfe:	09 f4       	brne	.+2      	; 0x1e02 <main+0xc2>
    1e00:	aa c2       	rjmp	.+1364   	; 0x2356 <main+0x616>
    1e02:	01 50       	subi	r16, 0x01	; 1
    1e04:	11 09       	sbc	r17, r1
	printf("*********************************************");
	printf("\n");

	cardType = 0;

	for (i=0; i<10; i++)
    1e06:	01 15       	cp	r16, r1
    1e08:	11 05       	cpc	r17, r1
    1e0a:	b1 f7       	brne	.-20     	; 0x1df8 <main+0xb8>
    1e0c:	b0 c2       	rjmp	.+1376   	; 0x236e <main+0x62e>
	  if(!error) break;
	}

	if(error)
	{
	  if(error == 1) printf("SD card not detected..");
    1e0e:	83 ec       	ldi	r24, 0xC3	; 195
    1e10:	91 e0       	ldi	r25, 0x01	; 1
    1e12:	9f 93       	push	r25
    1e14:	8f 93       	push	r24
    1e16:	0e 94 1e 14 	call	0x283c	; 0x283c <printf>
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	02 c0       	rjmp	.+4      	; 0x1e24 <main+0xe4>
	  if(error == 2) printf("Card Initialization failed..");
    1e20:	82 30       	cpi	r24, 0x02	; 2
    1e22:	09 f0       	breq	.+2      	; 0x1e26 <main+0xe6>
    1e24:	09 c0       	rjmp	.+18     	; 0x1e38 <main+0xf8>
    1e26:	8a ed       	ldi	r24, 0xDA	; 218
    1e28:	91 e0       	ldi	r25, 0x01	; 1
    1e2a:	9f 93       	push	r25
    1e2c:	8f 93       	push	r24
    1e2e:	0e 94 1e 14 	call	0x283c	; 0x283c <printf>
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	f6 cf       	rjmp	.-20     	; 0x1e24 <main+0xe4>
    1e38:	ff cf       	rjmp	.-2      	; 0x1e38 <main+0xf8>
	  while(1);  //wait here forever if error in SD init 
	}

	switch (cardType)
	{
	  case 1:transmitString_F(PSTR("Standard Capacity Card (Ver 1.x) Detected!"));
    1e3a:	81 e2       	ldi	r24, 0x21	; 33
    1e3c:	94 e0       	ldi	r25, 0x04	; 4
    1e3e:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
  			 break;
    1e42:	0e c0       	rjmp	.+28     	; 0x1e60 <main+0x120>
	  case 2:transmitString_F(PSTR("High Capacity Card Detected!"));
    1e44:	84 e0       	ldi	r24, 0x04	; 4
    1e46:	94 e0       	ldi	r25, 0x04	; 4
    1e48:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
  			 break;
    1e4c:	09 c0       	rjmp	.+18     	; 0x1e60 <main+0x120>
	  case 3:transmitString_F(PSTR("Standard Capacity Card (Ver 2.x) Detected!"));
    1e4e:	89 ed       	ldi	r24, 0xD9	; 217
    1e50:	93 e0       	ldi	r25, 0x03	; 3
    1e52:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
  			 break;
    1e56:	04 c0       	rjmp	.+8      	; 0x1e60 <main+0x120>
	  default:transmitString_F(PSTR("Unknown SD Card Detected!"));
    1e58:	8f eb       	ldi	r24, 0xBF	; 191
    1e5a:	93 e0       	ldi	r25, 0x03	; 3
    1e5c:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
  			 break; 
	}


	SPI_HIGH_SPEED;	//SCK - 8 MHz
    1e60:	80 e5       	ldi	r24, 0x50	; 80
    1e62:	8c bd       	out	0x2c, r24	; 44
    1e64:	8d b5       	in	r24, 0x2d	; 45
    1e66:	81 60       	ori	r24, 0x01	; 1
    1e68:	8d bd       	out	0x2d, r24	; 45
    1e6a:	8f e9       	ldi	r24, 0x9F	; 159
    1e6c:	9f e0       	ldi	r25, 0x0F	; 15
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	f1 f7       	brne	.-4      	; 0x1e6e <main+0x12e>
    1e72:	00 c0       	rjmp	.+0      	; 0x1e74 <main+0x134>
    1e74:	00 00       	nop
	_delay_ms(1);   //some delay


	FAT32_active = 1;
	error = getBootSectorData (); //read boot sector and keep necessary data in global variables
    1e76:	0e 94 72 03 	call	0x6e4	; 0x6e4 <getBootSectorData>
	if(error) 	
    1e7a:	88 23       	and	r24, r24
    1e7c:	51 f0       	breq	.+20     	; 0x1e92 <main+0x152>
	{
	  printf("\n");
    1e7e:	8a e0       	ldi	r24, 0x0A	; 10
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
	  transmitString_F (PSTR("FAT32 not found!"));  //FAT32 incompatible drive
    1e86:	8e ea       	ldi	r24, 0xAE	; 174
    1e88:	93 e0       	ldi	r25, 0x03	; 3
    1e8a:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
	  FAT32_active = 0;
    1e8e:	71 2c       	mov	r7, r1
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <main+0x156>

	SPI_HIGH_SPEED;	//SCK - 8 MHz
	_delay_ms(1);   //some delay


	FAT32_active = 1;
    1e92:	77 24       	eor	r7, r7
    1e94:	73 94       	inc	r7
	data = receiveByte(); transmitByte(data);
	startBlock += (data & 0x0f);
	printf("\n");
	}

	totalBlocks = 1;
    1e96:	c1 2c       	mov	r12, r1
    1e98:	d1 2c       	mov	r13, r1
    1e9a:	76 01       	movw	r14, r12
    1e9c:	c3 94       	inc	r12
    1e9e:	5e 01       	movw	r10, r28
    1ea0:	9e e0       	ldi	r25, 0x0E	; 14
    1ea2:	a9 0e       	add	r10, r25
    1ea4:	b1 1c       	adc	r11, r1
	case '6': 
	case '7': 
	case '8': printf("\n");
			  printf("\n");
			  transmitString_F(PSTR("Enter file name: "));
			  for(i=0; i<13; i++)
    1ea6:	61 2c       	mov	r6, r1
	  FAT32_active = 0;
	}

	while(1)
	{
	printf("\n");
    1ea8:	8a e0       	ldi	r24, 0x0A	; 10
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
	transmitString_F(PSTR("Press any key..."));
    1eb0:	8d e9       	ldi	r24, 0x9D	; 157
    1eb2:	93 e0       	ldi	r25, 0x03	; 3
    1eb4:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
	printf("\n");
    1eb8:	8a e0       	ldi	r24, 0x0A	; 10
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
	option = receiveByte();
    1ec0:	0e 94 99 13 	call	0x2732	; 0x2732 <receiveByte>
	printf("\n");
    1ec4:	8a e0       	ldi	r24, 0x0A	; 10
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
	transmitString_F(PSTR("> 0 : Erase Blocks"));
    1ecc:	8a e8       	ldi	r24, 0x8A	; 138
    1ece:	93 e0       	ldi	r25, 0x03	; 3
    1ed0:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
	printf("\n");
    1ed4:	8a e0       	ldi	r24, 0x0A	; 10
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
	transmitString_F(PSTR("> 1 : Write single Block"));
    1edc:	81 e7       	ldi	r24, 0x71	; 113
    1ede:	93 e0       	ldi	r25, 0x03	; 3
    1ee0:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
	printf("\n");
    1ee4:	8a e0       	ldi	r24, 0x0A	; 10
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
	transmitString_F(PSTR("> 2 : Read single Block"));
    1eec:	89 e5       	ldi	r24, 0x59	; 89
    1eee:	93 e0       	ldi	r25, 0x03	; 3
    1ef0:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
	printf("\n");
	transmitString_F(PSTR("> 4 : Read multiple Blocks"));
	#endif


	printf("\n");
    1ef4:	8a e0       	ldi	r24, 0x0A	; 10
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
	transmitString_F(PSTR("> 5 : Get file list"));
    1efc:	85 e4       	ldi	r24, 0x45	; 69
    1efe:	93 e0       	ldi	r25, 0x03	; 3
    1f00:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
	printf("\n");
    1f04:	8a e0       	ldi	r24, 0x0A	; 10
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
	transmitString_F(PSTR("> 6 : Read File"));
    1f0c:	85 e3       	ldi	r24, 0x35	; 53
    1f0e:	93 e0       	ldi	r25, 0x03	; 3
    1f10:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
	printf("\n");
    1f14:	8a e0       	ldi	r24, 0x0A	; 10
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
	transmitString_F(PSTR("> 7 : Write File"));
    1f1c:	84 e2       	ldi	r24, 0x24	; 36
    1f1e:	93 e0       	ldi	r25, 0x03	; 3
    1f20:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
	printf("\n");
    1f24:	8a e0       	ldi	r24, 0x0A	; 10
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
	transmitString_F(PSTR("> 8 : Delete File"));
    1f2c:	82 e1       	ldi	r24, 0x12	; 18
    1f2e:	93 e0       	ldi	r25, 0x03	; 3
    1f30:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
	printf("\n");
    1f34:	8a e0       	ldi	r24, 0x0A	; 10
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
	transmitString_F(PSTR("> 9 : Read SD Memory Capacity (Total/Free)"));
    1f3c:	87 ee       	ldi	r24, 0xE7	; 231
    1f3e:	92 e0       	ldi	r25, 0x02	; 2
    1f40:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>

	printf("\n");
    1f44:	8a e0       	ldi	r24, 0x0A	; 10
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
	printf("\n");
    1f4c:	8a e0       	ldi	r24, 0x0A	; 10
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
	transmitString_F(PSTR("> Select Option (0-9): "));
    1f54:	8f ec       	ldi	r24, 0xCF	; 207
    1f56:	92 e0       	ldi	r25, 0x02	; 2
    1f58:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>

	/*WARNING: If option 0, 1 or 3 is selected, the card may not be detected by PC/Laptop again,
	as it disturbs the FAT format, and you may have to format it again with FAT32.
	This options are given for learning the raw data transfer to & from the SD Card*/

	option = receiveByte();
    1f5c:	0e 94 99 13 	call	0x2732	; 0x2732 <receiveByte>
    1f60:	88 2e       	mov	r8, r24
	transmitByte(option);
    1f62:	0e 94 a1 13 	call	0x2742	; 0x2742 <transmitByte>

	if(option >=0x35 && option <=0x39)  //options 5 to 9 disabled if FAT32 not found
    1f66:	8b ec       	ldi	r24, 0xCB	; 203
    1f68:	88 0d       	add	r24, r8
    1f6a:	85 30       	cpi	r24, 0x05	; 5
    1f6c:	78 f4       	brcc	.+30     	; 0x1f8c <main+0x24c>
	{
	  if(!FAT32_active) 
    1f6e:	71 10       	cpse	r7, r1
    1f70:	0d c0       	rjmp	.+26     	; 0x1f8c <main+0x24c>
	  {
		printf("\n");
    1f72:	8a e0       	ldi	r24, 0x0A	; 10
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
		printf("\n");
    1f7a:	8a e0       	ldi	r24, 0x0A	; 10
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
		transmitString_F(PSTR("FAT32 options disabled!"));
    1f82:	87 eb       	ldi	r24, 0xB7	; 183
    1f84:	92 e0       	ldi	r25, 0x02	; 2
    1f86:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
		continue;
    1f8a:	8e cf       	rjmp	.-228    	; 0x1ea8 <main+0x168>
	  } 
	}


	if((option >= 0x30) && (option <=0x34)) //get starting block address for options 0 to 4
    1f8c:	80 ed       	ldi	r24, 0xD0	; 208
    1f8e:	88 0d       	add	r24, r8
    1f90:	85 30       	cpi	r24, 0x05	; 5
    1f92:	08 f0       	brcs	.+2      	; 0x1f96 <main+0x256>
    1f94:	92 c0       	rjmp	.+292    	; 0x20ba <main+0x37a>
	{
	printf("\n");
    1f96:	8a e0       	ldi	r24, 0x0A	; 10
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
	printf("\n");
    1f9e:	8a e0       	ldi	r24, 0x0A	; 10
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
	transmitString_F(PSTR("Enter the Block number (0000-9999):"));
    1fa6:	83 e9       	ldi	r24, 0x93	; 147
    1fa8:	92 e0       	ldi	r25, 0x02	; 2
    1faa:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
	data = receiveByte(); transmitByte(data);
    1fae:	0e 94 99 13 	call	0x2732	; 0x2732 <receiveByte>
    1fb2:	18 2f       	mov	r17, r24
    1fb4:	0e 94 a1 13 	call	0x2742	; 0x2742 <transmitByte>
	startBlock = (data & 0x0f) * 1000;
    1fb8:	1f 70       	andi	r17, 0x0F	; 15
    1fba:	e8 ee       	ldi	r30, 0xE8	; 232
    1fbc:	f3 e0       	ldi	r31, 0x03	; 3
    1fbe:	1e 9f       	mul	r17, r30
    1fc0:	c0 01       	movw	r24, r0
    1fc2:	1f 9f       	mul	r17, r31
    1fc4:	90 0d       	add	r25, r0
    1fc6:	11 24       	eor	r1, r1
    1fc8:	aa 27       	eor	r26, r26
    1fca:	97 fd       	sbrc	r25, 7
    1fcc:	a0 95       	com	r26
    1fce:	ba 2f       	mov	r27, r26
    1fd0:	80 93 0e 02 	sts	0x020E, r24
    1fd4:	90 93 0f 02 	sts	0x020F, r25
    1fd8:	a0 93 10 02 	sts	0x0210, r26
    1fdc:	b0 93 11 02 	sts	0x0211, r27
	data = receiveByte(); transmitByte(data);
    1fe0:	0e 94 99 13 	call	0x2732	; 0x2732 <receiveByte>
    1fe4:	18 2f       	mov	r17, r24
    1fe6:	0e 94 a1 13 	call	0x2742	; 0x2742 <transmitByte>
	startBlock += (data & 0x0f) * 100;
    1fea:	40 91 0e 02 	lds	r20, 0x020E
    1fee:	50 91 0f 02 	lds	r21, 0x020F
    1ff2:	60 91 10 02 	lds	r22, 0x0210
    1ff6:	70 91 11 02 	lds	r23, 0x0211
    1ffa:	1f 70       	andi	r17, 0x0F	; 15
    1ffc:	f4 e6       	ldi	r31, 0x64	; 100
    1ffe:	f1 9f       	mul	r31, r17
    2000:	c0 01       	movw	r24, r0
    2002:	11 24       	eor	r1, r1
    2004:	aa 27       	eor	r26, r26
    2006:	97 fd       	sbrc	r25, 7
    2008:	a0 95       	com	r26
    200a:	ba 2f       	mov	r27, r26
    200c:	84 0f       	add	r24, r20
    200e:	95 1f       	adc	r25, r21
    2010:	a6 1f       	adc	r26, r22
    2012:	b7 1f       	adc	r27, r23
    2014:	80 93 0e 02 	sts	0x020E, r24
    2018:	90 93 0f 02 	sts	0x020F, r25
    201c:	a0 93 10 02 	sts	0x0210, r26
    2020:	b0 93 11 02 	sts	0x0211, r27
	data = receiveByte(); transmitByte(data);
    2024:	0e 94 99 13 	call	0x2732	; 0x2732 <receiveByte>
    2028:	18 2f       	mov	r17, r24
    202a:	0e 94 a1 13 	call	0x2742	; 0x2742 <transmitByte>
	startBlock += (data & 0x0f) * 10;
    202e:	20 90 0e 02 	lds	r2, 0x020E
    2032:	30 90 0f 02 	lds	r3, 0x020F
    2036:	40 90 10 02 	lds	r4, 0x0210
    203a:	50 90 11 02 	lds	r5, 0x0211
    203e:	1f 70       	andi	r17, 0x0F	; 15
    2040:	21 2f       	mov	r18, r17
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	b9 01       	movw	r22, r18
    2046:	66 0f       	add	r22, r22
    2048:	77 1f       	adc	r23, r23
    204a:	a9 01       	movw	r20, r18
    204c:	44 0f       	add	r20, r20
    204e:	55 1f       	adc	r21, r21
    2050:	44 0f       	add	r20, r20
    2052:	55 1f       	adc	r21, r21
    2054:	44 0f       	add	r20, r20
    2056:	55 1f       	adc	r21, r21
    2058:	cb 01       	movw	r24, r22
    205a:	84 0f       	add	r24, r20
    205c:	95 1f       	adc	r25, r21
    205e:	aa 27       	eor	r26, r26
    2060:	97 fd       	sbrc	r25, 7
    2062:	a0 95       	com	r26
    2064:	ba 2f       	mov	r27, r26
    2066:	82 0d       	add	r24, r2
    2068:	93 1d       	adc	r25, r3
    206a:	a4 1d       	adc	r26, r4
    206c:	b5 1d       	adc	r27, r5
    206e:	80 93 0e 02 	sts	0x020E, r24
    2072:	90 93 0f 02 	sts	0x020F, r25
    2076:	a0 93 10 02 	sts	0x0210, r26
    207a:	b0 93 11 02 	sts	0x0211, r27
	data = receiveByte(); transmitByte(data);
    207e:	0e 94 99 13 	call	0x2732	; 0x2732 <receiveByte>
    2082:	18 2f       	mov	r17, r24
    2084:	0e 94 a1 13 	call	0x2742	; 0x2742 <transmitByte>
	startBlock += (data & 0x0f);
    2088:	80 91 0e 02 	lds	r24, 0x020E
    208c:	90 91 0f 02 	lds	r25, 0x020F
    2090:	a0 91 10 02 	lds	r26, 0x0210
    2094:	b0 91 11 02 	lds	r27, 0x0211
    2098:	1f 70       	andi	r17, 0x0F	; 15
    209a:	81 0f       	add	r24, r17
    209c:	91 1d       	adc	r25, r1
    209e:	a1 1d       	adc	r26, r1
    20a0:	b1 1d       	adc	r27, r1
    20a2:	80 93 0e 02 	sts	0x020E, r24
    20a6:	90 93 0f 02 	sts	0x020F, r25
    20aa:	a0 93 10 02 	sts	0x0210, r26
    20ae:	b0 93 11 02 	sts	0x0211, r27
	printf("\n");
    20b2:	8a e0       	ldi	r24, 0x0A	; 10
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
	}

	totalBlocks = 1;
    20ba:	c0 92 19 04 	sts	0x0419, r12
    20be:	d0 92 1a 04 	sts	0x041A, r13
    20c2:	e0 92 1b 04 	sts	0x041B, r14
    20c6:	f0 92 1c 04 	sts	0x041C, r15
	totalBlocks += (data & 0x0f);
	printf("\n");
	}
	#endif

	switch (option)
    20ca:	88 2d       	mov	r24, r8
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	fc 01       	movw	r30, r24
    20d0:	f0 97       	sbiw	r30, 0x30	; 48
    20d2:	ea 30       	cpi	r30, 0x0A	; 10
    20d4:	f1 05       	cpc	r31, r1
    20d6:	08 f0       	brcs	.+2      	; 0x20da <main+0x39a>
    20d8:	29 c1       	rjmp	.+594    	; 0x232c <main+0x5ec>
    20da:	ec 5c       	subi	r30, 0xCC	; 204
    20dc:	ff 4f       	sbci	r31, 0xFF	; 255
    20de:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__tablejump2__>
	{
	case '0': //error = SD_erase (block, totalBlocks);
			  error = SD_erase (startBlock, totalBlocks);
    20e2:	20 91 19 04 	lds	r18, 0x0419
    20e6:	30 91 1a 04 	lds	r19, 0x041A
    20ea:	40 91 1b 04 	lds	r20, 0x041B
    20ee:	50 91 1c 04 	lds	r21, 0x041C
    20f2:	60 91 0e 02 	lds	r22, 0x020E
    20f6:	70 91 0f 02 	lds	r23, 0x020F
    20fa:	80 91 10 02 	lds	r24, 0x0210
    20fe:	90 91 11 02 	lds	r25, 0x0211
    2102:	0e 94 cd 12 	call	0x259a	; 0x259a <SD_erase>
    2106:	18 2f       	mov	r17, r24
			  printf("\n");
    2108:	8a e0       	ldi	r24, 0x0A	; 10
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
			  if(error)
    2110:	11 23       	and	r17, r17
    2112:	29 f0       	breq	.+10     	; 0x211e <main+0x3de>
				  transmitString_F(PSTR("Erase failed.."));
    2114:	84 e8       	ldi	r24, 0x84	; 132
    2116:	92 e0       	ldi	r25, 0x02	; 2
    2118:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
    211c:	17 c1       	rjmp	.+558    	; 0x234c <main+0x60c>
			  else
				  transmitString_F(PSTR("Erased!"));
    211e:	8c e7       	ldi	r24, 0x7C	; 124
    2120:	92 e0       	ldi	r25, 0x02	; 2
    2122:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
    2126:	12 c1       	rjmp	.+548    	; 0x234c <main+0x60c>
			  break;

	case '1': printf("\n");
    2128:	8a e0       	ldi	r24, 0x0A	; 10
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
			  transmitString_F(PSTR(" Enter text (End with ~):"));
    2130:	82 e6       	ldi	r24, 0x62	; 98
    2132:	92 e0       	ldi	r25, 0x02	; 2
    2134:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
			  i=0;
    2138:	06 2d       	mov	r16, r6
    213a:	10 e0       	ldi	r17, 0x00	; 0
    213c:	01 c0       	rjmp	.+2      	; 0x2140 <main+0x400>
					transmitByte(data);
					buffer[i++] = data;
					if(data == 0x0d)
					{
						transmitByte(0x0a);
						buffer[i++] = 0x0a;
    213e:	84 01       	movw	r16, r8
	case '1': printf("\n");
			  transmitString_F(PSTR(" Enter text (End with ~):"));
			  i=0;
				do
				{
					data = receiveByte();
    2140:	0e 94 99 13 	call	0x2732	; 0x2732 <receiveByte>
    2144:	28 2e       	mov	r2, r24
					transmitByte(data);
    2146:	0e 94 a1 13 	call	0x2742	; 0x2742 <transmitByte>
					buffer[i++] = data;
    214a:	48 01       	movw	r8, r16
    214c:	2f ef       	ldi	r18, 0xFF	; 255
    214e:	82 1a       	sub	r8, r18
    2150:	92 0a       	sbc	r9, r18
    2152:	f8 01       	movw	r30, r16
    2154:	ee 5e       	subi	r30, 0xEE	; 238
    2156:	fd 4f       	sbci	r31, 0xFD	; 253
    2158:	20 82       	st	Z, r2
					if(data == 0x0d)
    215a:	3d e0       	ldi	r19, 0x0D	; 13
    215c:	23 12       	cpse	r2, r19
    215e:	10 c0       	rjmp	.+32     	; 0x2180 <main+0x440>
					{
						transmitByte(0x0a);
    2160:	8a e0       	ldi	r24, 0x0A	; 10
    2162:	0e 94 a1 13 	call	0x2742	; 0x2742 <transmitByte>
						buffer[i++] = 0x0a;
    2166:	0e 5f       	subi	r16, 0xFE	; 254
    2168:	1f 4f       	sbci	r17, 0xFF	; 255
    216a:	f4 01       	movw	r30, r8
    216c:	ee 5e       	subi	r30, 0xEE	; 238
    216e:	fd 4f       	sbci	r31, 0xFD	; 253
    2170:	8a e0       	ldi	r24, 0x0A	; 10
    2172:	80 83       	st	Z, r24
					}
					if(i == 512) break;
    2174:	01 15       	cp	r16, r1
    2176:	82 e0       	ldi	r24, 0x02	; 2
    2178:	18 07       	cpc	r17, r24
    217a:	49 f0       	breq	.+18     	; 0x218e <main+0x44e>
					transmitByte(data);
					buffer[i++] = data;
					if(data == 0x0d)
					{
						transmitByte(0x0a);
						buffer[i++] = 0x0a;
    217c:	48 01       	movw	r8, r16
    217e:	df cf       	rjmp	.-66     	; 0x213e <main+0x3fe>
					}
					if(i == 512) break;
    2180:	81 14       	cp	r8, r1
    2182:	92 e0       	ldi	r25, 0x02	; 2
    2184:	99 06       	cpc	r9, r25
    2186:	19 f0       	breq	.+6      	; 0x218e <main+0x44e>
				}while (data != '~');
    2188:	ee e7       	ldi	r30, 0x7E	; 126
    218a:	2e 12       	cpse	r2, r30
    218c:	d8 cf       	rjmp	.-80     	; 0x213e <main+0x3fe>

				error = SD_writeSingleBlock (startBlock);
    218e:	60 91 0e 02 	lds	r22, 0x020E
    2192:	70 91 0f 02 	lds	r23, 0x020F
    2196:	80 91 10 02 	lds	r24, 0x0210
    219a:	90 91 11 02 	lds	r25, 0x0211
    219e:	0e 94 2e 13 	call	0x265c	; 0x265c <SD_writeSingleBlock>
    21a2:	18 2f       	mov	r17, r24
				printf("\n");
    21a4:	8a e0       	ldi	r24, 0x0A	; 10
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
				printf("\n");
    21ac:	8a e0       	ldi	r24, 0x0A	; 10
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
				if(error)
    21b4:	11 23       	and	r17, r17
    21b6:	29 f0       	breq	.+10     	; 0x21c2 <main+0x482>
					transmitString_F(PSTR("Write failed.."));
    21b8:	83 e5       	ldi	r24, 0x53	; 83
    21ba:	92 e0       	ldi	r25, 0x02	; 2
    21bc:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
    21c0:	c5 c0       	rjmp	.+394    	; 0x234c <main+0x60c>
				else
					transmitString_F(PSTR("Write successful!"));
    21c2:	81 e4       	ldi	r24, 0x41	; 65
    21c4:	92 e0       	ldi	r25, 0x02	; 2
    21c6:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
    21ca:	c0 c0       	rjmp	.+384    	; 0x234c <main+0x60c>
				break;

	case '2': error = SD_readSingleBlock (startBlock);
    21cc:	60 91 0e 02 	lds	r22, 0x020E
    21d0:	70 91 0f 02 	lds	r23, 0x020F
    21d4:	80 91 10 02 	lds	r24, 0x0210
    21d8:	90 91 11 02 	lds	r25, 0x0211
    21dc:	0e 94 ff 12 	call	0x25fe	; 0x25fe <SD_readSingleBlock>
    21e0:	18 2f       	mov	r17, r24
			  printf("\n");
    21e2:	8a e0       	ldi	r24, 0x0A	; 10
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
			  if(error)
    21ea:	11 11       	cpse	r17, r1
    21ec:	07 c0       	rjmp	.+14     	; 0x21fc <main+0x4bc>
				transmitString_F(PSTR("Read failed.."));
			  else
			  {
				for(i=0;i<512;i++)
				{
					if(buffer[i] == '~') break;
    21ee:	e2 e1       	ldi	r30, 0x12	; 18
    21f0:	f2 e0       	ldi	r31, 0x02	; 2
    21f2:	80 81       	ld	r24, Z
    21f4:	8e 37       	cpi	r24, 0x7E	; 126
    21f6:	09 f0       	breq	.+2      	; 0x21fa <main+0x4ba>
    21f8:	be c0       	rjmp	.+380    	; 0x2376 <main+0x636>
    21fa:	17 c0       	rjmp	.+46     	; 0x222a <main+0x4ea>
				break;

	case '2': error = SD_readSingleBlock (startBlock);
			  printf("\n");
			  if(error)
				transmitString_F(PSTR("Read failed.."));
    21fc:	83 e3       	ldi	r24, 0x33	; 51
    21fe:	92 e0       	ldi	r25, 0x02	; 2
    2200:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
    2204:	a3 c0       	rjmp	.+326    	; 0x234c <main+0x60c>
			  else
			  {
				for(i=0;i<512;i++)
				{
					if(buffer[i] == '~') break;
    2206:	f8 01       	movw	r30, r16
    2208:	ee 5e       	subi	r30, 0xEE	; 238
    220a:	fd 4f       	sbci	r31, 0xFD	; 253
    220c:	80 81       	ld	r24, Z
    220e:	8e 37       	cpi	r24, 0x7E	; 126
    2210:	61 f0       	breq	.+24     	; 0x222a <main+0x4ea>
					transmitByte(buffer[i]);
    2212:	f8 01       	movw	r30, r16
    2214:	ee 5e       	subi	r30, 0xEE	; 238
    2216:	fd 4f       	sbci	r31, 0xFD	; 253
    2218:	80 81       	ld	r24, Z
    221a:	0e 94 a1 13 	call	0x2742	; 0x2742 <transmitByte>
			  printf("\n");
			  if(error)
				transmitString_F(PSTR("Read failed.."));
			  else
			  {
				for(i=0;i<512;i++)
    221e:	0f 5f       	subi	r16, 0xFF	; 255
    2220:	1f 4f       	sbci	r17, 0xFF	; 255
    2222:	01 15       	cp	r16, r1
    2224:	f2 e0       	ldi	r31, 0x02	; 2
    2226:	1f 07       	cpc	r17, r31
    2228:	71 f7       	brne	.-36     	; 0x2206 <main+0x4c6>
				{
					if(buffer[i] == '~') break;
					transmitByte(buffer[i]);
				}
				printf("\n");
    222a:	8a e0       	ldi	r24, 0x0A	; 10
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
				printf("\n");
    2232:	8a e0       	ldi	r24, 0x0A	; 10
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
				transmitString_F(PSTR("Read successful!"));
    223a:	82 e2       	ldi	r24, 0x22	; 34
    223c:	92 e0       	ldi	r25, 0x02	; 2
    223e:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
    2242:	84 c0       	rjmp	.+264    	; 0x234c <main+0x60c>
			  else
				transmitString_F(PSTR("Read successful!"));
			  break;
	#endif

	case '5': printf("\n");
    2244:	8a e0       	ldi	r24, 0x0A	; 10
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
  			  findFiles(GET_LIST,0);
    224c:	66 2d       	mov	r22, r6
    224e:	70 e0       	ldi	r23, 0x00	; 0
    2250:	80 e0       	ldi	r24, 0x00	; 0
    2252:	0e 94 7f 07 	call	0xefe	; 0xefe <findFiles>
			  break;
    2256:	7a c0       	rjmp	.+244    	; 0x234c <main+0x60c>

	case '6': 
	case '7': 
	case '8': printf("\n");
    2258:	8a e0       	ldi	r24, 0x0A	; 10
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
			  printf("\n");
    2260:	8a e0       	ldi	r24, 0x0A	; 10
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
			  transmitString_F(PSTR("Enter file name: "));
    2268:	80 e1       	ldi	r24, 0x10	; 16
    226a:	92 e0       	ldi	r25, 0x02	; 2
    226c:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
    2270:	fe 01       	movw	r30, r28
    2272:	31 96       	adiw	r30, 0x01	; 1
			  for(i=0; i<13; i++)
				fileName[i] = 0x00;   //clearing any previously stored file name
    2274:	11 92       	st	Z+, r1
	case '6': 
	case '7': 
	case '8': printf("\n");
			  printf("\n");
			  transmitString_F(PSTR("Enter file name: "));
			  for(i=0; i<13; i++)
    2276:	ea 15       	cp	r30, r10
    2278:	fb 05       	cpc	r31, r11
    227a:	e1 f7       	brne	.-8      	; 0x2274 <main+0x534>
    227c:	46 2c       	mov	r4, r6
    227e:	51 2c       	mov	r5, r1
    2280:	01 c0       	rjmp	.+2      	; 0x2284 <main+0x544>
	   				} 
	   				continue;     
	 			}
				if(data <0x20 || data > 0x7e) continue;  //check for valid English text character
				transmitByte(data);
				fileName[i++] = data;
    2282:	2c 01       	movw	r4, r24
			  for(i=0; i<13; i++)
				fileName[i] = 0x00;   //clearing any previously stored file name
			  i=0;
			  while(1)
			  {
				data = receiveByte();
    2284:	0e 94 99 13 	call	0x2732	; 0x2732 <receiveByte>
    2288:	18 2f       	mov	r17, r24
				if(data == 0x0d) break;  //'ENTER' key pressed
    228a:	8d 30       	cpi	r24, 0x0D	; 13
    228c:	51 f1       	breq	.+84     	; 0x22e2 <main+0x5a2>
				if(data == 0x08)	//'Back Space' key pressed
    228e:	88 30       	cpi	r24, 0x08	; 8
    2290:	81 f4       	brne	.+32     	; 0x22b2 <main+0x572>
	 			{ 
	   				if(i != 0)
    2292:	41 14       	cp	r4, r1
    2294:	51 04       	cpc	r5, r1
    2296:	b1 f3       	breq	.-20     	; 0x2284 <main+0x544>
	   				{ 
	     				transmitByte(data);
    2298:	88 e0       	ldi	r24, 0x08	; 8
    229a:	0e 94 a1 13 	call	0x2742	; 0x2742 <transmitByte>
						transmitByte(' '); 
    229e:	80 e2       	ldi	r24, 0x20	; 32
    22a0:	0e 94 a1 13 	call	0x2742	; 0x2742 <transmitByte>
	     				transmitByte(data); 
    22a4:	88 e0       	ldi	r24, 0x08	; 8
    22a6:	0e 94 a1 13 	call	0x2742	; 0x2742 <transmitByte>
	     				i--; 
    22aa:	21 e0       	ldi	r18, 0x01	; 1
    22ac:	42 1a       	sub	r4, r18
    22ae:	51 08       	sbc	r5, r1
    22b0:	e9 cf       	rjmp	.-46     	; 0x2284 <main+0x544>
	   				} 
	   				continue;     
	 			}
				if(data <0x20 || data > 0x7e) continue;  //check for valid English text character
    22b2:	80 ee       	ldi	r24, 0xE0	; 224
    22b4:	81 0f       	add	r24, r17
    22b6:	8f 35       	cpi	r24, 0x5F	; 95
    22b8:	28 f7       	brcc	.-54     	; 0x2284 <main+0x544>
				transmitByte(data);
    22ba:	81 2f       	mov	r24, r17
    22bc:	0e 94 a1 13 	call	0x2742	; 0x2742 <transmitByte>
				fileName[i++] = data;
    22c0:	c2 01       	movw	r24, r4
    22c2:	01 96       	adiw	r24, 0x01	; 1
    22c4:	e1 e0       	ldi	r30, 0x01	; 1
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	ec 0f       	add	r30, r28
    22ca:	fd 1f       	adc	r31, r29
    22cc:	e4 0d       	add	r30, r4
    22ce:	f5 1d       	adc	r31, r5
    22d0:	10 83       	st	Z, r17
				if(i==13){transmitString_F(PSTR(" file name too long..")); break;}
    22d2:	8d 30       	cpi	r24, 0x0D	; 13
    22d4:	91 05       	cpc	r25, r1
    22d6:	a9 f6       	brne	.-86     	; 0x2282 <main+0x542>
    22d8:	8a ef       	ldi	r24, 0xFA	; 250
    22da:	91 e0       	ldi	r25, 0x01	; 1
    22dc:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
    22e0:	35 c0       	rjmp	.+106    	; 0x234c <main+0x60c>
			  }
			  if(i>12) break;
    22e2:	3d e0       	ldi	r19, 0x0D	; 13
    22e4:	43 16       	cp	r4, r19
    22e6:	51 04       	cpc	r5, r1
    22e8:	88 f5       	brcc	.+98     	; 0x234c <main+0x60c>
       
			  printf("\n");
    22ea:	8a e0       	ldi	r24, 0x0A	; 10
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
			  if(option == '6')
    22f2:	86 e3       	ldi	r24, 0x36	; 54
    22f4:	88 12       	cpse	r8, r24
    22f6:	07 c0       	rjmp	.+14     	; 0x2306 <main+0x5c6>
				 readFile( READ, fileName);
    22f8:	be 01       	movw	r22, r28
    22fa:	6f 5f       	subi	r22, 0xFF	; 255
    22fc:	7f 4f       	sbci	r23, 0xFF	; 255
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	0e 94 96 09 	call	0x132c	; 0x132c <readFile>
    2304:	23 c0       	rjmp	.+70     	; 0x234c <main+0x60c>
			  if(option == '7')
    2306:	97 e3       	ldi	r25, 0x37	; 55
    2308:	89 12       	cpse	r8, r25
    230a:	05 c0       	rjmp	.+10     	; 0x2316 <main+0x5d6>
		  		 writeFile(fileName);
    230c:	ce 01       	movw	r24, r28
    230e:	01 96       	adiw	r24, 0x01	; 1
    2310:	0e 94 8b 0a 	call	0x1516	; 0x1516 <writeFile>
    2314:	1b c0       	rjmp	.+54     	; 0x234c <main+0x60c>
 			  if(option == '8')
    2316:	e8 e3       	ldi	r30, 0x38	; 56
    2318:	8e 12       	cpse	r8, r30
    231a:	18 c0       	rjmp	.+48     	; 0x234c <main+0x60c>
				 deleteFile(fileName);
    231c:	ce 01       	movw	r24, r28
    231e:	01 96       	adiw	r24, 0x01	; 1
    2320:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <deleteFile>
    2324:	13 c0       	rjmp	.+38     	; 0x234c <main+0x60c>
			  break;

	case '9': memoryStatistics();
    2326:	0e 94 dd 05 	call	0xbba	; 0xbba <memoryStatistics>
			  break;
    232a:	10 c0       	rjmp	.+32     	; 0x234c <main+0x60c>

	default: printf("\n");
    232c:	8a e0       	ldi	r24, 0x0A	; 10
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
			 printf("\n");
    2334:	8a e0       	ldi	r24, 0x0A	; 10
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
			 transmitString_F(PSTR(" Invalid option!"));
    233c:	89 ee       	ldi	r24, 0xE9	; 233
    233e:	91 e0       	ldi	r25, 0x01	; 1
    2340:	0e 94 a9 13 	call	0x2752	; 0x2752 <transmitString_F>
			 printf("\n");
    2344:	8a e0       	ldi	r24, 0x0A	; 10
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
	}

	printf("\n");
    234c:	8a e0       	ldi	r24, 0x0A	; 10
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
    2354:	a9 cd       	rjmp	.-1198   	; 0x1ea8 <main+0x168>
	  if(error == 2) printf("Card Initialization failed..");

	  while(1);  //wait here forever if error in SD init 
	}

	switch (cardType)
    2356:	80 91 23 04 	lds	r24, 0x0423
    235a:	82 30       	cpi	r24, 0x02	; 2
    235c:	09 f4       	brne	.+2      	; 0x2360 <main+0x620>
    235e:	72 cd       	rjmp	.-1308   	; 0x1e44 <main+0x104>
    2360:	83 30       	cpi	r24, 0x03	; 3
    2362:	09 f4       	brne	.+2      	; 0x2366 <main+0x626>
    2364:	74 cd       	rjmp	.-1304   	; 0x1e4e <main+0x10e>
    2366:	81 30       	cpi	r24, 0x01	; 1
    2368:	09 f0       	breq	.+2      	; 0x236c <main+0x62c>
    236a:	76 cd       	rjmp	.-1300   	; 0x1e58 <main+0x118>
    236c:	66 cd       	rjmp	.-1332   	; 0x1e3a <main+0xfa>
	  if(!error) break;
	}

	if(error)
	{
	  if(error == 1) printf("SD card not detected..");
    236e:	81 30       	cpi	r24, 0x01	; 1
    2370:	09 f0       	breq	.+2      	; 0x2374 <main+0x634>
    2372:	56 cd       	rjmp	.-1364   	; 0x1e20 <main+0xe0>
    2374:	4c cd       	rjmp	.-1384   	; 0x1e0e <main+0xce>
			  else
			  {
				for(i=0;i<512;i++)
				{
					if(buffer[i] == '~') break;
					transmitByte(buffer[i]);
    2376:	e2 e1       	ldi	r30, 0x12	; 18
    2378:	f2 e0       	ldi	r31, 0x02	; 2
    237a:	80 81       	ld	r24, Z
    237c:	0e 94 a1 13 	call	0x2742	; 0x2742 <transmitByte>
			  printf("\n");
			  if(error)
				transmitString_F(PSTR("Read failed.."));
			  else
			  {
				for(i=0;i<512;i++)
    2380:	01 e0       	ldi	r16, 0x01	; 1
    2382:	10 e0       	ldi	r17, 0x00	; 0
    2384:	40 cf       	rjmp	.-384    	; 0x2206 <main+0x4c6>

00002386 <SD_sendCommand>:
//Arguments	: unsigned char (8-bit command value)
// 			  & unsigned long (32-bit command argument)
//return	: unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
    2386:	cf 92       	push	r12
    2388:	df 92       	push	r13
    238a:	ef 92       	push	r14
    238c:	ff 92       	push	r15
    238e:	cf 93       	push	r28
    2390:	c8 2f       	mov	r28, r24
    2392:	6a 01       	movw	r12, r20
    2394:	7b 01       	movw	r14, r22
//SD card accepts byte address while SDHC accepts block address in multiples of 512
//so, if it's SD card we need to convert block address into corresponding byte address by 
//multipying it with 512. which is equivalent to shifting it left 9 times
//following 'if' loop does that

if(SDHC_flag == 0)		
    2396:	80 91 18 04 	lds	r24, 0x0418
    239a:	81 11       	cpse	r24, r1
    239c:	15 c0       	rjmp	.+42     	; 0x23c8 <SD_sendCommand+0x42>
if(cmd == READ_SINGLE_BLOCK     ||
    239e:	8f ee       	ldi	r24, 0xEF	; 239
    23a0:	8c 0f       	add	r24, r28
    23a2:	82 30       	cpi	r24, 0x02	; 2
    23a4:	40 f0       	brcs	.+16     	; 0x23b6 <SD_sendCommand+0x30>
   cmd == READ_MULTIPLE_BLOCKS  ||
    23a6:	88 ee       	ldi	r24, 0xE8	; 232
    23a8:	8c 0f       	add	r24, r28
    23aa:	82 30       	cpi	r24, 0x02	; 2
    23ac:	20 f0       	brcs	.+8      	; 0x23b6 <SD_sendCommand+0x30>
   cmd == WRITE_SINGLE_BLOCK    ||
   cmd == WRITE_MULTIPLE_BLOCKS ||
    23ae:	80 ee       	ldi	r24, 0xE0	; 224
    23b0:	8c 0f       	add	r24, r28
    23b2:	82 30       	cpi	r24, 0x02	; 2
    23b4:	48 f4       	brcc	.+18     	; 0x23c8 <SD_sendCommand+0x42>
   cmd == ERASE_BLOCK_START_ADDR|| 
   cmd == ERASE_BLOCK_END_ADDR ) 
   {
     arg = arg << 9;
    23b6:	0b 2e       	mov	r0, r27
    23b8:	b9 e0       	ldi	r27, 0x09	; 9
    23ba:	cc 0c       	add	r12, r12
    23bc:	dd 1c       	adc	r13, r13
    23be:	ee 1c       	adc	r14, r14
    23c0:	ff 1c       	adc	r15, r15
    23c2:	ba 95       	dec	r27
    23c4:	d1 f7       	brne	.-12     	; 0x23ba <SD_sendCommand+0x34>
    23c6:	b0 2d       	mov	r27, r0
   }	   

SD_CS_ASSERT;
    23c8:	5d 98       	cbi	0x0b, 5	; 11

SPI_transmit(cmd | 0x40); //send command, first two bits always '01'
    23ca:	8c 2f       	mov	r24, r28
    23cc:	80 64       	ori	r24, 0x40	; 64
    23ce:	0e 94 7e 13 	call	0x26fc	; 0x26fc <SPI_transmit>
SPI_transmit(arg>>24);
    23d2:	8f 2d       	mov	r24, r15
    23d4:	0e 94 7e 13 	call	0x26fc	; 0x26fc <SPI_transmit>
SPI_transmit(arg>>16);
    23d8:	8e 2d       	mov	r24, r14
    23da:	0e 94 7e 13 	call	0x26fc	; 0x26fc <SPI_transmit>
SPI_transmit(arg>>8);
    23de:	8d 2d       	mov	r24, r13
    23e0:	0e 94 7e 13 	call	0x26fc	; 0x26fc <SPI_transmit>
SPI_transmit(arg);
    23e4:	8c 2d       	mov	r24, r12
    23e6:	0e 94 7e 13 	call	0x26fc	; 0x26fc <SPI_transmit>

if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
    23ea:	c8 30       	cpi	r28, 0x08	; 8
    23ec:	21 f4       	brne	.+8      	; 0x23f6 <SD_sendCommand+0x70>
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
    23ee:	87 e8       	ldi	r24, 0x87	; 135
    23f0:	0e 94 7e 13 	call	0x26fc	; 0x26fc <SPI_transmit>
    23f4:	07 c0       	rjmp	.+14     	; 0x2404 <SD_sendCommand+0x7e>
else 
  SPI_transmit(0x95); 
    23f6:	85 e9       	ldi	r24, 0x95	; 149
    23f8:	0e 94 7e 13 	call	0x26fc	; 0x26fc <SPI_transmit>
    23fc:	03 c0       	rjmp	.+6      	; 0x2404 <SD_sendCommand+0x7e>
    23fe:	fa 94       	dec	r15

while((response = SPI_receive()) == 0xff) //wait response
   if(retry++ > 0xfe) break; //time out error
    2400:	11 f4       	brne	.+4      	; 0x2406 <SD_sendCommand+0x80>
    2402:	1b c0       	rjmp	.+54     	; 0x243a <SD_sendCommand+0xb4>
//Arguments	: unsigned char (8-bit command value)
// 			  & unsigned long (32-bit command argument)
//return	: unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
    2404:	f1 2c       	mov	r15, r1
if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 

while((response = SPI_receive()) == 0xff) //wait response
    2406:	0e 94 84 13 	call	0x2708	; 0x2708 <SPI_receive>
    240a:	8f 3f       	cpi	r24, 0xFF	; 255
    240c:	c1 f3       	breq	.-16     	; 0x23fe <SD_sendCommand+0x78>
    240e:	f8 2e       	mov	r15, r24
   if(retry++ > 0xfe) break; //time out error

if(response == 0x00 && cmd == 58)  //checking response of CMD58
    2410:	81 11       	cpse	r24, r1
    2412:	15 c0       	rjmp	.+42     	; 0x243e <SD_sendCommand+0xb8>
    2414:	ca 33       	cpi	r28, 0x3A	; 58
    2416:	a1 f4       	brne	.+40     	; 0x2440 <SD_sendCommand+0xba>
{
  status = SPI_receive() & 0x40;     //first byte of the OCR register (bit 31:24)
    2418:	0e 94 84 13 	call	0x2708	; 0x2708 <SPI_receive>
  if(status == 0x40) SDHC_flag = 1;  //we need it to verify SDHC card
    241c:	86 ff       	sbrs	r24, 6
    241e:	04 c0       	rjmp	.+8      	; 0x2428 <SD_sendCommand+0xa2>
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	80 93 18 04 	sts	0x0418, r24
    2426:	02 c0       	rjmp	.+4      	; 0x242c <SD_sendCommand+0xa6>
  else SDHC_flag = 0;
    2428:	10 92 18 04 	sts	0x0418, r1

  SPI_receive(); //remaining 3 bytes of the OCR register are ignored here
    242c:	0e 94 84 13 	call	0x2708	; 0x2708 <SPI_receive>
  SPI_receive(); //one can use these bytes to check power supply limits of SD
    2430:	0e 94 84 13 	call	0x2708	; 0x2708 <SPI_receive>
  SPI_receive(); 
    2434:	0e 94 84 13 	call	0x2708	; 0x2708 <SPI_receive>
    2438:	03 c0       	rjmp	.+6      	; 0x2440 <SD_sendCommand+0xba>
if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 

while((response = SPI_receive()) == 0xff) //wait response
    243a:	f8 2e       	mov	r15, r24
    243c:	01 c0       	rjmp	.+2      	; 0x2440 <SD_sendCommand+0xba>
    243e:	f8 2e       	mov	r15, r24
  SPI_receive(); //remaining 3 bytes of the OCR register are ignored here
  SPI_receive(); //one can use these bytes to check power supply limits of SD
  SPI_receive(); 
}

SPI_receive(); //extra 8 CLK
    2440:	0e 94 84 13 	call	0x2708	; 0x2708 <SPI_receive>
SD_CS_DEASSERT;
    2444:	5d 9a       	sbi	0x0b, 5	; 11

return response; //return state
}
    2446:	8f 2d       	mov	r24, r15
    2448:	cf 91       	pop	r28
    244a:	ff 90       	pop	r15
    244c:	ef 90       	pop	r14
    244e:	df 90       	pop	r13
    2450:	cf 90       	pop	r12
    2452:	08 95       	ret

00002454 <SD_init>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_init(void)
{
    2454:	0f 93       	push	r16
    2456:	1f 93       	push	r17
    2458:	cf 93       	push	r28
    245a:	df 93       	push	r29
    245c:	1a e0       	ldi	r17, 0x0A	; 10
unsigned char i, response, SD_version;
unsigned int retry=0 ;

 for(i=0;i<10;i++)
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command
    245e:	8f ef       	ldi	r24, 0xFF	; 255
    2460:	0e 94 7e 13 	call	0x26fc	; 0x26fc <SPI_transmit>
    2464:	11 50       	subi	r17, 0x01	; 1
unsigned char SD_init(void)
{
unsigned char i, response, SD_version;
unsigned int retry=0 ;

 for(i=0;i<10;i++)
    2466:	d9 f7       	brne	.-10     	; 0x245e <SD_init+0xa>
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command

SD_CS_ASSERT;
    2468:	5d 98       	cbi	0x0b, 5	; 11
do
{
  
   response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command
    246a:	40 e0       	ldi	r20, 0x00	; 0
    246c:	50 e0       	ldi	r21, 0x00	; 0
    246e:	ba 01       	movw	r22, r20
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	0e 94 c3 11 	call	0x2386	; 0x2386 <SD_sendCommand>
    2476:	c0 e2       	ldi	r28, 0x20	; 32
    2478:	d0 e0       	ldi	r29, 0x00	; 0
    247a:	0a c0       	rjmp	.+20     	; 0x2490 <SD_init+0x3c>
    247c:	40 e0       	ldi	r20, 0x00	; 0
    247e:	50 e0       	ldi	r21, 0x00	; 0
    2480:	ba 01       	movw	r22, r20
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	0e 94 c3 11 	call	0x2386	; 0x2386 <SD_sendCommand>
    2488:	21 97       	sbiw	r28, 0x01	; 1
   retry++;
   if(retry>0x20) 
    248a:	20 97       	sbiw	r28, 0x00	; 0
    248c:	09 f4       	brne	.+2      	; 0x2490 <SD_init+0x3c>
    248e:	74 c0       	rjmp	.+232    	; 0x2578 <SD_init+0x124>
   	  return 1;   //time out, card not detected
   
} while(response != 0x01);
    2490:	81 30       	cpi	r24, 0x01	; 1
    2492:	a1 f7       	brne	.-24     	; 0x247c <SD_init+0x28>

SD_CS_DEASSERT;
    2494:	5d 9a       	sbi	0x0b, 5	; 11
SPI_transmit (0xff);
    2496:	8f ef       	ldi	r24, 0xFF	; 255
    2498:	0e 94 7e 13 	call	0x26fc	; 0x26fc <SPI_transmit>
SPI_transmit (0xff);
    249c:	8f ef       	ldi	r24, 0xFF	; 255
    249e:	0e 94 7e 13 	call	0x26fc	; 0x26fc <SPI_transmit>

SD_version = 2; //default set to SD compliance with ver2.x; 
				//this may change after checking the next command
do
{
response = SD_sendCommand(SEND_IF_COND,0x000001AA); //Check power supply status, mendatory for SDHC card
    24a2:	4a ea       	ldi	r20, 0xAA	; 170
    24a4:	51 e0       	ldi	r21, 0x01	; 1
    24a6:	60 e0       	ldi	r22, 0x00	; 0
    24a8:	70 e0       	ldi	r23, 0x00	; 0
    24aa:	88 e0       	ldi	r24, 0x08	; 8
    24ac:	0e 94 c3 11 	call	0x2386	; 0x2386 <SD_sendCommand>
    24b0:	ce ef       	ldi	r28, 0xFE	; 254
    24b2:	d0 e0       	ldi	r29, 0x00	; 0
    24b4:	13 c0       	rjmp	.+38     	; 0x24dc <SD_init+0x88>
    24b6:	4a ea       	ldi	r20, 0xAA	; 170
    24b8:	51 e0       	ldi	r21, 0x01	; 1
    24ba:	60 e0       	ldi	r22, 0x00	; 0
    24bc:	70 e0       	ldi	r23, 0x00	; 0
    24be:	88 e0       	ldi	r24, 0x08	; 8
    24c0:	0e 94 c3 11 	call	0x2386	; 0x2386 <SD_sendCommand>
    24c4:	21 97       	sbiw	r28, 0x01	; 1
retry++;
if(retry>0xfe) 
    24c6:	20 97       	sbiw	r28, 0x00	; 0
    24c8:	49 f4       	brne	.+18     	; 0x24dc <SD_init+0x88>
   {
	  printf("\n");
    24ca:	8a e0       	ldi	r24, 0x0A	; 10
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
	  SD_version = 1;
	  cardType = 1;
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	80 93 23 04 	sts	0x0423, r24
response = SD_sendCommand(SEND_IF_COND,0x000001AA); //Check power supply status, mendatory for SDHC card
retry++;
if(retry>0xfe) 
   {
	  printf("\n");
	  SD_version = 1;
    24d8:	01 e0       	ldi	r16, 0x01	; 1
	  cardType = 1;
	  break;
    24da:	03 c0       	rjmp	.+6      	; 0x24e2 <SD_init+0x8e>
   } //time out

}while(response != 0x01);
    24dc:	81 30       	cpi	r24, 0x01	; 1
    24de:	59 f7       	brne	.-42     	; 0x24b6 <SD_init+0x62>
SPI_transmit (0xff);
SPI_transmit (0xff);

retry = 0;

SD_version = 2; //default set to SD compliance with ver2.x; 
    24e0:	02 e0       	ldi	r16, 0x02	; 2

retry = 0;

do
{
response = SD_sendCommand(APP_CMD,0); //CMD55, must be sent before sending any ACMD command
    24e2:	40 e0       	ldi	r20, 0x00	; 0
    24e4:	50 e0       	ldi	r21, 0x00	; 0
    24e6:	ba 01       	movw	r22, r20
    24e8:	87 e3       	ldi	r24, 0x37	; 55
    24ea:	0e 94 c3 11 	call	0x2386	; 0x2386 <SD_sendCommand>
response = SD_sendCommand(SD_SEND_OP_COND,0x40000000); //ACMD41
    24ee:	40 e0       	ldi	r20, 0x00	; 0
    24f0:	50 e0       	ldi	r21, 0x00	; 0
    24f2:	60 e0       	ldi	r22, 0x00	; 0
    24f4:	70 e4       	ldi	r23, 0x40	; 64
    24f6:	89 e2       	ldi	r24, 0x29	; 41
    24f8:	0e 94 c3 11 	call	0x2386	; 0x2386 <SD_sendCommand>
    24fc:	ce ef       	ldi	r28, 0xFE	; 254
    24fe:	d0 e0       	ldi	r29, 0x00	; 0
    2500:	16 c0       	rjmp	.+44     	; 0x252e <SD_init+0xda>

retry = 0;

do
{
response = SD_sendCommand(APP_CMD,0); //CMD55, must be sent before sending any ACMD command
    2502:	40 e0       	ldi	r20, 0x00	; 0
    2504:	50 e0       	ldi	r21, 0x00	; 0
    2506:	ba 01       	movw	r22, r20
    2508:	87 e3       	ldi	r24, 0x37	; 55
    250a:	0e 94 c3 11 	call	0x2386	; 0x2386 <SD_sendCommand>
response = SD_sendCommand(SD_SEND_OP_COND,0x40000000); //ACMD41
    250e:	40 e0       	ldi	r20, 0x00	; 0
    2510:	50 e0       	ldi	r21, 0x00	; 0
    2512:	60 e0       	ldi	r22, 0x00	; 0
    2514:	70 e4       	ldi	r23, 0x40	; 64
    2516:	89 e2       	ldi	r24, 0x29	; 41
    2518:	0e 94 c3 11 	call	0x2386	; 0x2386 <SD_sendCommand>
    251c:	21 97       	sbiw	r28, 0x01	; 1

retry++;
if(retry>0xfe) 
    251e:	20 97       	sbiw	r28, 0x00	; 0
    2520:	31 f4       	brne	.+12     	; 0x252e <SD_init+0xda>
   {
      printf("\n");
    2522:	8a e0       	ldi	r24, 0x0A	; 10
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
	  return 2;  //time out, card initialization failed
    252a:	12 e0       	ldi	r17, 0x02	; 2
    252c:	30 c0       	rjmp	.+96     	; 0x258e <SD_init+0x13a>
   } 

}while(response != 0x00);
    252e:	81 11       	cpse	r24, r1
    2530:	e8 cf       	rjmp	.-48     	; 0x2502 <SD_init+0xae>


retry = 0;
SDHC_flag = 0;
    2532:	10 92 18 04 	sts	0x0418, r1

if (SD_version == 2)
    2536:	02 30       	cpi	r16, 0x02	; 2
    2538:	51 f5       	brne	.+84     	; 0x258e <SD_init+0x13a>
    253a:	20 c0       	rjmp	.+64     	; 0x257c <SD_init+0x128>
{ 
   do
   {
	 response = SD_sendCommand(READ_OCR,0);
    253c:	40 e0       	ldi	r20, 0x00	; 0
    253e:	50 e0       	ldi	r21, 0x00	; 0
    2540:	ba 01       	movw	r22, r20
    2542:	8a e3       	ldi	r24, 0x3A	; 58
    2544:	0e 94 c3 11 	call	0x2386	; 0x2386 <SD_sendCommand>
    2548:	21 97       	sbiw	r28, 0x01	; 1
	 retry++;
	 if(retry>0xfe) 
    254a:	20 97       	sbiw	r28, 0x00	; 0
    254c:	39 f4       	brne	.+14     	; 0x255c <SD_init+0x108>
     {
       printf("\n");
    254e:	8a e0       	ldi	r24, 0x0A	; 10
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	0e 94 32 14 	call	0x2864	; 0x2864 <putchar>
	   cardType = 0;
    2556:	10 92 23 04 	sts	0x0423, r1
	   break;
    255a:	02 c0       	rjmp	.+4      	; 0x2560 <SD_init+0x10c>
     } //time out

   }while(response != 0x00);
    255c:	81 11       	cpse	r24, r1
    255e:	ee cf       	rjmp	.-36     	; 0x253c <SD_init+0xe8>

   if(SDHC_flag == 1) cardType = 2;
    2560:	80 91 18 04 	lds	r24, 0x0418
    2564:	81 30       	cpi	r24, 0x01	; 1
    2566:	21 f4       	brne	.+8      	; 0x2570 <SD_init+0x11c>
    2568:	82 e0       	ldi	r24, 0x02	; 2
    256a:	80 93 23 04 	sts	0x0423, r24
    256e:	0f c0       	rjmp	.+30     	; 0x258e <SD_init+0x13a>
   else cardType = 3;
    2570:	83 e0       	ldi	r24, 0x03	; 3
    2572:	80 93 23 04 	sts	0x0423, r24
    2576:	0b c0       	rjmp	.+22     	; 0x258e <SD_init+0x13a>
{
  
   response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command
   retry++;
   if(retry>0x20) 
   	  return 1;   //time out, card not detected
    2578:	11 e0       	ldi	r17, 0x01	; 1
    257a:	09 c0       	rjmp	.+18     	; 0x258e <SD_init+0x13a>

if (SD_version == 2)
{ 
   do
   {
	 response = SD_sendCommand(READ_OCR,0);
    257c:	40 e0       	ldi	r20, 0x00	; 0
    257e:	50 e0       	ldi	r21, 0x00	; 0
    2580:	ba 01       	movw	r22, r20
    2582:	8a e3       	ldi	r24, 0x3A	; 58
    2584:	0e 94 c3 11 	call	0x2386	; 0x2386 <SD_sendCommand>
    2588:	ce ef       	ldi	r28, 0xFE	; 254
    258a:	d0 e0       	ldi	r29, 0x00	; 0
    258c:	e7 cf       	rjmp	.-50     	; 0x255c <SD_init+0x108>
//SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
//SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512


return 0; //successful return
}
    258e:	81 2f       	mov	r24, r17
    2590:	df 91       	pop	r29
    2592:	cf 91       	pop	r28
    2594:	1f 91       	pop	r17
    2596:	0f 91       	pop	r16
    2598:	08 95       	ret

0000259a <SD_erase>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//*****************************************************************
unsigned char SD_erase (unsigned long startBlock, unsigned long totalBlocks)
{
    259a:	8f 92       	push	r8
    259c:	9f 92       	push	r9
    259e:	af 92       	push	r10
    25a0:	bf 92       	push	r11
    25a2:	cf 92       	push	r12
    25a4:	df 92       	push	r13
    25a6:	ef 92       	push	r14
    25a8:	ff 92       	push	r15
    25aa:	6b 01       	movw	r12, r22
    25ac:	7c 01       	movw	r14, r24
    25ae:	49 01       	movw	r8, r18
    25b0:	5a 01       	movw	r10, r20
unsigned char response;

response = SD_sendCommand(ERASE_BLOCK_START_ADDR, startBlock); //send starting block address
    25b2:	ab 01       	movw	r20, r22
    25b4:	bc 01       	movw	r22, r24
    25b6:	80 e2       	ldi	r24, 0x20	; 32
    25b8:	0e 94 c3 11 	call	0x2386	; 0x2386 <SD_sendCommand>
if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
    25bc:	81 11       	cpse	r24, r1
    25be:	16 c0       	rjmp	.+44     	; 0x25ec <SD_erase+0x52>
  return response;

response = SD_sendCommand(ERASE_BLOCK_END_ADDR,(startBlock + totalBlocks - 1)); //send end block address
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	88 1a       	sub	r8, r24
    25c4:	91 08       	sbc	r9, r1
    25c6:	a1 08       	sbc	r10, r1
    25c8:	b1 08       	sbc	r11, r1
    25ca:	b5 01       	movw	r22, r10
    25cc:	a4 01       	movw	r20, r8
    25ce:	4c 0d       	add	r20, r12
    25d0:	5d 1d       	adc	r21, r13
    25d2:	6e 1d       	adc	r22, r14
    25d4:	7f 1d       	adc	r23, r15
    25d6:	81 e2       	ldi	r24, 0x21	; 33
    25d8:	0e 94 c3 11 	call	0x2386	; 0x2386 <SD_sendCommand>
if(response != 0x00)
    25dc:	81 11       	cpse	r24, r1
    25de:	06 c0       	rjmp	.+12     	; 0x25ec <SD_erase+0x52>
  return response;

response = SD_sendCommand(ERASE_SELECTED_BLOCKS, 0); //erase all selected blocks
    25e0:	40 e0       	ldi	r20, 0x00	; 0
    25e2:	50 e0       	ldi	r21, 0x00	; 0
    25e4:	ba 01       	movw	r22, r20
    25e6:	86 e2       	ldi	r24, 0x26	; 38
    25e8:	0e 94 c3 11 	call	0x2386	; 0x2386 <SD_sendCommand>
if(response != 0x00)
  return response;

return 0; //normal return
}
    25ec:	ff 90       	pop	r15
    25ee:	ef 90       	pop	r14
    25f0:	df 90       	pop	r13
    25f2:	cf 90       	pop	r12
    25f4:	bf 90       	pop	r11
    25f6:	af 90       	pop	r10
    25f8:	9f 90       	pop	r9
    25fa:	8f 90       	pop	r8
    25fc:	08 95       	ret

000025fe <SD_readSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_readSingleBlock(unsigned long startBlock)
{
    25fe:	cf 93       	push	r28
    2600:	df 93       	push	r29
    2602:	ab 01       	movw	r20, r22
    2604:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(READ_SINGLE_BLOCK, startBlock); //read a Block command
    2606:	81 e1       	ldi	r24, 0x11	; 17
    2608:	0e 94 c3 11 	call	0x2386	; 0x2386 <SD_sendCommand>
 
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
    260c:	81 11       	cpse	r24, r1
    260e:	23 c0       	rjmp	.+70     	; 0x2656 <SD_readSingleBlock+0x58>

SD_CS_ASSERT;
    2610:	5d 98       	cbi	0x0b, 5	; 11

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    2612:	c0 e0       	ldi	r28, 0x00	; 0
    2614:	d0 e0       	ldi	r29, 0x00	; 0
    2616:	06 c0       	rjmp	.+12     	; 0x2624 <SD_readSingleBlock+0x26>
    2618:	21 97       	sbiw	r28, 0x01	; 1
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out
    261a:	20 97       	sbiw	r28, 0x00	; 0
    261c:	19 f4       	brne	.+6      	; 0x2624 <SD_readSingleBlock+0x26>
    261e:	5d 9a       	sbi	0x0b, 5	; 11
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	19 c0       	rjmp	.+50     	; 0x2656 <SD_readSingleBlock+0x58>
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)

SD_CS_ASSERT;

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    2624:	0e 94 84 13 	call	0x2708	; 0x2708 <SPI_receive>
    2628:	8e 3f       	cpi	r24, 0xFE	; 254
    262a:	b1 f7       	brne	.-20     	; 0x2618 <SD_readSingleBlock+0x1a>
    262c:	c0 e0       	ldi	r28, 0x00	; 0
    262e:	d0 e0       	ldi	r29, 0x00	; 0
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
  buffer[i] = SPI_receive();
    2630:	0e 94 84 13 	call	0x2708	; 0x2708 <SPI_receive>
    2634:	fe 01       	movw	r30, r28
    2636:	ee 5e       	subi	r30, 0xEE	; 238
    2638:	fd 4f       	sbci	r31, 0xFD	; 253
    263a:	80 83       	st	Z, r24

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
    263c:	21 96       	adiw	r28, 0x01	; 1
    263e:	c1 15       	cp	r28, r1
    2640:	82 e0       	ldi	r24, 0x02	; 2
    2642:	d8 07       	cpc	r29, r24
    2644:	a9 f7       	brne	.-22     	; 0x2630 <SD_readSingleBlock+0x32>
  buffer[i] = SPI_receive();

SPI_receive(); //receive incoming CRC (16-bit), CRC is ignored here
    2646:	0e 94 84 13 	call	0x2708	; 0x2708 <SPI_receive>
SPI_receive();
    264a:	0e 94 84 13 	call	0x2708	; 0x2708 <SPI_receive>

SPI_receive(); //extra 8 clock pulses
    264e:	0e 94 84 13 	call	0x2708	; 0x2708 <SPI_receive>
SD_CS_DEASSERT;
    2652:	5d 9a       	sbi	0x0b, 5	; 11

return 0;
    2654:	80 e0       	ldi	r24, 0x00	; 0
}
    2656:	df 91       	pop	r29
    2658:	cf 91       	pop	r28
    265a:	08 95       	ret

0000265c <SD_writeSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_writeSingleBlock(unsigned long startBlock)
{
    265c:	cf 93       	push	r28
    265e:	df 93       	push	r29
    2660:	ab 01       	movw	r20, r22
    2662:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(WRITE_SINGLE_BLOCK, startBlock); //write a Block command
    2664:	88 e1       	ldi	r24, 0x18	; 24
    2666:	0e 94 c3 11 	call	0x2386	; 0x2386 <SD_sendCommand>
  
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
    266a:	81 11       	cpse	r24, r1
    266c:	3e c0       	rjmp	.+124    	; 0x26ea <SD_writeSingleBlock+0x8e>

SD_CS_ASSERT;
    266e:	5d 98       	cbi	0x0b, 5	; 11

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)
    2670:	8e ef       	ldi	r24, 0xFE	; 254
    2672:	0e 94 7e 13 	call	0x26fc	; 0x26fc <SPI_transmit>

for(i=0; i<512; i++)    //send 512 bytes data
    2676:	c0 e0       	ldi	r28, 0x00	; 0
    2678:	d0 e0       	ldi	r29, 0x00	; 0
  SPI_transmit(buffer[i]);
    267a:	fe 01       	movw	r30, r28
    267c:	ee 5e       	subi	r30, 0xEE	; 238
    267e:	fd 4f       	sbci	r31, 0xFD	; 253
    2680:	80 81       	ld	r24, Z
    2682:	0e 94 7e 13 	call	0x26fc	; 0x26fc <SPI_transmit>

SD_CS_ASSERT;

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)

for(i=0; i<512; i++)    //send 512 bytes data
    2686:	21 96       	adiw	r28, 0x01	; 1
    2688:	c1 15       	cp	r28, r1
    268a:	22 e0       	ldi	r18, 0x02	; 2
    268c:	d2 07       	cpc	r29, r18
    268e:	a9 f7       	brne	.-22     	; 0x267a <SD_writeSingleBlock+0x1e>
  SPI_transmit(buffer[i]);

SPI_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
    2690:	8f ef       	ldi	r24, 0xFF	; 255
    2692:	0e 94 7e 13 	call	0x26fc	; 0x26fc <SPI_transmit>
SPI_transmit(0xff);
    2696:	8f ef       	ldi	r24, 0xFF	; 255
    2698:	0e 94 7e 13 	call	0x26fc	; 0x26fc <SPI_transmit>

response = SPI_receive();
    269c:	0e 94 84 13 	call	0x2708	; 0x2708 <SPI_receive>

if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
    26a0:	98 2f       	mov	r25, r24
    26a2:	9f 71       	andi	r25, 0x1F	; 31
    26a4:	95 30       	cpi	r25, 0x05	; 5
    26a6:	39 f0       	breq	.+14     	; 0x26b6 <SD_writeSingleBlock+0x5a>
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
    26a8:	5d 9a       	sbi	0x0b, 5	; 11
  return response;
    26aa:	1f c0       	rjmp	.+62     	; 0x26ea <SD_writeSingleBlock+0x8e>
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    26ac:	21 96       	adiw	r28, 0x01	; 1
    26ae:	29 f4       	brne	.+10     	; 0x26ba <SD_writeSingleBlock+0x5e>
    26b0:	5d 9a       	sbi	0x0b, 5	; 11
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	1a c0       	rjmp	.+52     	; 0x26ea <SD_writeSingleBlock+0x8e>
SPI_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
SPI_transmit(0xff);

response = SPI_receive();

if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
    26b6:	c0 e0       	ldi	r28, 0x00	; 0
    26b8:	d0 e0       	ldi	r29, 0x00	; 0
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    26ba:	0e 94 84 13 	call	0x2708	; 0x2708 <SPI_receive>
    26be:	88 23       	and	r24, r24
    26c0:	a9 f3       	breq	.-22     	; 0x26ac <SD_writeSingleBlock+0x50>
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}

SD_CS_DEASSERT;
    26c2:	5d 9a       	sbi	0x0b, 5	; 11
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
    26c4:	8f ef       	ldi	r24, 0xFF	; 255
    26c6:	0e 94 7e 13 	call	0x26fc	; 0x26fc <SPI_transmit>
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy
    26ca:	5d 98       	cbi	0x0b, 5	; 11

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    26cc:	08 c0       	rjmp	.+16     	; 0x26de <SD_writeSingleBlock+0x82>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    26ce:	ce 01       	movw	r24, r28
    26d0:	01 96       	adiw	r24, 0x01	; 1
    26d2:	21 96       	adiw	r28, 0x01	; 1
    26d4:	19 f4       	brne	.+6      	; 0x26dc <SD_writeSingleBlock+0x80>
    26d6:	5d 9a       	sbi	0x0b, 5	; 11
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	07 c0       	rjmp	.+14     	; 0x26ea <SD_writeSingleBlock+0x8e>
    26dc:	ec 01       	movw	r28, r24

SD_CS_DEASSERT;
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    26de:	0e 94 84 13 	call	0x2708	; 0x2708 <SPI_receive>
    26e2:	88 23       	and	r24, r24
    26e4:	a1 f3       	breq	.-24     	; 0x26ce <SD_writeSingleBlock+0x72>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
SD_CS_DEASSERT;
    26e6:	5d 9a       	sbi	0x0b, 5	; 11

return 0;
    26e8:	80 e0       	ldi	r24, 0x00	; 0
}
    26ea:	df 91       	pop	r29
    26ec:	cf 91       	pop	r28
    26ee:	08 95       	ret

000026f0 <spi_init>:
//clock rate: 4Mhz (SPI2X)
void spi_init(void)
{
//SPCR = 0x52; //setup SPI: Master mode, MSB first, SCK phase low, SCK idle low
//SPSR = 0x00;
    SPI_HIGH_SPEED;
    26f0:	80 e5       	ldi	r24, 0x50	; 80
    26f2:	8c bd       	out	0x2c, r24	; 44
    26f4:	8d b5       	in	r24, 0x2d	; 45
    26f6:	81 60       	ori	r24, 0x01	; 1
    26f8:	8d bd       	out	0x2d, r24	; 45
    26fa:	08 95       	ret

000026fc <SPI_transmit>:
}

unsigned char SPI_transmit(unsigned char data)
{
// Start transmission
SPDR = data;
    26fc:	8e bd       	out	0x2e, r24	; 46

// Wait for transmission complete
while(!(SPSR & (1<<SPIF)));
    26fe:	0d b4       	in	r0, 0x2d	; 45
    2700:	07 fe       	sbrs	r0, 7
    2702:	fd cf       	rjmp	.-6      	; 0x26fe <SPI_transmit+0x2>
data = SPDR;
    2704:	8e b5       	in	r24, 0x2e	; 46

return(data);
}
    2706:	08 95       	ret

00002708 <SPI_receive>:
unsigned char SPI_receive(void)
{
unsigned char data;
// Wait for reception complete

SPDR = 0xff;
    2708:	8f ef       	ldi	r24, 0xFF	; 255
    270a:	8e bd       	out	0x2e, r24	; 46
while(!(SPSR & (1<<SPIF)));
    270c:	0d b4       	in	r0, 0x2d	; 45
    270e:	07 fe       	sbrs	r0, 7
    2710:	fd cf       	rjmp	.-6      	; 0x270c <SPI_receive+0x4>
data = SPDR;
    2712:	8e b5       	in	r24, 0x2e	; 46

// Return data register
return data;
}
    2714:	08 95       	ret

00002716 <uart0_init>:
//char size: 8 bit
//parity: Disabled
//**************************************************
void uart0_init(void)
{
    UCSR0A = 0x00;
    2716:	10 92 c0 00 	sts	0x00C0, r1
    UCSR0B = 0x18;			// enable UART TX and RX
    271a:	88 e1       	ldi	r24, 0x18	; 24
    271c:	80 93 c1 00 	sts	0x00C1, r24
    UCSR0C = 0x06;			// set the UART for N, 8, 1
    2720:	86 e0       	ldi	r24, 0x06	; 6
    2722:	80 93 c2 00 	sts	0x00C2, r24
    UBRR0L = 8;				// set BAUD Rate for 115200 with 16MHz clock
    2726:	88 e0       	ldi	r24, 0x08	; 8
    2728:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = 0;
    272c:	10 92 c5 00 	sts	0x00C5, r1
    2730:	08 95       	ret

00002732 <receiveByte>:
//*************************************************
unsigned char receiveByte( void )
{
   unsigned char data;   							// create a variable to hold the received value
   
   while ( (UCSR0A & (1<<RXC0)) == 0 )			// wait until the received character flag is set
    2732:	e0 ec       	ldi	r30, 0xC0	; 192
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
    2738:	88 23       	and	r24, r24
    273a:	ec f7       	brge	.-6      	; 0x2736 <receiveByte+0x4>
   {
   }
   
   data=UDR0;  									// load the received character into the local variable
    273c:	80 91 c6 00 	lds	r24, 0x00C6


   return data;									// return the value
}
    2740:	08 95       	ret

00002742 <transmitByte>:
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
    while ( (UCSR0A & (1<<RXC0)) == 0 )			    // wait until the received character flag is set
    2742:	e0 ec       	ldi	r30, 0xC0	; 192
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	80 81       	ld	r24, Z
    2748:	88 23       	and	r24, r24
    274a:	ec f7       	brge	.-6      	; 0x2746 <transmitByte+0x4>
    {
    }

    data = UDR0;
    274c:	80 91 c6 00 	lds	r24, 0x00C6
    2750:	08 95       	ret

00002752 <transmitString_F>:

//***************************************************
//Function to transmit a string in Flash
//***************************************************
void transmitString_F(char* string)
{
    2752:	cf 93       	push	r28
    2754:	df 93       	push	r29
    2756:	ec 01       	movw	r28, r24
  while (pgm_read_byte(&(*string)))
    2758:	fe 01       	movw	r30, r28
    275a:	24 91       	lpm	r18, Z
    275c:	22 23       	and	r18, r18
    275e:	51 f0       	breq	.+20     	; 0x2774 <transmitString_F+0x22>
   transmitByte(pgm_read_byte(&(*string++)));
    2760:	21 96       	adiw	r28, 0x01	; 1
    2762:	fc 01       	movw	r30, r24
    2764:	84 91       	lpm	r24, Z
    2766:	0e 94 a1 13 	call	0x2742	; 0x2742 <transmitByte>
//***************************************************
//Function to transmit a string in Flash
//***************************************************
void transmitString_F(char* string)
{
  while (pgm_read_byte(&(*string)))
    276a:	ce 01       	movw	r24, r28
    276c:	fe 01       	movw	r30, r28
    276e:	24 91       	lpm	r18, Z
    2770:	21 11       	cpse	r18, r1
    2772:	f6 cf       	rjmp	.-20     	; 0x2760 <transmitString_F+0xe>
   transmitByte(pgm_read_byte(&(*string++)));
}
    2774:	df 91       	pop	r29
    2776:	cf 91       	pop	r28
    2778:	08 95       	ret

0000277a <transmitString>:

//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
    277a:	cf 93       	push	r28
    277c:	df 93       	push	r29
    277e:	ec 01       	movw	r28, r24
  while (*string)
    2780:	88 81       	ld	r24, Y
    2782:	88 23       	and	r24, r24
    2784:	31 f0       	breq	.+12     	; 0x2792 <transmitString+0x18>
    2786:	21 96       	adiw	r28, 0x01	; 1
   transmitByte(*string++);
    2788:	0e 94 a1 13 	call	0x2742	; 0x2742 <transmitByte>
//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
  while (*string)
    278c:	89 91       	ld	r24, Y+
    278e:	81 11       	cpse	r24, r1
    2790:	fb cf       	rjmp	.-10     	; 0x2788 <transmitString+0xe>
   transmitByte(*string++);
}
    2792:	df 91       	pop	r29
    2794:	cf 91       	pop	r28
    2796:	08 95       	ret

00002798 <__mulsi3>:
    2798:	db 01       	movw	r26, r22
    279a:	8f 93       	push	r24
    279c:	9f 93       	push	r25
    279e:	0e 94 13 14 	call	0x2826	; 0x2826 <__muluhisi3>
    27a2:	bf 91       	pop	r27
    27a4:	af 91       	pop	r26
    27a6:	a2 9f       	mul	r26, r18
    27a8:	80 0d       	add	r24, r0
    27aa:	91 1d       	adc	r25, r1
    27ac:	a3 9f       	mul	r26, r19
    27ae:	90 0d       	add	r25, r0
    27b0:	b2 9f       	mul	r27, r18
    27b2:	90 0d       	add	r25, r0
    27b4:	11 24       	eor	r1, r1
    27b6:	08 95       	ret

000027b8 <__udivmodsi4>:
    27b8:	a1 e2       	ldi	r26, 0x21	; 33
    27ba:	1a 2e       	mov	r1, r26
    27bc:	aa 1b       	sub	r26, r26
    27be:	bb 1b       	sub	r27, r27
    27c0:	fd 01       	movw	r30, r26
    27c2:	0d c0       	rjmp	.+26     	; 0x27de <__udivmodsi4_ep>

000027c4 <__udivmodsi4_loop>:
    27c4:	aa 1f       	adc	r26, r26
    27c6:	bb 1f       	adc	r27, r27
    27c8:	ee 1f       	adc	r30, r30
    27ca:	ff 1f       	adc	r31, r31
    27cc:	a2 17       	cp	r26, r18
    27ce:	b3 07       	cpc	r27, r19
    27d0:	e4 07       	cpc	r30, r20
    27d2:	f5 07       	cpc	r31, r21
    27d4:	20 f0       	brcs	.+8      	; 0x27de <__udivmodsi4_ep>
    27d6:	a2 1b       	sub	r26, r18
    27d8:	b3 0b       	sbc	r27, r19
    27da:	e4 0b       	sbc	r30, r20
    27dc:	f5 0b       	sbc	r31, r21

000027de <__udivmodsi4_ep>:
    27de:	66 1f       	adc	r22, r22
    27e0:	77 1f       	adc	r23, r23
    27e2:	88 1f       	adc	r24, r24
    27e4:	99 1f       	adc	r25, r25
    27e6:	1a 94       	dec	r1
    27e8:	69 f7       	brne	.-38     	; 0x27c4 <__udivmodsi4_loop>
    27ea:	60 95       	com	r22
    27ec:	70 95       	com	r23
    27ee:	80 95       	com	r24
    27f0:	90 95       	com	r25
    27f2:	9b 01       	movw	r18, r22
    27f4:	ac 01       	movw	r20, r24
    27f6:	bd 01       	movw	r22, r26
    27f8:	cf 01       	movw	r24, r30
    27fa:	08 95       	ret

000027fc <__tablejump2__>:
    27fc:	ee 0f       	add	r30, r30
    27fe:	ff 1f       	adc	r31, r31

00002800 <__tablejump__>:
    2800:	05 90       	lpm	r0, Z+
    2802:	f4 91       	lpm	r31, Z
    2804:	e0 2d       	mov	r30, r0
    2806:	09 94       	ijmp

00002808 <__umulhisi3>:
    2808:	a2 9f       	mul	r26, r18
    280a:	b0 01       	movw	r22, r0
    280c:	b3 9f       	mul	r27, r19
    280e:	c0 01       	movw	r24, r0
    2810:	a3 9f       	mul	r26, r19
    2812:	70 0d       	add	r23, r0
    2814:	81 1d       	adc	r24, r1
    2816:	11 24       	eor	r1, r1
    2818:	91 1d       	adc	r25, r1
    281a:	b2 9f       	mul	r27, r18
    281c:	70 0d       	add	r23, r0
    281e:	81 1d       	adc	r24, r1
    2820:	11 24       	eor	r1, r1
    2822:	91 1d       	adc	r25, r1
    2824:	08 95       	ret

00002826 <__muluhisi3>:
    2826:	0e 94 04 14 	call	0x2808	; 0x2808 <__umulhisi3>
    282a:	a5 9f       	mul	r26, r21
    282c:	90 0d       	add	r25, r0
    282e:	b4 9f       	mul	r27, r20
    2830:	90 0d       	add	r25, r0
    2832:	a4 9f       	mul	r26, r20
    2834:	80 0d       	add	r24, r0
    2836:	91 1d       	adc	r25, r1
    2838:	11 24       	eor	r1, r1
    283a:	08 95       	ret

0000283c <printf>:
    283c:	a0 e0       	ldi	r26, 0x00	; 0
    283e:	b0 e0       	ldi	r27, 0x00	; 0
    2840:	e4 e2       	ldi	r30, 0x24	; 36
    2842:	f4 e1       	ldi	r31, 0x14	; 20
    2844:	0c 94 c1 16 	jmp	0x2d82	; 0x2d82 <__prologue_saves__+0x20>
    2848:	fe 01       	movw	r30, r28
    284a:	35 96       	adiw	r30, 0x05	; 5
    284c:	61 91       	ld	r22, Z+
    284e:	71 91       	ld	r23, Z+
    2850:	af 01       	movw	r20, r30
    2852:	80 91 2b 04 	lds	r24, 0x042B
    2856:	90 91 2c 04 	lds	r25, 0x042C
    285a:	0e 94 39 14 	call	0x2872	; 0x2872 <vfprintf>
    285e:	e2 e0       	ldi	r30, 0x02	; 2
    2860:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__epilogue_restores__+0x20>

00002864 <putchar>:
    2864:	60 91 2b 04 	lds	r22, 0x042B
    2868:	70 91 2c 04 	lds	r23, 0x042C
    286c:	0e 94 21 16 	call	0x2c42	; 0x2c42 <fputc>
    2870:	08 95       	ret

00002872 <vfprintf>:
    2872:	ac e0       	ldi	r26, 0x0C	; 12
    2874:	b0 e0       	ldi	r27, 0x00	; 0
    2876:	ef e3       	ldi	r30, 0x3F	; 63
    2878:	f4 e1       	ldi	r31, 0x14	; 20
    287a:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__prologue_saves__>
    287e:	7c 01       	movw	r14, r24
    2880:	6b 01       	movw	r12, r22
    2882:	8a 01       	movw	r16, r20
    2884:	fc 01       	movw	r30, r24
    2886:	17 82       	std	Z+7, r1	; 0x07
    2888:	16 82       	std	Z+6, r1	; 0x06
    288a:	83 81       	ldd	r24, Z+3	; 0x03
    288c:	81 ff       	sbrs	r24, 1
    288e:	bd c1       	rjmp	.+890    	; 0x2c0a <vfprintf+0x398>
    2890:	ce 01       	movw	r24, r28
    2892:	01 96       	adiw	r24, 0x01	; 1
    2894:	4c 01       	movw	r8, r24
    2896:	f7 01       	movw	r30, r14
    2898:	93 81       	ldd	r25, Z+3	; 0x03
    289a:	f6 01       	movw	r30, r12
    289c:	93 fd       	sbrc	r25, 3
    289e:	85 91       	lpm	r24, Z+
    28a0:	93 ff       	sbrs	r25, 3
    28a2:	81 91       	ld	r24, Z+
    28a4:	6f 01       	movw	r12, r30
    28a6:	88 23       	and	r24, r24
    28a8:	09 f4       	brne	.+2      	; 0x28ac <vfprintf+0x3a>
    28aa:	ab c1       	rjmp	.+854    	; 0x2c02 <vfprintf+0x390>
    28ac:	85 32       	cpi	r24, 0x25	; 37
    28ae:	39 f4       	brne	.+14     	; 0x28be <vfprintf+0x4c>
    28b0:	93 fd       	sbrc	r25, 3
    28b2:	85 91       	lpm	r24, Z+
    28b4:	93 ff       	sbrs	r25, 3
    28b6:	81 91       	ld	r24, Z+
    28b8:	6f 01       	movw	r12, r30
    28ba:	85 32       	cpi	r24, 0x25	; 37
    28bc:	29 f4       	brne	.+10     	; 0x28c8 <vfprintf+0x56>
    28be:	b7 01       	movw	r22, r14
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	0e 94 21 16 	call	0x2c42	; 0x2c42 <fputc>
    28c6:	e7 cf       	rjmp	.-50     	; 0x2896 <vfprintf+0x24>
    28c8:	51 2c       	mov	r5, r1
    28ca:	31 2c       	mov	r3, r1
    28cc:	20 e0       	ldi	r18, 0x00	; 0
    28ce:	20 32       	cpi	r18, 0x20	; 32
    28d0:	a0 f4       	brcc	.+40     	; 0x28fa <vfprintf+0x88>
    28d2:	8b 32       	cpi	r24, 0x2B	; 43
    28d4:	69 f0       	breq	.+26     	; 0x28f0 <vfprintf+0x7e>
    28d6:	30 f4       	brcc	.+12     	; 0x28e4 <vfprintf+0x72>
    28d8:	80 32       	cpi	r24, 0x20	; 32
    28da:	59 f0       	breq	.+22     	; 0x28f2 <vfprintf+0x80>
    28dc:	83 32       	cpi	r24, 0x23	; 35
    28de:	69 f4       	brne	.+26     	; 0x28fa <vfprintf+0x88>
    28e0:	20 61       	ori	r18, 0x10	; 16
    28e2:	2c c0       	rjmp	.+88     	; 0x293c <vfprintf+0xca>
    28e4:	8d 32       	cpi	r24, 0x2D	; 45
    28e6:	39 f0       	breq	.+14     	; 0x28f6 <vfprintf+0x84>
    28e8:	80 33       	cpi	r24, 0x30	; 48
    28ea:	39 f4       	brne	.+14     	; 0x28fa <vfprintf+0x88>
    28ec:	21 60       	ori	r18, 0x01	; 1
    28ee:	26 c0       	rjmp	.+76     	; 0x293c <vfprintf+0xca>
    28f0:	22 60       	ori	r18, 0x02	; 2
    28f2:	24 60       	ori	r18, 0x04	; 4
    28f4:	23 c0       	rjmp	.+70     	; 0x293c <vfprintf+0xca>
    28f6:	28 60       	ori	r18, 0x08	; 8
    28f8:	21 c0       	rjmp	.+66     	; 0x293c <vfprintf+0xca>
    28fa:	27 fd       	sbrc	r18, 7
    28fc:	27 c0       	rjmp	.+78     	; 0x294c <vfprintf+0xda>
    28fe:	30 ed       	ldi	r19, 0xD0	; 208
    2900:	38 0f       	add	r19, r24
    2902:	3a 30       	cpi	r19, 0x0A	; 10
    2904:	78 f4       	brcc	.+30     	; 0x2924 <vfprintf+0xb2>
    2906:	26 ff       	sbrs	r18, 6
    2908:	06 c0       	rjmp	.+12     	; 0x2916 <vfprintf+0xa4>
    290a:	fa e0       	ldi	r31, 0x0A	; 10
    290c:	5f 9e       	mul	r5, r31
    290e:	30 0d       	add	r19, r0
    2910:	11 24       	eor	r1, r1
    2912:	53 2e       	mov	r5, r19
    2914:	13 c0       	rjmp	.+38     	; 0x293c <vfprintf+0xca>
    2916:	8a e0       	ldi	r24, 0x0A	; 10
    2918:	38 9e       	mul	r3, r24
    291a:	30 0d       	add	r19, r0
    291c:	11 24       	eor	r1, r1
    291e:	33 2e       	mov	r3, r19
    2920:	20 62       	ori	r18, 0x20	; 32
    2922:	0c c0       	rjmp	.+24     	; 0x293c <vfprintf+0xca>
    2924:	8e 32       	cpi	r24, 0x2E	; 46
    2926:	21 f4       	brne	.+8      	; 0x2930 <vfprintf+0xbe>
    2928:	26 fd       	sbrc	r18, 6
    292a:	6b c1       	rjmp	.+726    	; 0x2c02 <vfprintf+0x390>
    292c:	20 64       	ori	r18, 0x40	; 64
    292e:	06 c0       	rjmp	.+12     	; 0x293c <vfprintf+0xca>
    2930:	8c 36       	cpi	r24, 0x6C	; 108
    2932:	11 f4       	brne	.+4      	; 0x2938 <vfprintf+0xc6>
    2934:	20 68       	ori	r18, 0x80	; 128
    2936:	02 c0       	rjmp	.+4      	; 0x293c <vfprintf+0xca>
    2938:	88 36       	cpi	r24, 0x68	; 104
    293a:	41 f4       	brne	.+16     	; 0x294c <vfprintf+0xda>
    293c:	f6 01       	movw	r30, r12
    293e:	93 fd       	sbrc	r25, 3
    2940:	85 91       	lpm	r24, Z+
    2942:	93 ff       	sbrs	r25, 3
    2944:	81 91       	ld	r24, Z+
    2946:	6f 01       	movw	r12, r30
    2948:	81 11       	cpse	r24, r1
    294a:	c1 cf       	rjmp	.-126    	; 0x28ce <vfprintf+0x5c>
    294c:	98 2f       	mov	r25, r24
    294e:	9f 7d       	andi	r25, 0xDF	; 223
    2950:	95 54       	subi	r25, 0x45	; 69
    2952:	93 30       	cpi	r25, 0x03	; 3
    2954:	28 f4       	brcc	.+10     	; 0x2960 <vfprintf+0xee>
    2956:	0c 5f       	subi	r16, 0xFC	; 252
    2958:	1f 4f       	sbci	r17, 0xFF	; 255
    295a:	ff e3       	ldi	r31, 0x3F	; 63
    295c:	f9 83       	std	Y+1, r31	; 0x01
    295e:	0d c0       	rjmp	.+26     	; 0x297a <vfprintf+0x108>
    2960:	83 36       	cpi	r24, 0x63	; 99
    2962:	31 f0       	breq	.+12     	; 0x2970 <vfprintf+0xfe>
    2964:	83 37       	cpi	r24, 0x73	; 115
    2966:	71 f0       	breq	.+28     	; 0x2984 <vfprintf+0x112>
    2968:	83 35       	cpi	r24, 0x53	; 83
    296a:	09 f0       	breq	.+2      	; 0x296e <vfprintf+0xfc>
    296c:	5b c0       	rjmp	.+182    	; 0x2a24 <vfprintf+0x1b2>
    296e:	22 c0       	rjmp	.+68     	; 0x29b4 <vfprintf+0x142>
    2970:	f8 01       	movw	r30, r16
    2972:	80 81       	ld	r24, Z
    2974:	89 83       	std	Y+1, r24	; 0x01
    2976:	0e 5f       	subi	r16, 0xFE	; 254
    2978:	1f 4f       	sbci	r17, 0xFF	; 255
    297a:	44 24       	eor	r4, r4
    297c:	43 94       	inc	r4
    297e:	51 2c       	mov	r5, r1
    2980:	54 01       	movw	r10, r8
    2982:	15 c0       	rjmp	.+42     	; 0x29ae <vfprintf+0x13c>
    2984:	38 01       	movw	r6, r16
    2986:	f2 e0       	ldi	r31, 0x02	; 2
    2988:	6f 0e       	add	r6, r31
    298a:	71 1c       	adc	r7, r1
    298c:	f8 01       	movw	r30, r16
    298e:	a0 80       	ld	r10, Z
    2990:	b1 80       	ldd	r11, Z+1	; 0x01
    2992:	26 ff       	sbrs	r18, 6
    2994:	03 c0       	rjmp	.+6      	; 0x299c <vfprintf+0x12a>
    2996:	65 2d       	mov	r22, r5
    2998:	70 e0       	ldi	r23, 0x00	; 0
    299a:	02 c0       	rjmp	.+4      	; 0x29a0 <vfprintf+0x12e>
    299c:	6f ef       	ldi	r22, 0xFF	; 255
    299e:	7f ef       	ldi	r23, 0xFF	; 255
    29a0:	c5 01       	movw	r24, r10
    29a2:	2c 87       	std	Y+12, r18	; 0x0c
    29a4:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <strnlen>
    29a8:	2c 01       	movw	r4, r24
    29aa:	83 01       	movw	r16, r6
    29ac:	2c 85       	ldd	r18, Y+12	; 0x0c
    29ae:	2f 77       	andi	r18, 0x7F	; 127
    29b0:	22 2e       	mov	r2, r18
    29b2:	17 c0       	rjmp	.+46     	; 0x29e2 <vfprintf+0x170>
    29b4:	38 01       	movw	r6, r16
    29b6:	f2 e0       	ldi	r31, 0x02	; 2
    29b8:	6f 0e       	add	r6, r31
    29ba:	71 1c       	adc	r7, r1
    29bc:	f8 01       	movw	r30, r16
    29be:	a0 80       	ld	r10, Z
    29c0:	b1 80       	ldd	r11, Z+1	; 0x01
    29c2:	26 ff       	sbrs	r18, 6
    29c4:	03 c0       	rjmp	.+6      	; 0x29cc <vfprintf+0x15a>
    29c6:	65 2d       	mov	r22, r5
    29c8:	70 e0       	ldi	r23, 0x00	; 0
    29ca:	02 c0       	rjmp	.+4      	; 0x29d0 <vfprintf+0x15e>
    29cc:	6f ef       	ldi	r22, 0xFF	; 255
    29ce:	7f ef       	ldi	r23, 0xFF	; 255
    29d0:	c5 01       	movw	r24, r10
    29d2:	2c 87       	std	Y+12, r18	; 0x0c
    29d4:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <strnlen_P>
    29d8:	2c 01       	movw	r4, r24
    29da:	2c 85       	ldd	r18, Y+12	; 0x0c
    29dc:	20 68       	ori	r18, 0x80	; 128
    29de:	22 2e       	mov	r2, r18
    29e0:	83 01       	movw	r16, r6
    29e2:	23 fc       	sbrc	r2, 3
    29e4:	1b c0       	rjmp	.+54     	; 0x2a1c <vfprintf+0x1aa>
    29e6:	83 2d       	mov	r24, r3
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	48 16       	cp	r4, r24
    29ec:	59 06       	cpc	r5, r25
    29ee:	b0 f4       	brcc	.+44     	; 0x2a1c <vfprintf+0x1aa>
    29f0:	b7 01       	movw	r22, r14
    29f2:	80 e2       	ldi	r24, 0x20	; 32
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	0e 94 21 16 	call	0x2c42	; 0x2c42 <fputc>
    29fa:	3a 94       	dec	r3
    29fc:	f4 cf       	rjmp	.-24     	; 0x29e6 <vfprintf+0x174>
    29fe:	f5 01       	movw	r30, r10
    2a00:	27 fc       	sbrc	r2, 7
    2a02:	85 91       	lpm	r24, Z+
    2a04:	27 fe       	sbrs	r2, 7
    2a06:	81 91       	ld	r24, Z+
    2a08:	5f 01       	movw	r10, r30
    2a0a:	b7 01       	movw	r22, r14
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	0e 94 21 16 	call	0x2c42	; 0x2c42 <fputc>
    2a12:	31 10       	cpse	r3, r1
    2a14:	3a 94       	dec	r3
    2a16:	f1 e0       	ldi	r31, 0x01	; 1
    2a18:	4f 1a       	sub	r4, r31
    2a1a:	51 08       	sbc	r5, r1
    2a1c:	41 14       	cp	r4, r1
    2a1e:	51 04       	cpc	r5, r1
    2a20:	71 f7       	brne	.-36     	; 0x29fe <vfprintf+0x18c>
    2a22:	e5 c0       	rjmp	.+458    	; 0x2bee <vfprintf+0x37c>
    2a24:	84 36       	cpi	r24, 0x64	; 100
    2a26:	11 f0       	breq	.+4      	; 0x2a2c <vfprintf+0x1ba>
    2a28:	89 36       	cpi	r24, 0x69	; 105
    2a2a:	39 f5       	brne	.+78     	; 0x2a7a <vfprintf+0x208>
    2a2c:	f8 01       	movw	r30, r16
    2a2e:	27 ff       	sbrs	r18, 7
    2a30:	07 c0       	rjmp	.+14     	; 0x2a40 <vfprintf+0x1ce>
    2a32:	60 81       	ld	r22, Z
    2a34:	71 81       	ldd	r23, Z+1	; 0x01
    2a36:	82 81       	ldd	r24, Z+2	; 0x02
    2a38:	93 81       	ldd	r25, Z+3	; 0x03
    2a3a:	0c 5f       	subi	r16, 0xFC	; 252
    2a3c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a3e:	08 c0       	rjmp	.+16     	; 0x2a50 <vfprintf+0x1de>
    2a40:	60 81       	ld	r22, Z
    2a42:	71 81       	ldd	r23, Z+1	; 0x01
    2a44:	88 27       	eor	r24, r24
    2a46:	77 fd       	sbrc	r23, 7
    2a48:	80 95       	com	r24
    2a4a:	98 2f       	mov	r25, r24
    2a4c:	0e 5f       	subi	r16, 0xFE	; 254
    2a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a50:	2f 76       	andi	r18, 0x6F	; 111
    2a52:	b2 2e       	mov	r11, r18
    2a54:	97 ff       	sbrs	r25, 7
    2a56:	09 c0       	rjmp	.+18     	; 0x2a6a <vfprintf+0x1f8>
    2a58:	90 95       	com	r25
    2a5a:	80 95       	com	r24
    2a5c:	70 95       	com	r23
    2a5e:	61 95       	neg	r22
    2a60:	7f 4f       	sbci	r23, 0xFF	; 255
    2a62:	8f 4f       	sbci	r24, 0xFF	; 255
    2a64:	9f 4f       	sbci	r25, 0xFF	; 255
    2a66:	20 68       	ori	r18, 0x80	; 128
    2a68:	b2 2e       	mov	r11, r18
    2a6a:	2a e0       	ldi	r18, 0x0A	; 10
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	a4 01       	movw	r20, r8
    2a70:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__ultoa_invert>
    2a74:	a8 2e       	mov	r10, r24
    2a76:	a8 18       	sub	r10, r8
    2a78:	44 c0       	rjmp	.+136    	; 0x2b02 <vfprintf+0x290>
    2a7a:	85 37       	cpi	r24, 0x75	; 117
    2a7c:	29 f4       	brne	.+10     	; 0x2a88 <vfprintf+0x216>
    2a7e:	2f 7e       	andi	r18, 0xEF	; 239
    2a80:	b2 2e       	mov	r11, r18
    2a82:	2a e0       	ldi	r18, 0x0A	; 10
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	25 c0       	rjmp	.+74     	; 0x2ad2 <vfprintf+0x260>
    2a88:	f2 2f       	mov	r31, r18
    2a8a:	f9 7f       	andi	r31, 0xF9	; 249
    2a8c:	bf 2e       	mov	r11, r31
    2a8e:	8f 36       	cpi	r24, 0x6F	; 111
    2a90:	c1 f0       	breq	.+48     	; 0x2ac2 <vfprintf+0x250>
    2a92:	18 f4       	brcc	.+6      	; 0x2a9a <vfprintf+0x228>
    2a94:	88 35       	cpi	r24, 0x58	; 88
    2a96:	79 f0       	breq	.+30     	; 0x2ab6 <vfprintf+0x244>
    2a98:	b4 c0       	rjmp	.+360    	; 0x2c02 <vfprintf+0x390>
    2a9a:	80 37       	cpi	r24, 0x70	; 112
    2a9c:	19 f0       	breq	.+6      	; 0x2aa4 <vfprintf+0x232>
    2a9e:	88 37       	cpi	r24, 0x78	; 120
    2aa0:	21 f0       	breq	.+8      	; 0x2aaa <vfprintf+0x238>
    2aa2:	af c0       	rjmp	.+350    	; 0x2c02 <vfprintf+0x390>
    2aa4:	2f 2f       	mov	r18, r31
    2aa6:	20 61       	ori	r18, 0x10	; 16
    2aa8:	b2 2e       	mov	r11, r18
    2aaa:	b4 fe       	sbrs	r11, 4
    2aac:	0d c0       	rjmp	.+26     	; 0x2ac8 <vfprintf+0x256>
    2aae:	8b 2d       	mov	r24, r11
    2ab0:	84 60       	ori	r24, 0x04	; 4
    2ab2:	b8 2e       	mov	r11, r24
    2ab4:	09 c0       	rjmp	.+18     	; 0x2ac8 <vfprintf+0x256>
    2ab6:	24 ff       	sbrs	r18, 4
    2ab8:	0a c0       	rjmp	.+20     	; 0x2ace <vfprintf+0x25c>
    2aba:	9f 2f       	mov	r25, r31
    2abc:	96 60       	ori	r25, 0x06	; 6
    2abe:	b9 2e       	mov	r11, r25
    2ac0:	06 c0       	rjmp	.+12     	; 0x2ace <vfprintf+0x25c>
    2ac2:	28 e0       	ldi	r18, 0x08	; 8
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	05 c0       	rjmp	.+10     	; 0x2ad2 <vfprintf+0x260>
    2ac8:	20 e1       	ldi	r18, 0x10	; 16
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	02 c0       	rjmp	.+4      	; 0x2ad2 <vfprintf+0x260>
    2ace:	20 e1       	ldi	r18, 0x10	; 16
    2ad0:	32 e0       	ldi	r19, 0x02	; 2
    2ad2:	f8 01       	movw	r30, r16
    2ad4:	b7 fe       	sbrs	r11, 7
    2ad6:	07 c0       	rjmp	.+14     	; 0x2ae6 <vfprintf+0x274>
    2ad8:	60 81       	ld	r22, Z
    2ada:	71 81       	ldd	r23, Z+1	; 0x01
    2adc:	82 81       	ldd	r24, Z+2	; 0x02
    2ade:	93 81       	ldd	r25, Z+3	; 0x03
    2ae0:	0c 5f       	subi	r16, 0xFC	; 252
    2ae2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae4:	06 c0       	rjmp	.+12     	; 0x2af2 <vfprintf+0x280>
    2ae6:	60 81       	ld	r22, Z
    2ae8:	71 81       	ldd	r23, Z+1	; 0x01
    2aea:	80 e0       	ldi	r24, 0x00	; 0
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	0e 5f       	subi	r16, 0xFE	; 254
    2af0:	1f 4f       	sbci	r17, 0xFF	; 255
    2af2:	a4 01       	movw	r20, r8
    2af4:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__ultoa_invert>
    2af8:	a8 2e       	mov	r10, r24
    2afa:	a8 18       	sub	r10, r8
    2afc:	fb 2d       	mov	r31, r11
    2afe:	ff 77       	andi	r31, 0x7F	; 127
    2b00:	bf 2e       	mov	r11, r31
    2b02:	b6 fe       	sbrs	r11, 6
    2b04:	0b c0       	rjmp	.+22     	; 0x2b1c <vfprintf+0x2aa>
    2b06:	2b 2d       	mov	r18, r11
    2b08:	2e 7f       	andi	r18, 0xFE	; 254
    2b0a:	a5 14       	cp	r10, r5
    2b0c:	50 f4       	brcc	.+20     	; 0x2b22 <vfprintf+0x2b0>
    2b0e:	b4 fe       	sbrs	r11, 4
    2b10:	0a c0       	rjmp	.+20     	; 0x2b26 <vfprintf+0x2b4>
    2b12:	b2 fc       	sbrc	r11, 2
    2b14:	08 c0       	rjmp	.+16     	; 0x2b26 <vfprintf+0x2b4>
    2b16:	2b 2d       	mov	r18, r11
    2b18:	2e 7e       	andi	r18, 0xEE	; 238
    2b1a:	05 c0       	rjmp	.+10     	; 0x2b26 <vfprintf+0x2b4>
    2b1c:	7a 2c       	mov	r7, r10
    2b1e:	2b 2d       	mov	r18, r11
    2b20:	03 c0       	rjmp	.+6      	; 0x2b28 <vfprintf+0x2b6>
    2b22:	7a 2c       	mov	r7, r10
    2b24:	01 c0       	rjmp	.+2      	; 0x2b28 <vfprintf+0x2b6>
    2b26:	75 2c       	mov	r7, r5
    2b28:	24 ff       	sbrs	r18, 4
    2b2a:	0d c0       	rjmp	.+26     	; 0x2b46 <vfprintf+0x2d4>
    2b2c:	fe 01       	movw	r30, r28
    2b2e:	ea 0d       	add	r30, r10
    2b30:	f1 1d       	adc	r31, r1
    2b32:	80 81       	ld	r24, Z
    2b34:	80 33       	cpi	r24, 0x30	; 48
    2b36:	11 f4       	brne	.+4      	; 0x2b3c <vfprintf+0x2ca>
    2b38:	29 7e       	andi	r18, 0xE9	; 233
    2b3a:	09 c0       	rjmp	.+18     	; 0x2b4e <vfprintf+0x2dc>
    2b3c:	22 ff       	sbrs	r18, 2
    2b3e:	06 c0       	rjmp	.+12     	; 0x2b4c <vfprintf+0x2da>
    2b40:	73 94       	inc	r7
    2b42:	73 94       	inc	r7
    2b44:	04 c0       	rjmp	.+8      	; 0x2b4e <vfprintf+0x2dc>
    2b46:	82 2f       	mov	r24, r18
    2b48:	86 78       	andi	r24, 0x86	; 134
    2b4a:	09 f0       	breq	.+2      	; 0x2b4e <vfprintf+0x2dc>
    2b4c:	73 94       	inc	r7
    2b4e:	23 fd       	sbrc	r18, 3
    2b50:	13 c0       	rjmp	.+38     	; 0x2b78 <vfprintf+0x306>
    2b52:	20 ff       	sbrs	r18, 0
    2b54:	06 c0       	rjmp	.+12     	; 0x2b62 <vfprintf+0x2f0>
    2b56:	5a 2c       	mov	r5, r10
    2b58:	73 14       	cp	r7, r3
    2b5a:	18 f4       	brcc	.+6      	; 0x2b62 <vfprintf+0x2f0>
    2b5c:	53 0c       	add	r5, r3
    2b5e:	57 18       	sub	r5, r7
    2b60:	73 2c       	mov	r7, r3
    2b62:	73 14       	cp	r7, r3
    2b64:	68 f4       	brcc	.+26     	; 0x2b80 <vfprintf+0x30e>
    2b66:	b7 01       	movw	r22, r14
    2b68:	80 e2       	ldi	r24, 0x20	; 32
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	2c 87       	std	Y+12, r18	; 0x0c
    2b6e:	0e 94 21 16 	call	0x2c42	; 0x2c42 <fputc>
    2b72:	73 94       	inc	r7
    2b74:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b76:	f5 cf       	rjmp	.-22     	; 0x2b62 <vfprintf+0x2f0>
    2b78:	73 14       	cp	r7, r3
    2b7a:	10 f4       	brcc	.+4      	; 0x2b80 <vfprintf+0x30e>
    2b7c:	37 18       	sub	r3, r7
    2b7e:	01 c0       	rjmp	.+2      	; 0x2b82 <vfprintf+0x310>
    2b80:	31 2c       	mov	r3, r1
    2b82:	24 ff       	sbrs	r18, 4
    2b84:	12 c0       	rjmp	.+36     	; 0x2baa <vfprintf+0x338>
    2b86:	b7 01       	movw	r22, r14
    2b88:	80 e3       	ldi	r24, 0x30	; 48
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	2c 87       	std	Y+12, r18	; 0x0c
    2b8e:	0e 94 21 16 	call	0x2c42	; 0x2c42 <fputc>
    2b92:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b94:	22 ff       	sbrs	r18, 2
    2b96:	17 c0       	rjmp	.+46     	; 0x2bc6 <vfprintf+0x354>
    2b98:	21 ff       	sbrs	r18, 1
    2b9a:	03 c0       	rjmp	.+6      	; 0x2ba2 <vfprintf+0x330>
    2b9c:	88 e5       	ldi	r24, 0x58	; 88
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	02 c0       	rjmp	.+4      	; 0x2ba6 <vfprintf+0x334>
    2ba2:	88 e7       	ldi	r24, 0x78	; 120
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	b7 01       	movw	r22, r14
    2ba8:	0c c0       	rjmp	.+24     	; 0x2bc2 <vfprintf+0x350>
    2baa:	82 2f       	mov	r24, r18
    2bac:	86 78       	andi	r24, 0x86	; 134
    2bae:	59 f0       	breq	.+22     	; 0x2bc6 <vfprintf+0x354>
    2bb0:	21 fd       	sbrc	r18, 1
    2bb2:	02 c0       	rjmp	.+4      	; 0x2bb8 <vfprintf+0x346>
    2bb4:	80 e2       	ldi	r24, 0x20	; 32
    2bb6:	01 c0       	rjmp	.+2      	; 0x2bba <vfprintf+0x348>
    2bb8:	8b e2       	ldi	r24, 0x2B	; 43
    2bba:	27 fd       	sbrc	r18, 7
    2bbc:	8d e2       	ldi	r24, 0x2D	; 45
    2bbe:	b7 01       	movw	r22, r14
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	0e 94 21 16 	call	0x2c42	; 0x2c42 <fputc>
    2bc6:	a5 14       	cp	r10, r5
    2bc8:	38 f4       	brcc	.+14     	; 0x2bd8 <vfprintf+0x366>
    2bca:	b7 01       	movw	r22, r14
    2bcc:	80 e3       	ldi	r24, 0x30	; 48
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	0e 94 21 16 	call	0x2c42	; 0x2c42 <fputc>
    2bd4:	5a 94       	dec	r5
    2bd6:	f7 cf       	rjmp	.-18     	; 0x2bc6 <vfprintf+0x354>
    2bd8:	aa 94       	dec	r10
    2bda:	f4 01       	movw	r30, r8
    2bdc:	ea 0d       	add	r30, r10
    2bde:	f1 1d       	adc	r31, r1
    2be0:	80 81       	ld	r24, Z
    2be2:	b7 01       	movw	r22, r14
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	0e 94 21 16 	call	0x2c42	; 0x2c42 <fputc>
    2bea:	a1 10       	cpse	r10, r1
    2bec:	f5 cf       	rjmp	.-22     	; 0x2bd8 <vfprintf+0x366>
    2bee:	33 20       	and	r3, r3
    2bf0:	09 f4       	brne	.+2      	; 0x2bf4 <vfprintf+0x382>
    2bf2:	51 ce       	rjmp	.-862    	; 0x2896 <vfprintf+0x24>
    2bf4:	b7 01       	movw	r22, r14
    2bf6:	80 e2       	ldi	r24, 0x20	; 32
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	0e 94 21 16 	call	0x2c42	; 0x2c42 <fputc>
    2bfe:	3a 94       	dec	r3
    2c00:	f6 cf       	rjmp	.-20     	; 0x2bee <vfprintf+0x37c>
    2c02:	f7 01       	movw	r30, r14
    2c04:	86 81       	ldd	r24, Z+6	; 0x06
    2c06:	97 81       	ldd	r25, Z+7	; 0x07
    2c08:	02 c0       	rjmp	.+4      	; 0x2c0e <vfprintf+0x39c>
    2c0a:	8f ef       	ldi	r24, 0xFF	; 255
    2c0c:	9f ef       	ldi	r25, 0xFF	; 255
    2c0e:	2c 96       	adiw	r28, 0x0c	; 12
    2c10:	e2 e1       	ldi	r30, 0x12	; 18
    2c12:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__epilogue_restores__>

00002c16 <strnlen_P>:
    2c16:	fc 01       	movw	r30, r24
    2c18:	05 90       	lpm	r0, Z+
    2c1a:	61 50       	subi	r22, 0x01	; 1
    2c1c:	70 40       	sbci	r23, 0x00	; 0
    2c1e:	01 10       	cpse	r0, r1
    2c20:	d8 f7       	brcc	.-10     	; 0x2c18 <strnlen_P+0x2>
    2c22:	80 95       	com	r24
    2c24:	90 95       	com	r25
    2c26:	8e 0f       	add	r24, r30
    2c28:	9f 1f       	adc	r25, r31
    2c2a:	08 95       	ret

00002c2c <strnlen>:
    2c2c:	fc 01       	movw	r30, r24
    2c2e:	61 50       	subi	r22, 0x01	; 1
    2c30:	70 40       	sbci	r23, 0x00	; 0
    2c32:	01 90       	ld	r0, Z+
    2c34:	01 10       	cpse	r0, r1
    2c36:	d8 f7       	brcc	.-10     	; 0x2c2e <strnlen+0x2>
    2c38:	80 95       	com	r24
    2c3a:	90 95       	com	r25
    2c3c:	8e 0f       	add	r24, r30
    2c3e:	9f 1f       	adc	r25, r31
    2c40:	08 95       	ret

00002c42 <fputc>:
    2c42:	0f 93       	push	r16
    2c44:	1f 93       	push	r17
    2c46:	cf 93       	push	r28
    2c48:	df 93       	push	r29
    2c4a:	18 2f       	mov	r17, r24
    2c4c:	09 2f       	mov	r16, r25
    2c4e:	eb 01       	movw	r28, r22
    2c50:	8b 81       	ldd	r24, Y+3	; 0x03
    2c52:	81 fd       	sbrc	r24, 1
    2c54:	03 c0       	rjmp	.+6      	; 0x2c5c <fputc+0x1a>
    2c56:	8f ef       	ldi	r24, 0xFF	; 255
    2c58:	9f ef       	ldi	r25, 0xFF	; 255
    2c5a:	20 c0       	rjmp	.+64     	; 0x2c9c <fputc+0x5a>
    2c5c:	82 ff       	sbrs	r24, 2
    2c5e:	10 c0       	rjmp	.+32     	; 0x2c80 <fputc+0x3e>
    2c60:	4e 81       	ldd	r20, Y+6	; 0x06
    2c62:	5f 81       	ldd	r21, Y+7	; 0x07
    2c64:	2c 81       	ldd	r18, Y+4	; 0x04
    2c66:	3d 81       	ldd	r19, Y+5	; 0x05
    2c68:	42 17       	cp	r20, r18
    2c6a:	53 07       	cpc	r21, r19
    2c6c:	7c f4       	brge	.+30     	; 0x2c8c <fputc+0x4a>
    2c6e:	e8 81       	ld	r30, Y
    2c70:	f9 81       	ldd	r31, Y+1	; 0x01
    2c72:	9f 01       	movw	r18, r30
    2c74:	2f 5f       	subi	r18, 0xFF	; 255
    2c76:	3f 4f       	sbci	r19, 0xFF	; 255
    2c78:	39 83       	std	Y+1, r19	; 0x01
    2c7a:	28 83       	st	Y, r18
    2c7c:	10 83       	st	Z, r17
    2c7e:	06 c0       	rjmp	.+12     	; 0x2c8c <fputc+0x4a>
    2c80:	e8 85       	ldd	r30, Y+8	; 0x08
    2c82:	f9 85       	ldd	r31, Y+9	; 0x09
    2c84:	81 2f       	mov	r24, r17
    2c86:	09 95       	icall
    2c88:	89 2b       	or	r24, r25
    2c8a:	29 f7       	brne	.-54     	; 0x2c56 <fputc+0x14>
    2c8c:	2e 81       	ldd	r18, Y+6	; 0x06
    2c8e:	3f 81       	ldd	r19, Y+7	; 0x07
    2c90:	2f 5f       	subi	r18, 0xFF	; 255
    2c92:	3f 4f       	sbci	r19, 0xFF	; 255
    2c94:	3f 83       	std	Y+7, r19	; 0x07
    2c96:	2e 83       	std	Y+6, r18	; 0x06
    2c98:	81 2f       	mov	r24, r17
    2c9a:	90 2f       	mov	r25, r16
    2c9c:	df 91       	pop	r29
    2c9e:	cf 91       	pop	r28
    2ca0:	1f 91       	pop	r17
    2ca2:	0f 91       	pop	r16
    2ca4:	08 95       	ret

00002ca6 <__ultoa_invert>:
    2ca6:	fa 01       	movw	r30, r20
    2ca8:	aa 27       	eor	r26, r26
    2caa:	28 30       	cpi	r18, 0x08	; 8
    2cac:	51 f1       	breq	.+84     	; 0x2d02 <__ultoa_invert+0x5c>
    2cae:	20 31       	cpi	r18, 0x10	; 16
    2cb0:	81 f1       	breq	.+96     	; 0x2d12 <__ultoa_invert+0x6c>
    2cb2:	e8 94       	clt
    2cb4:	6f 93       	push	r22
    2cb6:	6e 7f       	andi	r22, 0xFE	; 254
    2cb8:	6e 5f       	subi	r22, 0xFE	; 254
    2cba:	7f 4f       	sbci	r23, 0xFF	; 255
    2cbc:	8f 4f       	sbci	r24, 0xFF	; 255
    2cbe:	9f 4f       	sbci	r25, 0xFF	; 255
    2cc0:	af 4f       	sbci	r26, 0xFF	; 255
    2cc2:	b1 e0       	ldi	r27, 0x01	; 1
    2cc4:	3e d0       	rcall	.+124    	; 0x2d42 <__ultoa_invert+0x9c>
    2cc6:	b4 e0       	ldi	r27, 0x04	; 4
    2cc8:	3c d0       	rcall	.+120    	; 0x2d42 <__ultoa_invert+0x9c>
    2cca:	67 0f       	add	r22, r23
    2ccc:	78 1f       	adc	r23, r24
    2cce:	89 1f       	adc	r24, r25
    2cd0:	9a 1f       	adc	r25, r26
    2cd2:	a1 1d       	adc	r26, r1
    2cd4:	68 0f       	add	r22, r24
    2cd6:	79 1f       	adc	r23, r25
    2cd8:	8a 1f       	adc	r24, r26
    2cda:	91 1d       	adc	r25, r1
    2cdc:	a1 1d       	adc	r26, r1
    2cde:	6a 0f       	add	r22, r26
    2ce0:	71 1d       	adc	r23, r1
    2ce2:	81 1d       	adc	r24, r1
    2ce4:	91 1d       	adc	r25, r1
    2ce6:	a1 1d       	adc	r26, r1
    2ce8:	20 d0       	rcall	.+64     	; 0x2d2a <__ultoa_invert+0x84>
    2cea:	09 f4       	brne	.+2      	; 0x2cee <__ultoa_invert+0x48>
    2cec:	68 94       	set
    2cee:	3f 91       	pop	r19
    2cf0:	2a e0       	ldi	r18, 0x0A	; 10
    2cf2:	26 9f       	mul	r18, r22
    2cf4:	11 24       	eor	r1, r1
    2cf6:	30 19       	sub	r19, r0
    2cf8:	30 5d       	subi	r19, 0xD0	; 208
    2cfa:	31 93       	st	Z+, r19
    2cfc:	de f6       	brtc	.-74     	; 0x2cb4 <__ultoa_invert+0xe>
    2cfe:	cf 01       	movw	r24, r30
    2d00:	08 95       	ret
    2d02:	46 2f       	mov	r20, r22
    2d04:	47 70       	andi	r20, 0x07	; 7
    2d06:	40 5d       	subi	r20, 0xD0	; 208
    2d08:	41 93       	st	Z+, r20
    2d0a:	b3 e0       	ldi	r27, 0x03	; 3
    2d0c:	0f d0       	rcall	.+30     	; 0x2d2c <__ultoa_invert+0x86>
    2d0e:	c9 f7       	brne	.-14     	; 0x2d02 <__ultoa_invert+0x5c>
    2d10:	f6 cf       	rjmp	.-20     	; 0x2cfe <__ultoa_invert+0x58>
    2d12:	46 2f       	mov	r20, r22
    2d14:	4f 70       	andi	r20, 0x0F	; 15
    2d16:	40 5d       	subi	r20, 0xD0	; 208
    2d18:	4a 33       	cpi	r20, 0x3A	; 58
    2d1a:	18 f0       	brcs	.+6      	; 0x2d22 <__ultoa_invert+0x7c>
    2d1c:	49 5d       	subi	r20, 0xD9	; 217
    2d1e:	31 fd       	sbrc	r19, 1
    2d20:	40 52       	subi	r20, 0x20	; 32
    2d22:	41 93       	st	Z+, r20
    2d24:	02 d0       	rcall	.+4      	; 0x2d2a <__ultoa_invert+0x84>
    2d26:	a9 f7       	brne	.-22     	; 0x2d12 <__ultoa_invert+0x6c>
    2d28:	ea cf       	rjmp	.-44     	; 0x2cfe <__ultoa_invert+0x58>
    2d2a:	b4 e0       	ldi	r27, 0x04	; 4
    2d2c:	a6 95       	lsr	r26
    2d2e:	97 95       	ror	r25
    2d30:	87 95       	ror	r24
    2d32:	77 95       	ror	r23
    2d34:	67 95       	ror	r22
    2d36:	ba 95       	dec	r27
    2d38:	c9 f7       	brne	.-14     	; 0x2d2c <__ultoa_invert+0x86>
    2d3a:	00 97       	sbiw	r24, 0x00	; 0
    2d3c:	61 05       	cpc	r22, r1
    2d3e:	71 05       	cpc	r23, r1
    2d40:	08 95       	ret
    2d42:	9b 01       	movw	r18, r22
    2d44:	ac 01       	movw	r20, r24
    2d46:	0a 2e       	mov	r0, r26
    2d48:	06 94       	lsr	r0
    2d4a:	57 95       	ror	r21
    2d4c:	47 95       	ror	r20
    2d4e:	37 95       	ror	r19
    2d50:	27 95       	ror	r18
    2d52:	ba 95       	dec	r27
    2d54:	c9 f7       	brne	.-14     	; 0x2d48 <__ultoa_invert+0xa2>
    2d56:	62 0f       	add	r22, r18
    2d58:	73 1f       	adc	r23, r19
    2d5a:	84 1f       	adc	r24, r20
    2d5c:	95 1f       	adc	r25, r21
    2d5e:	a0 1d       	adc	r26, r0
    2d60:	08 95       	ret

00002d62 <__prologue_saves__>:
    2d62:	2f 92       	push	r2
    2d64:	3f 92       	push	r3
    2d66:	4f 92       	push	r4
    2d68:	5f 92       	push	r5
    2d6a:	6f 92       	push	r6
    2d6c:	7f 92       	push	r7
    2d6e:	8f 92       	push	r8
    2d70:	9f 92       	push	r9
    2d72:	af 92       	push	r10
    2d74:	bf 92       	push	r11
    2d76:	cf 92       	push	r12
    2d78:	df 92       	push	r13
    2d7a:	ef 92       	push	r14
    2d7c:	ff 92       	push	r15
    2d7e:	0f 93       	push	r16
    2d80:	1f 93       	push	r17
    2d82:	cf 93       	push	r28
    2d84:	df 93       	push	r29
    2d86:	cd b7       	in	r28, 0x3d	; 61
    2d88:	de b7       	in	r29, 0x3e	; 62
    2d8a:	ca 1b       	sub	r28, r26
    2d8c:	db 0b       	sbc	r29, r27
    2d8e:	0f b6       	in	r0, 0x3f	; 63
    2d90:	f8 94       	cli
    2d92:	de bf       	out	0x3e, r29	; 62
    2d94:	0f be       	out	0x3f, r0	; 63
    2d96:	cd bf       	out	0x3d, r28	; 61
    2d98:	09 94       	ijmp

00002d9a <__epilogue_restores__>:
    2d9a:	2a 88       	ldd	r2, Y+18	; 0x12
    2d9c:	39 88       	ldd	r3, Y+17	; 0x11
    2d9e:	48 88       	ldd	r4, Y+16	; 0x10
    2da0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2da2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2da4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2da6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2da8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2daa:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dac:	b9 84       	ldd	r11, Y+9	; 0x09
    2dae:	c8 84       	ldd	r12, Y+8	; 0x08
    2db0:	df 80       	ldd	r13, Y+7	; 0x07
    2db2:	ee 80       	ldd	r14, Y+6	; 0x06
    2db4:	fd 80       	ldd	r15, Y+5	; 0x05
    2db6:	0c 81       	ldd	r16, Y+4	; 0x04
    2db8:	1b 81       	ldd	r17, Y+3	; 0x03
    2dba:	aa 81       	ldd	r26, Y+2	; 0x02
    2dbc:	b9 81       	ldd	r27, Y+1	; 0x01
    2dbe:	ce 0f       	add	r28, r30
    2dc0:	d1 1d       	adc	r29, r1
    2dc2:	0f b6       	in	r0, 0x3f	; 63
    2dc4:	f8 94       	cli
    2dc6:	de bf       	out	0x3e, r29	; 62
    2dc8:	0f be       	out	0x3f, r0	; 63
    2dca:	cd bf       	out	0x3d, r28	; 61
    2dcc:	ed 01       	movw	r28, r26
    2dce:	08 95       	ret

00002dd0 <_exit>:
    2dd0:	f8 94       	cli

00002dd2 <__stop_program>:
    2dd2:	ff cf       	rjmp	.-2      	; 0x2dd2 <__stop_program>
