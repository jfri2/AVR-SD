
AVR-SD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000578  00800100  00002cd6  00002d6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002cd6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000237  00800678  00800678  000032e2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000032e2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000188  00000000  00000000  0000333e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000031a7  00000000  00000000  000034c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000877  00000000  00000000  0000666d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b6b  00000000  00000000  00006ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000064c  00000000  00000000  00007a50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000996  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002bc5  00000000  00000000  00008a32  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b8  00000000  00000000  0000b5f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
       4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
       8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
       c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      68:	62 0f       	add	r22, r18
      6a:	8d 0f       	add	r24, r29
      6c:	eb 0f       	add	r30, r27
      6e:	b3 10       	cpse	r11, r3
      70:	b3 10       	cpse	r11, r3
      72:	2e 10       	cpse	r2, r14
      74:	38 10       	cpse	r3, r8
      76:	38 10       	cpse	r3, r8
      78:	38 10       	cpse	r3, r8
      7a:	b0 10       	cpse	r11, r0

0000007c <__trampolines_end>:
      7c:	52 4f       	sbci	r21, 0xF2	; 242
      7e:	4f 54       	subi	r20, 0x4F	; 79
	...

00000081 <__c.1821>:
      81:	44 49 52 00 00                                      DIR..

00000086 <__ctors_end>:
      86:	11 24       	eor	r1, r1
      88:	1f be       	out	0x3f, r1	; 63
      8a:	cf ef       	ldi	r28, 0xFF	; 255
      8c:	d8 e0       	ldi	r29, 0x08	; 8
      8e:	de bf       	out	0x3e, r29	; 62
      90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
      92:	16 e0       	ldi	r17, 0x06	; 6
      94:	a0 e0       	ldi	r26, 0x00	; 0
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	e6 ed       	ldi	r30, 0xD6	; 214
      9a:	fc e2       	ldi	r31, 0x2C	; 44
      9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
      9e:	05 90       	lpm	r0, Z+
      a0:	0d 92       	st	X+, r0
      a2:	a8 37       	cpi	r26, 0x78	; 120
      a4:	b1 07       	cpc	r27, r17
      a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
      a8:	28 e0       	ldi	r18, 0x08	; 8
      aa:	a8 e7       	ldi	r26, 0x78	; 120
      ac:	b6 e0       	ldi	r27, 0x06	; 6
      ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
      b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
      b2:	af 3a       	cpi	r26, 0xAF	; 175
      b4:	b2 07       	cpc	r27, r18
      b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
      b8:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <main>
      bc:	0c 94 69 16 	jmp	0x2cd2	; 0x2cd2 <_exit>

000000c0 <__bad_interrupt>:
      c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <getFirstSector>:
//Function: to calculate first sector address of any given cluster
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
      c4:	cf 92       	push	r12
      c6:	df 92       	push	r13
      c8:	ef 92       	push	r14
      ca:	ff 92       	push	r15
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
      cc:	a0 91 92 08 	lds	r26, 0x0892
      d0:	b0 91 93 08 	lds	r27, 0x0893
      d4:	c0 90 7c 06 	lds	r12, 0x067C
      d8:	d0 90 7d 06 	lds	r13, 0x067D
      dc:	e0 90 7e 06 	lds	r14, 0x067E
      e0:	f0 90 7f 06 	lds	r15, 0x067F
      e4:	9b 01       	movw	r18, r22
      e6:	ac 01       	movw	r20, r24
      e8:	22 50       	subi	r18, 0x02	; 2
      ea:	31 09       	sbc	r19, r1
      ec:	41 09       	sbc	r20, r1
      ee:	51 09       	sbc	r21, r1
      f0:	0e 94 67 13 	call	0x26ce	; 0x26ce <__muluhisi3>
      f4:	6c 0d       	add	r22, r12
      f6:	7d 1d       	adc	r23, r13
      f8:	8e 1d       	adc	r24, r14
      fa:	9f 1d       	adc	r25, r15
}
      fc:	ff 90       	pop	r15
      fe:	ef 90       	pop	r14
     100:	df 90       	pop	r13
     102:	cf 90       	pop	r12
     104:	08 95       	ret

00000106 <getSetNextCluster>:
//return: next cluster number, if if argument#2 = GET, else 0
//****************************************************************************
unsigned long getSetNextCluster (unsigned long clusterNumber,
                                 unsigned char get_set,
                                 unsigned long clusterEntry)
{
     106:	4f 92       	push	r4
     108:	5f 92       	push	r5
     10a:	6f 92       	push	r6
     10c:	7f 92       	push	r7
     10e:	8f 92       	push	r8
     110:	9f 92       	push	r9
     112:	af 92       	push	r10
     114:	bf 92       	push	r11
     116:	cf 92       	push	r12
     118:	df 92       	push	r13
     11a:	ef 92       	push	r14
     11c:	ff 92       	push	r15
     11e:	0f 93       	push	r16
     120:	1f 93       	push	r17
     122:	cf 93       	push	r28
     124:	df 93       	push	r29
     126:	c4 2f       	mov	r28, r20
     128:	28 01       	movw	r4, r16
     12a:	39 01       	movw	r6, r18
unsigned long *FATEntryValue;
unsigned long FATEntrySector;
unsigned char retry = 0;

//get sector number of the cluster entry in the FAT
FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;
     12c:	40 91 9d 08 	lds	r20, 0x089D
     130:	50 91 9e 08 	lds	r21, 0x089E
     134:	4b 01       	movw	r8, r22
     136:	5c 01       	movw	r10, r24
     138:	88 0c       	add	r8, r8
     13a:	99 1c       	adc	r9, r9
     13c:	aa 1c       	adc	r10, r10
     13e:	bb 1c       	adc	r11, r11
     140:	88 0c       	add	r8, r8
     142:	99 1c       	adc	r9, r9
     144:	aa 1c       	adc	r10, r10
     146:	bb 1c       	adc	r11, r11
     148:	20 91 84 06 	lds	r18, 0x0684
     14c:	30 91 85 06 	lds	r19, 0x0685
     150:	c0 90 94 08 	lds	r12, 0x0894
     154:	d0 90 95 08 	lds	r13, 0x0895
     158:	e0 90 96 08 	lds	r14, 0x0896
     15c:	f0 90 97 08 	lds	r15, 0x0897
     160:	c4 0e       	add	r12, r20
     162:	d5 1e       	adc	r13, r21
     164:	e1 1c       	adc	r14, r1
     166:	f1 1c       	adc	r15, r1
     168:	40 e0       	ldi	r20, 0x00	; 0
     16a:	50 e0       	ldi	r21, 0x00	; 0
     16c:	c5 01       	movw	r24, r10
     16e:	b4 01       	movw	r22, r8
     170:	0e 94 30 13 	call	0x2660	; 0x2660 <__udivmodsi4>
     174:	c2 0e       	add	r12, r18
     176:	d3 1e       	adc	r13, r19
     178:	e4 1e       	adc	r14, r20
     17a:	f5 1e       	adc	r15, r21

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
     17c:	20 91 84 06 	lds	r18, 0x0684
     180:	30 91 85 06 	lds	r19, 0x0685
     184:	40 e0       	ldi	r20, 0x00	; 0
     186:	50 e0       	ldi	r21, 0x00	; 0
     188:	c5 01       	movw	r24, r10
     18a:	b4 01       	movw	r22, r8
     18c:	0e 94 30 13 	call	0x2660	; 0x2660 <__udivmodsi4>
     190:	4b 01       	movw	r8, r22
     192:	5c 01       	movw	r10, r24
     194:	da e0       	ldi	r29, 0x0A	; 10

//read the sector into a buffer
while(retry <10)
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}
     196:	c7 01       	movw	r24, r14
     198:	b6 01       	movw	r22, r12
     19a:	0e 94 55 12 	call	0x24aa	; 0x24aa <SD_readSingleBlock>
     19e:	88 23       	and	r24, r24
     1a0:	11 f0       	breq	.+4      	; 0x1a6 <getSetNextCluster+0xa0>
     1a2:	d1 50       	subi	r29, 0x01	; 1

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);

//read the sector into a buffer
while(retry <10)
     1a4:	c1 f7       	brne	.-16     	; 0x196 <getSetNextCluster+0x90>
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}

//get the cluster address from the buffer
FATEntryValue = (unsigned long *) &buffer[FATEntryOffset];
     1a6:	f4 01       	movw	r30, r8
     1a8:	ee 56       	subi	r30, 0x6E	; 110
     1aa:	f9 4f       	sbci	r31, 0xF9	; 249

if(get_set == GET)
     1ac:	c1 11       	cpse	r28, r1
     1ae:	08 c0       	rjmp	.+16     	; 0x1c0 <getSetNextCluster+0xba>
  return ((*FATEntryValue) & 0x0fffffff);
     1b0:	80 81       	ld	r24, Z
     1b2:	91 81       	ldd	r25, Z+1	; 0x01
     1b4:	a2 81       	ldd	r26, Z+2	; 0x02
     1b6:	b3 81       	ldd	r27, Z+3	; 0x03
     1b8:	bc 01       	movw	r22, r24
     1ba:	cd 01       	movw	r24, r26
     1bc:	9f 70       	andi	r25, 0x0F	; 15
     1be:	0b c0       	rjmp	.+22     	; 0x1d6 <getSetNextCluster+0xd0>


*FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
     1c0:	40 82       	st	Z, r4
     1c2:	51 82       	std	Z+1, r5	; 0x01
     1c4:	62 82       	std	Z+2, r6	; 0x02
     1c6:	73 82       	std	Z+3, r7	; 0x03

SD_writeSingleBlock(FATEntrySector);
     1c8:	c7 01       	movw	r24, r14
     1ca:	b6 01       	movw	r22, r12
     1cc:	0e 94 84 12 	call	0x2508	; 0x2508 <SD_writeSingleBlock>

return (0);
     1d0:	60 e0       	ldi	r22, 0x00	; 0
     1d2:	70 e0       	ldi	r23, 0x00	; 0
     1d4:	cb 01       	movw	r24, r22
}
     1d6:	df 91       	pop	r29
     1d8:	cf 91       	pop	r28
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	df 90       	pop	r13
     1e4:	cf 90       	pop	r12
     1e6:	bf 90       	pop	r11
     1e8:	af 90       	pop	r10
     1ea:	9f 90       	pop	r9
     1ec:	8f 90       	pop	r8
     1ee:	7f 90       	pop	r7
     1f0:	6f 90       	pop	r6
     1f2:	5f 90       	pop	r5
     1f4:	4f 90       	pop	r4
     1f6:	08 95       	ret

000001f8 <getSetFreeCluster>:
//return: next free cluster, if arg1 is NEXT_FREE & arg2 is GET
//        total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
//		  0xffffffff, if any error or if arg2 is SET
//********************************************************************************************
unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
{
     1f8:	cf 92       	push	r12
     1fa:	df 92       	push	r13
     1fc:	ef 92       	push	r14
     1fe:	ff 92       	push	r15
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	d8 2f       	mov	r29, r24
     206:	c6 2f       	mov	r28, r22
     208:	69 01       	movw	r12, r18
     20a:	7a 01       	movw	r14, r20
struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &buffer;
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);
     20c:	80 91 94 08 	lds	r24, 0x0894
     210:	90 91 95 08 	lds	r25, 0x0895
     214:	a0 91 96 08 	lds	r26, 0x0896
     218:	b0 91 97 08 	lds	r27, 0x0897
     21c:	bc 01       	movw	r22, r24
     21e:	cd 01       	movw	r24, r26
     220:	6f 5f       	subi	r22, 0xFF	; 255
     222:	7f 4f       	sbci	r23, 0xFF	; 255
     224:	8f 4f       	sbci	r24, 0xFF	; 255
     226:	9f 4f       	sbci	r25, 0xFF	; 255
     228:	0e 94 55 12 	call	0x24aa	; 0x24aa <SD_readSingleBlock>

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
     22c:	40 91 92 06 	lds	r20, 0x0692
     230:	50 91 93 06 	lds	r21, 0x0693
     234:	60 91 94 06 	lds	r22, 0x0694
     238:	70 91 95 06 	lds	r23, 0x0695
     23c:	42 35       	cpi	r20, 0x52	; 82
     23e:	52 45       	sbci	r21, 0x52	; 82
     240:	61 46       	sbci	r22, 0x61	; 97
     242:	71 44       	sbci	r23, 0x41	; 65
     244:	09 f0       	breq	.+2      	; 0x248 <getSetFreeCluster+0x50>
     246:	59 c0       	rjmp	.+178    	; 0x2fa <getSetFreeCluster+0x102>
     248:	40 91 76 08 	lds	r20, 0x0876
     24c:	50 91 77 08 	lds	r21, 0x0877
     250:	60 91 78 08 	lds	r22, 0x0878
     254:	70 91 79 08 	lds	r23, 0x0879
     258:	42 37       	cpi	r20, 0x72	; 114
     25a:	52 47       	sbci	r21, 0x72	; 114
     25c:	61 44       	sbci	r22, 0x41	; 65
     25e:	71 46       	sbci	r23, 0x61	; 97
     260:	09 f0       	breq	.+2      	; 0x264 <getSetFreeCluster+0x6c>
     262:	4f c0       	rjmp	.+158    	; 0x302 <getSetFreeCluster+0x10a>
     264:	40 91 8e 08 	lds	r20, 0x088E
     268:	50 91 8f 08 	lds	r21, 0x088F
     26c:	60 91 90 08 	lds	r22, 0x0890
     270:	70 91 91 08 	lds	r23, 0x0891
     274:	41 15       	cp	r20, r1
     276:	51 05       	cpc	r21, r1
     278:	65 45       	sbci	r22, 0x55	; 85
     27a:	7a 4a       	sbci	r23, 0xAA	; 170
     27c:	09 f0       	breq	.+2      	; 0x280 <getSetFreeCluster+0x88>
     27e:	45 c0       	rjmp	.+138    	; 0x30a <getSetFreeCluster+0x112>
  return 0xffffffff;

 if(get_set == GET)
     280:	c1 11       	cpse	r28, r1
     282:	14 c0       	rjmp	.+40     	; 0x2ac <getSetFreeCluster+0xb4>
 {
   if(totOrNext == TOTAL_FREE)
     284:	d1 30       	cpi	r29, 0x01	; 1
     286:	49 f4       	brne	.+18     	; 0x29a <getSetFreeCluster+0xa2>
      return(FS->freeClusterCount);
     288:	60 91 7a 08 	lds	r22, 0x087A
     28c:	70 91 7b 08 	lds	r23, 0x087B
     290:	80 91 7c 08 	lds	r24, 0x087C
     294:	90 91 7d 08 	lds	r25, 0x087D
     298:	3b c0       	rjmp	.+118    	; 0x310 <getSetFreeCluster+0x118>
   else // when totOrNext = NEXT_FREE
      return(FS->nextFreeCluster);
     29a:	60 91 7e 08 	lds	r22, 0x087E
     29e:	70 91 7f 08 	lds	r23, 0x087F
     2a2:	80 91 80 08 	lds	r24, 0x0880
     2a6:	90 91 81 08 	lds	r25, 0x0881
     2aa:	32 c0       	rjmp	.+100    	; 0x310 <getSetFreeCluster+0x118>
 }
 else
 {
   if(totOrNext == TOTAL_FREE)
     2ac:	d1 30       	cpi	r29, 0x01	; 1
     2ae:	49 f4       	brne	.+18     	; 0x2c2 <getSetFreeCluster+0xca>
      FS->freeClusterCount = FSEntry;
     2b0:	c0 92 7a 08 	sts	0x087A, r12
     2b4:	d0 92 7b 08 	sts	0x087B, r13
     2b8:	e0 92 7c 08 	sts	0x087C, r14
     2bc:	f0 92 7d 08 	sts	0x087D, r15
     2c0:	08 c0       	rjmp	.+16     	; 0x2d2 <getSetFreeCluster+0xda>
   else // when totOrNext = NEXT_FREE
	  FS->nextFreeCluster = FSEntry;
     2c2:	c0 92 7e 08 	sts	0x087E, r12
     2c6:	d0 92 7f 08 	sts	0x087F, r13
     2ca:	e0 92 80 08 	sts	0x0880, r14
     2ce:	f0 92 81 08 	sts	0x0881, r15
 
   error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
     2d2:	80 91 94 08 	lds	r24, 0x0894
     2d6:	90 91 95 08 	lds	r25, 0x0895
     2da:	a0 91 96 08 	lds	r26, 0x0896
     2de:	b0 91 97 08 	lds	r27, 0x0897
     2e2:	bc 01       	movw	r22, r24
     2e4:	cd 01       	movw	r24, r26
     2e6:	6f 5f       	subi	r22, 0xFF	; 255
     2e8:	7f 4f       	sbci	r23, 0xFF	; 255
     2ea:	8f 4f       	sbci	r24, 0xFF	; 255
     2ec:	9f 4f       	sbci	r25, 0xFF	; 255
     2ee:	0e 94 84 12 	call	0x2508	; 0x2508 <SD_writeSingleBlock>
 }
 return 0xffffffff;
     2f2:	6f ef       	ldi	r22, 0xFF	; 255
     2f4:	7f ef       	ldi	r23, 0xFF	; 255
     2f6:	cb 01       	movw	r24, r22
     2f8:	0b c0       	rjmp	.+22     	; 0x310 <getSetFreeCluster+0x118>
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
  return 0xffffffff;
     2fa:	6f ef       	ldi	r22, 0xFF	; 255
     2fc:	7f ef       	ldi	r23, 0xFF	; 255
     2fe:	cb 01       	movw	r24, r22
     300:	07 c0       	rjmp	.+14     	; 0x310 <getSetFreeCluster+0x118>
     302:	6f ef       	ldi	r22, 0xFF	; 255
     304:	7f ef       	ldi	r23, 0xFF	; 255
     306:	cb 01       	movw	r24, r22
     308:	03 c0       	rjmp	.+6      	; 0x310 <getSetFreeCluster+0x118>
     30a:	6f ef       	ldi	r22, 0xFF	; 255
     30c:	7f ef       	ldi	r23, 0xFF	; 255
     30e:	cb 01       	movw	r24, r22
	  FS->nextFreeCluster = FSEntry;
 
   error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
 }
 return 0xffffffff;
}
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	ff 90       	pop	r15
     316:	ef 90       	pop	r14
     318:	df 90       	pop	r13
     31a:	cf 90       	pop	r12
     31c:	08 95       	ret

0000031e <getBootSectorData>:
//parameters like bytesPerSector, sectorsPerCluster etc.
//Arguments: none
//return: none
//***************************************************************************
unsigned char getBootSectorData (void)
{
     31e:	cf 92       	push	r12
     320:	df 92       	push	r13
     322:	ef 92       	push	r14
     324:	ff 92       	push	r15
     326:	0f 93       	push	r16
     328:	1f 93       	push	r17
     32a:	cf 93       	push	r28
     32c:	df 93       	push	r29
struct BS_Structure *bpb; //mapping the buffer onto the structure
struct MBRinfo_Structure *mbr;
struct partitionInfo_Structure *partition;
unsigned long dataSectors;

unusedSectors = 0;
     32e:	10 92 94 08 	sts	0x0894, r1
     332:	10 92 95 08 	sts	0x0895, r1
     336:	10 92 96 08 	sts	0x0896, r1
     33a:	10 92 97 08 	sts	0x0897, r1

SD_readSingleBlock(0);
     33e:	60 e0       	ldi	r22, 0x00	; 0
     340:	70 e0       	ldi	r23, 0x00	; 0
     342:	cb 01       	movw	r24, r22
     344:	0e 94 55 12 	call	0x24aa	; 0x24aa <SD_readSingleBlock>
bpb = (struct BS_Structure *)buffer;

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
     348:	80 91 92 06 	lds	r24, 0x0692
     34c:	8d 7f       	andi	r24, 0xFD	; 253
     34e:	89 3e       	cpi	r24, 0xE9	; 233
     350:	01 f1       	breq	.+64     	; 0x392 <getBootSectorData+0x74>
{
  mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
     352:	80 91 90 08 	lds	r24, 0x0890
     356:	90 91 91 08 	lds	r25, 0x0891
     35a:	85 35       	cpi	r24, 0x55	; 85
     35c:	9a 4a       	sbci	r25, 0xAA	; 170
     35e:	09 f0       	breq	.+2      	; 0x362 <getBootSectorData+0x44>
     360:	aa c0       	rjmp	.+340    	; 0x4b6 <getBootSectorData+0x198>
  	
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
     362:	60 91 58 08 	lds	r22, 0x0858
     366:	70 91 59 08 	lds	r23, 0x0859
     36a:	80 91 5a 08 	lds	r24, 0x085A
     36e:	90 91 5b 08 	lds	r25, 0x085B
     372:	60 93 94 08 	sts	0x0894, r22
     376:	70 93 95 08 	sts	0x0895, r23
     37a:	80 93 96 08 	sts	0x0896, r24
     37e:	90 93 97 08 	sts	0x0897, r25
  
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
     382:	0e 94 55 12 	call	0x24aa	; 0x24aa <SD_readSingleBlock>
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
     386:	80 91 92 06 	lds	r24, 0x0692
     38a:	8d 7f       	andi	r24, 0xFD	; 253
     38c:	89 3e       	cpi	r24, 0xE9	; 233
     38e:	09 f0       	breq	.+2      	; 0x392 <getBootSectorData+0x74>
     390:	94 c0       	rjmp	.+296    	; 0x4ba <getBootSectorData+0x19c>
}

bytesPerSector = bpb->bytesPerSector;
     392:	80 91 9d 06 	lds	r24, 0x069D
     396:	90 91 9e 06 	lds	r25, 0x069E
     39a:	90 93 85 06 	sts	0x0685, r25
     39e:	80 93 84 06 	sts	0x0684, r24
//transmitHex(INT, bytesPerSector); transmitByte(' ');
sectorPerCluster = bpb->sectorPerCluster;
     3a2:	80 91 9f 06 	lds	r24, 0x069F
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	90 93 93 08 	sts	0x0893, r25
     3ac:	80 93 92 08 	sts	0x0892, r24
//transmitHex(INT, sectorPerCluster); transmitByte(' ');
reservedSectorCount = bpb->reservedSectorCount;
     3b0:	e0 91 a0 06 	lds	r30, 0x06A0
     3b4:	f0 91 a1 06 	lds	r31, 0x06A1
     3b8:	f0 93 9e 08 	sts	0x089E, r31
     3bc:	e0 93 9d 08 	sts	0x089D, r30
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
     3c0:	80 91 be 06 	lds	r24, 0x06BE
     3c4:	90 91 bf 06 	lds	r25, 0x06BF
     3c8:	a0 91 c0 06 	lds	r26, 0x06C0
     3cc:	b0 91 c1 06 	lds	r27, 0x06C1
     3d0:	80 93 8a 06 	sts	0x068A, r24
     3d4:	90 93 8b 06 	sts	0x068B, r25
     3d8:	a0 93 8c 06 	sts	0x068C, r26
     3dc:	b0 93 8d 06 	sts	0x068D, r27
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
     3e0:	c0 91 9d 08 	lds	r28, 0x089D
     3e4:	d0 91 9e 08 	lds	r29, 0x089E
     3e8:	a0 91 a2 06 	lds	r26, 0x06A2
     3ec:	20 91 b6 06 	lds	r18, 0x06B6
     3f0:	30 91 b7 06 	lds	r19, 0x06B7
     3f4:	40 91 b8 06 	lds	r20, 0x06B8
     3f8:	50 91 b9 06 	lds	r21, 0x06B9
     3fc:	b0 e0       	ldi	r27, 0x00	; 0
     3fe:	0e 94 67 13 	call	0x26ce	; 0x26ce <__muluhisi3>
     402:	00 91 ae 06 	lds	r16, 0x06AE
     406:	10 91 af 06 	lds	r17, 0x06AF
     40a:	20 91 b0 06 	lds	r18, 0x06B0
     40e:	30 91 b1 06 	lds	r19, 0x06B1
     412:	0c 0f       	add	r16, r28
     414:	1d 1f       	adc	r17, r29
     416:	21 1d       	adc	r18, r1
     418:	31 1d       	adc	r19, r1
     41a:	06 0f       	add	r16, r22
     41c:	17 1f       	adc	r17, r23
     41e:	28 1f       	adc	r18, r24
     420:	39 1f       	adc	r19, r25
     422:	00 93 7c 06 	sts	0x067C, r16
     426:	10 93 7d 06 	sts	0x067D, r17
     42a:	20 93 7e 06 	sts	0x067E, r18
     42e:	30 93 7f 06 	sts	0x067F, r19

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
     432:	40 91 92 08 	lds	r20, 0x0892
     436:	50 91 93 08 	lds	r21, 0x0893
reservedSectorCount = bpb->reservedSectorCount;
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
     43a:	00 91 b2 06 	lds	r16, 0x06B2
     43e:	10 91 b3 06 	lds	r17, 0x06B3
     442:	20 91 b4 06 	lds	r18, 0x06B4
     446:	30 91 b5 06 	lds	r19, 0x06B5
     44a:	0e 1b       	sub	r16, r30
     44c:	1f 0b       	sbc	r17, r31
     44e:	21 09       	sbc	r18, r1
     450:	31 09       	sbc	r19, r1
//transmitHex(INT, sectorPerCluster); transmitByte(' ');
reservedSectorCount = bpb->reservedSectorCount;
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);

dataSectors = bpb->totalSectors_F32
     452:	68 01       	movw	r12, r16
     454:	79 01       	movw	r14, r18
     456:	c6 1a       	sub	r12, r22
     458:	d7 0a       	sbc	r13, r23
     45a:	e8 0a       	sbc	r14, r24
     45c:	f9 0a       	sbc	r15, r25
     45e:	c7 01       	movw	r24, r14
     460:	b6 01       	movw	r22, r12
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
     462:	9a 01       	movw	r18, r20
     464:	40 e0       	ldi	r20, 0x00	; 0
     466:	50 e0       	ldi	r21, 0x00	; 0
     468:	0e 94 30 13 	call	0x2660	; 0x2660 <__udivmodsi4>
     46c:	20 93 86 06 	sts	0x0686, r18
     470:	30 93 87 06 	sts	0x0687, r19
     474:	40 93 88 06 	sts	0x0688, r20
     478:	50 93 89 06 	sts	0x0689, r21
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     47c:	20 e0       	ldi	r18, 0x00	; 0
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	a9 01       	movw	r20, r18
     482:	60 e0       	ldi	r22, 0x00	; 0
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <getSetFreeCluster>
     48a:	00 91 86 06 	lds	r16, 0x0686
     48e:	10 91 87 06 	lds	r17, 0x0687
     492:	20 91 88 06 	lds	r18, 0x0688
     496:	30 91 89 06 	lds	r19, 0x0689
     49a:	06 17       	cp	r16, r22
     49c:	17 07       	cpc	r17, r23
     49e:	28 07       	cpc	r18, r24
     4a0:	39 07       	cpc	r19, r25
     4a2:	20 f4       	brcc	.+8      	; 0x4ac <getBootSectorData+0x18e>
     freeClusterCountUpdated = 0;
     4a4:	10 92 a4 08 	sts	0x08A4, r1
else
	 freeClusterCountUpdated = 1;
return 0;
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	08 c0       	rjmp	.+16     	; 0x4bc <getBootSectorData+0x19e>
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	80 93 a4 08 	sts	0x08A4, r24
return 0;
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	03 c0       	rjmp	.+6      	; 0x4bc <getBootSectorData+0x19e>

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
{
  mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	01 c0       	rjmp	.+2      	; 0x4bc <getBootSectorData+0x19e>
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
  
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
     4ba:	81 e0       	ldi	r24, 0x01	; 1
if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
return 0;
}
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	1f 91       	pop	r17
     4c2:	0f 91       	pop	r16
     4c4:	ff 90       	pop	r15
     4c6:	ef 90       	pop	r14
     4c8:	df 90       	pop	r13
     4ca:	cf 90       	pop	r12
     4cc:	08 95       	ret

000004ce <convertFileName>:
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
{
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
     4d6:	2b 97       	sbiw	r28, 0x0b	; 11
     4d8:	0f b6       	in	r0, 0x3f	; 63
     4da:	f8 94       	cli
     4dc:	de bf       	out	0x3e, r29	; 62
     4de:	0f be       	out	0x3f, r0	; 63
     4e0:	cd bf       	out	0x3d, r28	; 61
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
if(fileName[j] == '.') break;
     4e2:	fc 01       	movw	r30, r24
     4e4:	20 81       	ld	r18, Z
     4e6:	2e 32       	cpi	r18, 0x2E	; 46
     4e8:	71 f0       	breq	.+28     	; 0x506 <convertFileName+0x38>
     4ea:	31 96       	adiw	r30, 0x01	; 1
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
     4ec:	31 e0       	ldi	r19, 0x01	; 1
if(fileName[j] == '.') break;
     4ee:	21 91       	ld	r18, Z+
     4f0:	2e 32       	cpi	r18, 0x2E	; 46
     4f2:	21 f0       	breq	.+8      	; 0x4fc <convertFileName+0x2e>
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
     4f4:	3f 5f       	subi	r19, 0xFF	; 255
     4f6:	3c 30       	cpi	r19, 0x0C	; 12
     4f8:	d1 f7       	brne	.-12     	; 0x4ee <convertFileName+0x20>
     4fa:	09 c0       	rjmp	.+18     	; 0x50e <convertFileName+0x40>
if(fileName[j] == '.') break;

if(j>8) {printf(("Invalid fileName..")); return 1;}
     4fc:	39 30       	cpi	r19, 0x09	; 9
     4fe:	38 f4       	brcc	.+14     	; 0x50e <convertFileName+0x40>

for(k=0; k<j; k++) //setting file name
     500:	31 11       	cpse	r19, r1
     502:	0f c0       	rjmp	.+30     	; 0x522 <convertFileName+0x54>
     504:	01 c0       	rjmp	.+2      	; 0x508 <convertFileName+0x3a>
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
     506:	30 e0       	ldi	r19, 0x00	; 0
if(fileName[j] == '.') break;

if(j>8) {printf(("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
     508:	23 2f       	mov	r18, r19
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';
     50a:	40 e2       	ldi	r20, 0x20	; 32
     50c:	18 c0       	rjmp	.+48     	; 0x53e <convertFileName+0x70>
unsigned char j, k;

for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {printf(("Invalid fileName..")); return 1;}
     50e:	8e e0       	ldi	r24, 0x0E	; 14
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	9f 93       	push	r25
     514:	8f 93       	push	r24
     516:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
     51a:	0f 90       	pop	r0
     51c:	0f 90       	pop	r0
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	56 c0       	rjmp	.+172    	; 0x5ce <convertFileName+0x100>
     522:	48 2f       	mov	r20, r24
     524:	de 01       	movw	r26, r28
     526:	11 96       	adiw	r26, 0x01	; 1

for(k=0; k<j; k++) //setting file name
     528:	e8 2f       	mov	r30, r24
     52a:	f9 2f       	mov	r31, r25
  fileNameFAT[k] = fileName[k];
     52c:	21 91       	ld	r18, Z+
     52e:	2d 93       	st	X+, r18
     530:	2e 2f       	mov	r18, r30
     532:	24 1b       	sub	r18, r20
for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {printf(("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
     534:	23 17       	cp	r18, r19
     536:	d0 f3       	brcs	.-12     	; 0x52c <convertFileName+0x5e>
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
     538:	38 30       	cpi	r19, 0x08	; 8
     53a:	30 f3       	brcs	.-52     	; 0x508 <convertFileName+0x3a>
     53c:	0a c0       	rjmp	.+20     	; 0x552 <convertFileName+0x84>
  fileNameFAT[k] = ' ';
     53e:	e1 e0       	ldi	r30, 0x01	; 1
     540:	f0 e0       	ldi	r31, 0x00	; 0
     542:	ec 0f       	add	r30, r28
     544:	fd 1f       	adc	r31, r29
     546:	e2 0f       	add	r30, r18
     548:	f1 1d       	adc	r31, r1
     54a:	40 83       	st	Z, r20
if(j>8) {printf(("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
     54c:	2f 5f       	subi	r18, 0xFF	; 255
     54e:	28 30       	cpi	r18, 0x08	; 8
     550:	b0 f3       	brcs	.-20     	; 0x53e <convertFileName+0x70>
  fileNameFAT[k] = ' ';

j++;
     552:	3f 5f       	subi	r19, 0xFF	; 255
for(k=8; k<11; k++) //setting file extention
     554:	28 e0       	ldi	r18, 0x08	; 8
{
  if(fileName[j] != 0)
     556:	fc 01       	movw	r30, r24
     558:	e3 0f       	add	r30, r19
     55a:	f1 1d       	adc	r31, r1
     55c:	40 81       	ld	r20, Z
     55e:	41 11       	cpse	r20, r1
     560:	03 c0       	rjmp	.+6      	; 0x568 <convertFileName+0x9a>
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
     562:	2b 30       	cpi	r18, 0x0B	; 11
     564:	50 f0       	brcs	.+20     	; 0x57a <convertFileName+0xac>
     566:	17 c0       	rjmp	.+46     	; 0x596 <convertFileName+0xc8>

j++;
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
     568:	3f 5f       	subi	r19, 0xFF	; 255
     56a:	e1 e0       	ldi	r30, 0x01	; 1
     56c:	f0 e0       	ldi	r31, 0x00	; 0
     56e:	ec 0f       	add	r30, r28
     570:	fd 1f       	adc	r31, r29
     572:	e2 0f       	add	r30, r18
     574:	f1 1d       	adc	r31, r1
     576:	40 83       	st	Z, r20
     578:	0e c0       	rjmp	.+28     	; 0x596 <convertFileName+0xc8>
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
     57a:	40 e2       	ldi	r20, 0x20	; 32
     57c:	31 e0       	ldi	r19, 0x01	; 1
     57e:	32 0f       	add	r19, r18
     580:	e1 e0       	ldi	r30, 0x01	; 1
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	ec 0f       	add	r30, r28
     586:	fd 1f       	adc	r31, r29
     588:	e2 0f       	add	r30, r18
     58a:	f1 1d       	adc	r31, r1
     58c:	40 83       	st	Z, r20
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
     58e:	3b 30       	cpi	r19, 0x0B	; 11
     590:	29 f0       	breq	.+10     	; 0x59c <convertFileName+0xce>
      fileNameFAT[k++] = ' ';
     592:	23 2f       	mov	r18, r19
     594:	f3 cf       	rjmp	.-26     	; 0x57c <convertFileName+0xae>

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
     596:	2f 5f       	subi	r18, 0xFF	; 255
     598:	2b 30       	cpi	r18, 0x0B	; 11
     59a:	e8 f2       	brcs	.-70     	; 0x556 <convertFileName+0x88>
     59c:	9e 01       	movw	r18, r28
     59e:	24 5f       	subi	r18, 0xF4	; 244
     5a0:	3f 4f       	sbci	r19, 0xFF	; 255
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
     5a2:	fe 01       	movw	r30, r28
     5a4:	31 96       	adiw	r30, 0x01	; 1
}

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
     5a6:	40 81       	ld	r20, Z
     5a8:	5f e9       	ldi	r21, 0x9F	; 159
     5aa:	54 0f       	add	r21, r20
     5ac:	5a 31       	cpi	r21, 0x1A	; 26
     5ae:	10 f4       	brcc	.+4      	; 0x5b4 <convertFileName+0xe6>
    fileNameFAT[j] -= 0x20;
     5b0:	40 52       	subi	r20, 0x20	; 32
     5b2:	40 83       	st	Z, r20
     5b4:	31 96       	adiw	r30, 0x01	; 1
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
     5b6:	e2 17       	cp	r30, r18
     5b8:	f3 07       	cpc	r31, r19
     5ba:	a9 f7       	brne	.-22     	; 0x5a6 <convertFileName+0xd8>
     5bc:	dc 01       	movw	r26, r24
     5be:	fe 01       	movw	r30, r28
     5c0:	31 96       	adiw	r30, 0x01	; 1
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
  fileName[j] = fileNameFAT[j];
     5c2:	81 91       	ld	r24, Z+
     5c4:	8d 93       	st	X+, r24

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
     5c6:	2e 17       	cp	r18, r30
     5c8:	3f 07       	cpc	r19, r31
     5ca:	d9 f7       	brne	.-10     	; 0x5c2 <convertFileName+0xf4>
  fileName[j] = fileNameFAT[j];

return 0;
     5cc:	80 e0       	ldi	r24, 0x00	; 0
}
     5ce:	2b 96       	adiw	r28, 0x0b	; 11
     5d0:	0f b6       	in	r0, 0x3f	; 63
     5d2:	f8 94       	cli
     5d4:	de bf       	out	0x3e, r29	; 62
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	cd bf       	out	0x3d, r28	; 61
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	08 95       	ret

000005e0 <searchNextFreeCluster>:
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
{
     5e0:	4f 92       	push	r4
     5e2:	5f 92       	push	r5
     5e4:	6f 92       	push	r6
     5e6:	7f 92       	push	r7
     5e8:	8f 92       	push	r8
     5ea:	9f 92       	push	r9
     5ec:	af 92       	push	r10
     5ee:	bf 92       	push	r11
     5f0:	cf 92       	push	r12
     5f2:	df 92       	push	r13
     5f4:	ef 92       	push	r14
     5f6:	ff 92       	push	r15
     5f8:	1f 93       	push	r17
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
     5fe:	6b 01       	movw	r12, r22
     600:	7c 01       	movw	r14, r24
     602:	20 e8       	ldi	r18, 0x80	; 128
     604:	c2 22       	and	r12, r18
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
     606:	80 91 86 06 	lds	r24, 0x0686
     60a:	90 91 87 06 	lds	r25, 0x0687
     60e:	a0 91 88 06 	lds	r26, 0x0688
     612:	b0 91 89 06 	lds	r27, 0x0689
     616:	c8 16       	cp	r12, r24
     618:	d9 06       	cpc	r13, r25
     61a:	ea 06       	cpc	r14, r26
     61c:	fb 06       	cpc	r15, r27
     61e:	08 f0       	brcs	.+2      	; 0x622 <searchNextFreeCluster+0x42>
     620:	6d c0       	rjmp	.+218    	; 0x6fc <searchNextFreeCluster+0x11c>
     622:	46 01       	movw	r8, r12
     624:	57 01       	movw	r10, r14
     626:	88 0c       	add	r8, r8
     628:	99 1c       	adc	r9, r9
     62a:	aa 1c       	adc	r10, r10
     62c:	bb 1c       	adc	r11, r11
     62e:	88 0c       	add	r8, r8
     630:	99 1c       	adc	r9, r9
     632:	aa 1c       	adc	r10, r10
     634:	bb 1c       	adc	r11, r11
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
     636:	c2 e9       	ldi	r28, 0x92	; 146
     638:	d6 e0       	ldi	r29, 0x06	; 6
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     63a:	11 e0       	ldi	r17, 0x01	; 1
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
     63c:	80 91 9d 08 	lds	r24, 0x089D
     640:	90 91 9e 08 	lds	r25, 0x089E
     644:	20 91 84 06 	lds	r18, 0x0684
     648:	30 91 85 06 	lds	r19, 0x0685
     64c:	40 90 94 08 	lds	r4, 0x0894
     650:	50 90 95 08 	lds	r5, 0x0895
     654:	60 90 96 08 	lds	r6, 0x0896
     658:	70 90 97 08 	lds	r7, 0x0897
     65c:	48 0e       	add	r4, r24
     65e:	59 1e       	adc	r5, r25
     660:	61 1c       	adc	r6, r1
     662:	71 1c       	adc	r7, r1
     664:	40 e0       	ldi	r20, 0x00	; 0
     666:	50 e0       	ldi	r21, 0x00	; 0
     668:	c5 01       	movw	r24, r10
     66a:	b4 01       	movw	r22, r8
     66c:	0e 94 30 13 	call	0x2660	; 0x2660 <__udivmodsi4>
     670:	c3 01       	movw	r24, r6
     672:	b2 01       	movw	r22, r4
     674:	62 0f       	add	r22, r18
     676:	73 1f       	adc	r23, r19
     678:	84 1f       	adc	r24, r20
     67a:	95 1f       	adc	r25, r21
      SD_readSingleBlock(sector);
     67c:	0e 94 55 12 	call	0x24aa	; 0x24aa <SD_readSingleBlock>
      for(i=0; i<128; i++)
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
     680:	88 81       	ld	r24, Y
     682:	99 81       	ldd	r25, Y+1	; 0x01
     684:	aa 81       	ldd	r26, Y+2	; 0x02
     686:	bb 81       	ldd	r27, Y+3	; 0x03
     688:	bf 70       	andi	r27, 0x0F	; 15
     68a:	89 2b       	or	r24, r25
     68c:	8a 2b       	or	r24, r26
     68e:	8b 2b       	or	r24, r27
     690:	99 f0       	breq	.+38     	; 0x6b8 <searchNextFreeCluster+0xd8>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     692:	21 2f       	mov	r18, r17
      {
       	 value = (unsigned long *) &buffer[i*4];
     694:	e2 2f       	mov	r30, r18
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	ee 0f       	add	r30, r30
     69a:	ff 1f       	adc	r31, r31
     69c:	ee 0f       	add	r30, r30
     69e:	ff 1f       	adc	r31, r31
         if(((*value) & 0x0fffffff) == 0)
     6a0:	ee 56       	subi	r30, 0x6E	; 110
     6a2:	f9 4f       	sbci	r31, 0xF9	; 249
     6a4:	80 81       	ld	r24, Z
     6a6:	91 81       	ldd	r25, Z+1	; 0x01
     6a8:	a2 81       	ldd	r26, Z+2	; 0x02
     6aa:	b3 81       	ldd	r27, Z+3	; 0x03
     6ac:	bf 70       	andi	r27, 0x0F	; 15
     6ae:	89 2b       	or	r24, r25
     6b0:	8a 2b       	or	r24, r26
     6b2:	8b 2b       	or	r24, r27
     6b4:	49 f4       	brne	.+18     	; 0x6c8 <searchNextFreeCluster+0xe8>
     6b6:	01 c0       	rjmp	.+2      	; 0x6ba <searchNextFreeCluster+0xda>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     6b8:	20 e0       	ldi	r18, 0x00	; 0
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
            return(cluster+i);
     6ba:	c7 01       	movw	r24, r14
     6bc:	b6 01       	movw	r22, r12
     6be:	62 0f       	add	r22, r18
     6c0:	71 1d       	adc	r23, r1
     6c2:	81 1d       	adc	r24, r1
     6c4:	91 1d       	adc	r25, r1
     6c6:	21 c0       	rjmp	.+66     	; 0x70a <searchNextFreeCluster+0x12a>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     6c8:	2f 5f       	subi	r18, 0xFF	; 255
     6ca:	22 f7       	brpl	.-56     	; 0x694 <searchNextFreeCluster+0xb4>
{
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
     6cc:	80 e8       	ldi	r24, 0x80	; 128
     6ce:	c8 0e       	add	r12, r24
     6d0:	d1 1c       	adc	r13, r1
     6d2:	e1 1c       	adc	r14, r1
     6d4:	f1 1c       	adc	r15, r1
     6d6:	80 91 86 06 	lds	r24, 0x0686
     6da:	90 91 87 06 	lds	r25, 0x0687
     6de:	a0 91 88 06 	lds	r26, 0x0688
     6e2:	b0 91 89 06 	lds	r27, 0x0689
     6e6:	22 e0       	ldi	r18, 0x02	; 2
     6e8:	92 0e       	add	r9, r18
     6ea:	a1 1c       	adc	r10, r1
     6ec:	b1 1c       	adc	r11, r1
     6ee:	c8 16       	cp	r12, r24
     6f0:	d9 06       	cpc	r13, r25
     6f2:	ea 06       	cpc	r14, r26
     6f4:	fb 06       	cpc	r15, r27
     6f6:	08 f4       	brcc	.+2      	; 0x6fa <searchNextFreeCluster+0x11a>
     6f8:	a1 cf       	rjmp	.-190    	; 0x63c <searchNextFreeCluster+0x5c>
     6fa:	04 c0       	rjmp	.+8      	; 0x704 <searchNextFreeCluster+0x124>
         if(((*value) & 0x0fffffff) == 0)
            return(cluster+i);
      }  
    } 

 return 0;
     6fc:	60 e0       	ldi	r22, 0x00	; 0
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	cb 01       	movw	r24, r22
     702:	03 c0       	rjmp	.+6      	; 0x70a <searchNextFreeCluster+0x12a>
     704:	60 e0       	ldi	r22, 0x00	; 0
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	cb 01       	movw	r24, r22
}
     70a:	df 91       	pop	r29
     70c:	cf 91       	pop	r28
     70e:	1f 91       	pop	r17
     710:	ff 90       	pop	r15
     712:	ef 90       	pop	r14
     714:	df 90       	pop	r13
     716:	cf 90       	pop	r12
     718:	bf 90       	pop	r11
     71a:	af 90       	pop	r10
     71c:	9f 90       	pop	r9
     71e:	8f 90       	pop	r8
     720:	7f 90       	pop	r7
     722:	6f 90       	pop	r6
     724:	5f 90       	pop	r5
     726:	4f 90       	pop	r4
     728:	08 95       	ret

0000072a <displayMemory>:
//Arguments: 1. unsigned char flag. If flag is HIGH, memory will be displayed in KBytes, else in Bytes. 
//			 2. unsigned long memory value
//return: none
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
     72a:	9f 92       	push	r9
     72c:	af 92       	push	r10
     72e:	bf 92       	push	r11
     730:	cf 92       	push	r12
     732:	df 92       	push	r13
     734:	ef 92       	push	r14
     736:	ff 92       	push	r15
     738:	0f 93       	push	r16
     73a:	1f 93       	push	r17
     73c:	cf 93       	push	r28
     73e:	df 93       	push	r29
     740:	cd b7       	in	r28, 0x3d	; 61
     742:	de b7       	in	r29, 0x3e	; 62
     744:	64 97       	sbiw	r28, 0x14	; 20
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	f8 94       	cli
     74a:	de bf       	out	0x3e, r29	; 62
     74c:	0f be       	out	0x3f, r0	; 63
     74e:	cd bf       	out	0x3d, r28	; 61
     750:	98 2e       	mov	r9, r24
     752:	cb 01       	movw	r24, r22
     754:	ba 01       	movw	r22, r20
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
     756:	24 e1       	ldi	r18, 0x14	; 20
     758:	e1 e2       	ldi	r30, 0x21	; 33
     75a:	f1 e0       	ldi	r31, 0x01	; 1
     75c:	de 01       	movw	r26, r28
     75e:	11 96       	adiw	r26, 0x01	; 1
     760:	01 90       	ld	r0, Z+
     762:	0d 92       	st	X+, r0
     764:	2a 95       	dec	r18
     766:	e1 f7       	brne	.-8      	; 0x760 <displayMemory+0x36>
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
     768:	0f 2e       	mov	r0, r31
     76a:	fc e0       	ldi	r31, 0x0C	; 12
     76c:	bf 2e       	mov	r11, r31
     76e:	f0 2d       	mov	r31, r0
  {
    if(i==5 || i==9) 
	{
	   memoryString[i-1] = ',';  
     770:	0f 2e       	mov	r0, r31
     772:	fc e2       	ldi	r31, 0x2C	; 44
     774:	af 2e       	mov	r10, r31
     776:	f0 2d       	mov	r31, r0
	   i--;
	}
    memoryString[i-1] = (memory % 10) | 0x30;
     778:	0f 2e       	mov	r0, r31
     77a:	fa e0       	ldi	r31, 0x0A	; 10
     77c:	cf 2e       	mov	r12, r31
     77e:	d1 2c       	mov	r13, r1
     780:	e1 2c       	mov	r14, r1
     782:	f1 2c       	mov	r15, r1
     784:	f0 2d       	mov	r31, r0
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i==5 || i==9) 
     786:	25 e0       	ldi	r18, 0x05	; 5
     788:	b2 16       	cp	r11, r18
     78a:	19 f0       	breq	.+6      	; 0x792 <displayMemory+0x68>
     78c:	e9 e0       	ldi	r30, 0x09	; 9
     78e:	be 12       	cpse	r11, r30
     790:	05 c0       	rjmp	.+10     	; 0x79c <displayMemory+0x72>
	{
	   memoryString[i-1] = ',';  
     792:	fe 01       	movw	r30, r28
     794:	eb 0d       	add	r30, r11
     796:	f1 1d       	adc	r31, r1
     798:	a0 82       	st	Z, r10
	   i--;
     79a:	ba 94       	dec	r11
	}
    memoryString[i-1] = (memory % 10) | 0x30;
     79c:	8e 01       	movw	r16, r28
     79e:	0b 0d       	add	r16, r11
     7a0:	11 1d       	adc	r17, r1
     7a2:	a7 01       	movw	r20, r14
     7a4:	96 01       	movw	r18, r12
     7a6:	0e 94 30 13 	call	0x2660	; 0x2660 <__udivmodsi4>
     7aa:	60 63       	ori	r22, 0x30	; 48
     7ac:	f8 01       	movw	r30, r16
     7ae:	60 83       	st	Z, r22
    memory /= 10;
     7b0:	62 2f       	mov	r22, r18
     7b2:	73 2f       	mov	r23, r19
     7b4:	84 2f       	mov	r24, r20
     7b6:	95 2f       	mov	r25, r21
	if(memory == 0) break;
     7b8:	61 15       	cp	r22, r1
     7ba:	71 05       	cpc	r23, r1
     7bc:	81 05       	cpc	r24, r1
     7be:	91 05       	cpc	r25, r1
     7c0:	11 f0       	breq	.+4      	; 0x7c6 <displayMemory+0x9c>
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
     7c2:	ba 94       	dec	r11
     7c4:	01 f7       	brne	.-64     	; 0x786 <displayMemory+0x5c>
	}
    memoryString[i-1] = (memory % 10) | 0x30;
    memory /= 10;
	if(memory == 0) break;
  }
  if(flag == HIGH)  memoryString[13] = 'K';
     7c6:	f1 e0       	ldi	r31, 0x01	; 1
     7c8:	9f 12       	cpse	r9, r31
     7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <displayMemory+0xa6>
     7cc:	8b e4       	ldi	r24, 0x4B	; 75
     7ce:	8e 87       	std	Y+14, r24	; 0x0e
  transmitString(memoryString);
     7d0:	ce 01       	movw	r24, r28
     7d2:	01 96       	adiw	r24, 0x01	; 1
     7d4:	0e 94 11 13 	call	0x2622	; 0x2622 <transmitString>
}
     7d8:	64 96       	adiw	r28, 0x14	; 20
     7da:	0f b6       	in	r0, 0x3f	; 63
     7dc:	f8 94       	cli
     7de:	de bf       	out	0x3e, r29	; 62
     7e0:	0f be       	out	0x3f, r0	; 63
     7e2:	cd bf       	out	0x3d, r28	; 61
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16
     7ec:	ff 90       	pop	r15
     7ee:	ef 90       	pop	r14
     7f0:	df 90       	pop	r13
     7f2:	cf 90       	pop	r12
     7f4:	bf 90       	pop	r11
     7f6:	af 90       	pop	r10
     7f8:	9f 90       	pop	r9
     7fa:	08 95       	ret

000007fc <memoryStatistics>:
//it tries to read from SD whether a free cluster count is stored, if it is stored
//then it will return immediately. Otherwise it will count the total number of
//free clusters, which takes time
//****************************************************************************
void memoryStatistics (void)
{
     7fc:	2f 92       	push	r2
     7fe:	3f 92       	push	r3
     800:	4f 92       	push	r4
     802:	5f 92       	push	r5
     804:	6f 92       	push	r6
     806:	7f 92       	push	r7
     808:	8f 92       	push	r8
     80a:	9f 92       	push	r9
     80c:	af 92       	push	r10
     80e:	bf 92       	push	r11
     810:	cf 92       	push	r12
     812:	df 92       	push	r13
     814:	ef 92       	push	r14
     816:	ff 92       	push	r15
     818:	0f 93       	push	r16
     81a:	1f 93       	push	r17
     81c:	cf 93       	push	r28
     81e:	df 93       	push	r29
     820:	00 d0       	rcall	.+0      	; 0x822 <memoryStatistics+0x26>
     822:	00 d0       	rcall	.+0      	; 0x824 <memoryStatistics+0x28>
     824:	cd b7       	in	r28, 0x3d	; 61
     826:	de b7       	in	r29, 0x3e	; 62
unsigned long totalMemory, freeMemory;
unsigned long sector, *value;
unsigned int i;


totalMemory = totalClusters * sectorPerCluster / 1024;
     828:	a0 91 92 08 	lds	r26, 0x0892
     82c:	b0 91 93 08 	lds	r27, 0x0893
     830:	20 91 86 06 	lds	r18, 0x0686
     834:	30 91 87 06 	lds	r19, 0x0687
     838:	40 91 88 06 	lds	r20, 0x0688
     83c:	50 91 89 06 	lds	r21, 0x0689
     840:	0e 94 67 13 	call	0x26ce	; 0x26ce <__muluhisi3>
     844:	6b 01       	movw	r12, r22
     846:	7c 01       	movw	r14, r24
     848:	0b 2e       	mov	r0, r27
     84a:	ba e0       	ldi	r27, 0x0A	; 10
     84c:	f6 94       	lsr	r15
     84e:	e7 94       	ror	r14
     850:	d7 94       	ror	r13
     852:	c7 94       	ror	r12
     854:	ba 95       	dec	r27
     856:	d1 f7       	brne	.-12     	; 0x84c <memoryStatistics+0x50>
     858:	b0 2d       	mov	r27, r0
totalMemory *= bytesPerSector;
     85a:	00 91 84 06 	lds	r16, 0x0684
     85e:	10 91 85 06 	lds	r17, 0x0685

printf("\n");
     862:	8a e0       	ldi	r24, 0x0A	; 10
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
printf("\n");
     86a:	8a e0       	ldi	r24, 0x0A	; 10
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
printf(("Total Memory: "));
     872:	85 e3       	ldi	r24, 0x35	; 53
     874:	91 e0       	ldi	r25, 0x01	; 1
     876:	9f 93       	push	r25
     878:	8f 93       	push	r24
     87a:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
unsigned long sector, *value;
unsigned int i;


totalMemory = totalClusters * sectorPerCluster / 1024;
totalMemory *= bytesPerSector;
     87e:	d8 01       	movw	r26, r16
     880:	a7 01       	movw	r20, r14
     882:	96 01       	movw	r18, r12
     884:	0e 94 67 13 	call	0x26ce	; 0x26ce <__muluhisi3>
     888:	ab 01       	movw	r20, r22
     88a:	bc 01       	movw	r22, r24

printf("\n");
printf("\n");
printf(("Total Memory: "));

displayMemory (HIGH, totalMemory);
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	0e 94 95 03 	call	0x72a	; 0x72a <displayMemory>

freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	a9 01       	movw	r20, r18
     898:	60 e0       	ldi	r22, 0x00	; 0
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <getSetFreeCluster>
     8a0:	4b 01       	movw	r8, r22
     8a2:	5c 01       	movw	r10, r24
//freeClusters = 0xffffffff;    

if(freeClusters > totalClusters)
     8a4:	80 91 86 06 	lds	r24, 0x0686
     8a8:	90 91 87 06 	lds	r25, 0x0687
     8ac:	a0 91 88 06 	lds	r26, 0x0688
     8b0:	b0 91 89 06 	lds	r27, 0x0689
     8b4:	0f 90       	pop	r0
     8b6:	0f 90       	pop	r0
     8b8:	88 15       	cp	r24, r8
     8ba:	99 05       	cpc	r25, r9
     8bc:	aa 05       	cpc	r26, r10
     8be:	bb 05       	cpc	r27, r11
     8c0:	08 f0       	brcs	.+2      	; 0x8c4 <memoryStatistics+0xc8>
     8c2:	80 c0       	rjmp	.+256    	; 0x9c4 <__stack+0xc5>
{
   freeClusterCountUpdated = 0;
     8c4:	10 92 a4 08 	sts	0x08A4, r1
   freeClusters = 0;
   totalClusterCount = 0;
   cluster = rootCluster;    
     8c8:	40 90 8a 06 	lds	r4, 0x068A
     8cc:	50 90 8b 06 	lds	r5, 0x068B
     8d0:	60 90 8c 06 	lds	r6, 0x068C
     8d4:	70 90 8d 06 	lds	r7, 0x068D
     8d8:	44 0c       	add	r4, r4
     8da:	55 1c       	adc	r5, r5
     8dc:	66 1c       	adc	r6, r6
     8de:	77 1c       	adc	r7, r7
     8e0:	44 0c       	add	r4, r4
     8e2:	55 1c       	adc	r5, r5
     8e4:	66 1c       	adc	r6, r6
     8e6:	77 1c       	adc	r7, r7

if(freeClusters > totalClusters)
{
   freeClusterCountUpdated = 0;
   freeClusters = 0;
   totalClusterCount = 0;
     8e8:	c1 2c       	mov	r12, r1
     8ea:	d1 2c       	mov	r13, r1
     8ec:	76 01       	movw	r14, r12
//freeClusters = 0xffffffff;    

if(freeClusters > totalClusters)
{
   freeClusterCountUpdated = 0;
   freeClusters = 0;
     8ee:	81 2c       	mov	r8, r1
     8f0:	91 2c       	mov	r9, r1
     8f2:	54 01       	movw	r10, r8
     8f4:	0f 2e       	mov	r0, r31
     8f6:	f2 e9       	ldi	r31, 0x92	; 146
     8f8:	2f 2e       	mov	r2, r31
     8fa:	f6 e0       	ldi	r31, 0x06	; 6
     8fc:	3f 2e       	mov	r3, r31
     8fe:	f0 2d       	mov	r31, r0
   totalClusterCount = 0;
   cluster = rootCluster;    
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
     900:	00 91 9d 08 	lds	r16, 0x089D
     904:	10 91 9e 08 	lds	r17, 0x089E
     908:	20 91 84 06 	lds	r18, 0x0684
     90c:	30 91 85 06 	lds	r19, 0x0685
     910:	40 91 94 08 	lds	r20, 0x0894
     914:	50 91 95 08 	lds	r21, 0x0895
     918:	60 91 96 08 	lds	r22, 0x0896
     91c:	70 91 97 08 	lds	r23, 0x0897
     920:	db 01       	movw	r26, r22
     922:	ca 01       	movw	r24, r20
     924:	80 0f       	add	r24, r16
     926:	91 1f       	adc	r25, r17
     928:	a1 1d       	adc	r26, r1
     92a:	b1 1d       	adc	r27, r1
     92c:	89 83       	std	Y+1, r24	; 0x01
     92e:	9a 83       	std	Y+2, r25	; 0x02
     930:	ab 83       	std	Y+3, r26	; 0x03
     932:	bc 83       	std	Y+4, r27	; 0x04
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	c3 01       	movw	r24, r6
     93a:	b2 01       	movw	r22, r4
     93c:	0e 94 30 13 	call	0x2660	; 0x2660 <__udivmodsi4>
     940:	69 81       	ldd	r22, Y+1	; 0x01
     942:	7a 81       	ldd	r23, Y+2	; 0x02
     944:	8b 81       	ldd	r24, Y+3	; 0x03
     946:	9c 81       	ldd	r25, Y+4	; 0x04
     948:	62 0f       	add	r22, r18
     94a:	73 1f       	adc	r23, r19
     94c:	84 1f       	adc	r24, r20
     94e:	95 1f       	adc	r25, r21
      SD_readSingleBlock(sector);
     950:	0e 94 55 12 	call	0x24aa	; 0x24aa <SD_readSingleBlock>
     954:	f1 01       	movw	r30, r2
     956:	b7 01       	movw	r22, r14
     958:	a6 01       	movw	r20, r12
     95a:	ca 01       	movw	r24, r20
     95c:	8c 19       	sub	r24, r12
     95e:	9d 09       	sbc	r25, r13
      for(i=0; i<128; i++)
      {
           value = (unsigned long *) &buffer[i*4];
         if(((*value)& 0x0fffffff) == 0)
     960:	01 91       	ld	r16, Z+
     962:	11 91       	ld	r17, Z+
     964:	21 91       	ld	r18, Z+
     966:	31 91       	ld	r19, Z+
     968:	3f 70       	andi	r19, 0x0F	; 15
     96a:	01 2b       	or	r16, r17
     96c:	02 2b       	or	r16, r18
     96e:	03 2b       	or	r16, r19
     970:	29 f4       	brne	.+10     	; 0x97c <__stack+0x7d>
            freeClusters++;;
     972:	af ef       	ldi	r26, 0xFF	; 255
     974:	8a 1a       	sub	r8, r26
     976:	9a 0a       	sbc	r9, r26
     978:	aa 0a       	sbc	r10, r26
     97a:	ba 0a       	sbc	r11, r26
        
         totalClusterCount++;
     97c:	4f 5f       	subi	r20, 0xFF	; 255
     97e:	5f 4f       	sbci	r21, 0xFF	; 255
     980:	6f 4f       	sbci	r22, 0xFF	; 255
     982:	7f 4f       	sbci	r23, 0xFF	; 255
         if(totalClusterCount == (totalClusters+2)) break;
     984:	00 91 86 06 	lds	r16, 0x0686
     988:	10 91 87 06 	lds	r17, 0x0687
     98c:	20 91 88 06 	lds	r18, 0x0688
     990:	30 91 89 06 	lds	r19, 0x0689
     994:	0e 5f       	subi	r16, 0xFE	; 254
     996:	1f 4f       	sbci	r17, 0xFF	; 255
     998:	2f 4f       	sbci	r18, 0xFF	; 255
     99a:	3f 4f       	sbci	r19, 0xFF	; 255
     99c:	04 17       	cp	r16, r20
     99e:	15 07       	cpc	r17, r21
     9a0:	26 07       	cpc	r18, r22
     9a2:	37 07       	cpc	r19, r23
     9a4:	29 f0       	breq	.+10     	; 0x9b0 <__stack+0xb1>
   cluster = rootCluster;    
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     9a6:	b8 e0       	ldi	r27, 0x08	; 8
     9a8:	e2 39       	cpi	r30, 0x92	; 146
     9aa:	fb 07       	cpc	r31, r27
     9ac:	b1 f6       	brne	.-84     	; 0x95a <__stack+0x5b>
     9ae:	03 c0       	rjmp	.+6      	; 0x9b6 <__stack+0xb7>
            freeClusters++;;
        
         totalClusterCount++;
         if(totalClusterCount == (totalClusters+2)) break;
      }  
      if(i < 128) break;
     9b0:	80 38       	cpi	r24, 0x80	; 128
     9b2:	91 05       	cpc	r25, r1
     9b4:	38 f0       	brcs	.+14     	; 0x9c4 <__stack+0xc5>
     9b6:	e2 e0       	ldi	r30, 0x02	; 2
     9b8:	5e 0e       	add	r5, r30
     9ba:	61 1c       	adc	r6, r1
     9bc:	71 1c       	adc	r7, r1
      cluster+=128;
    } 
     9be:	6a 01       	movw	r12, r20
     9c0:	7b 01       	movw	r14, r22
     9c2:	9e cf       	rjmp	.-196    	; 0x900 <__stack+0x1>
}

if(!freeClusterCountUpdated)
     9c4:	80 91 a4 08 	lds	r24, 0x08A4
     9c8:	81 11       	cpse	r24, r1
     9ca:	06 c0       	rjmp	.+12     	; 0x9d8 <__stack+0xd9>
  getSetFreeCluster (TOTAL_FREE, SET, freeClusters); //update FSinfo next free cluster entry
     9cc:	a5 01       	movw	r20, r10
     9ce:	94 01       	movw	r18, r8
     9d0:	61 e0       	ldi	r22, 0x01	; 1
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <getSetFreeCluster>
freeClusterCountUpdated = 1;  //set flag
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	80 93 a4 08 	sts	0x08A4, r24
freeMemory = freeClusters * sectorPerCluster / 1024;
     9de:	a0 91 92 08 	lds	r26, 0x0892
     9e2:	b0 91 93 08 	lds	r27, 0x0893
     9e6:	a5 01       	movw	r20, r10
     9e8:	94 01       	movw	r18, r8
     9ea:	0e 94 67 13 	call	0x26ce	; 0x26ce <__muluhisi3>
     9ee:	6b 01       	movw	r12, r22
     9f0:	7c 01       	movw	r14, r24
     9f2:	0b 2e       	mov	r0, r27
     9f4:	ba e0       	ldi	r27, 0x0A	; 10
     9f6:	f6 94       	lsr	r15
     9f8:	e7 94       	ror	r14
     9fa:	d7 94       	ror	r13
     9fc:	c7 94       	ror	r12
     9fe:	ba 95       	dec	r27
     a00:	d1 f7       	brne	.-12     	; 0x9f6 <__stack+0xf7>
     a02:	b0 2d       	mov	r27, r0
freeMemory *= bytesPerSector ;
     a04:	00 91 84 06 	lds	r16, 0x0684
     a08:	10 91 85 06 	lds	r17, 0x0685
printf("\n");
     a0c:	8a e0       	ldi	r24, 0x0A	; 10
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
printf((" Free Memory: "));
     a14:	84 e4       	ldi	r24, 0x44	; 68
     a16:	91 e0       	ldi	r25, 0x01	; 1
     a18:	9f 93       	push	r25
     a1a:	8f 93       	push	r24
     a1c:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>

if(!freeClusterCountUpdated)
  getSetFreeCluster (TOTAL_FREE, SET, freeClusters); //update FSinfo next free cluster entry
freeClusterCountUpdated = 1;  //set flag
freeMemory = freeClusters * sectorPerCluster / 1024;
freeMemory *= bytesPerSector ;
     a20:	d8 01       	movw	r26, r16
     a22:	a7 01       	movw	r20, r14
     a24:	96 01       	movw	r18, r12
     a26:	0e 94 67 13 	call	0x26ce	; 0x26ce <__muluhisi3>
     a2a:	ab 01       	movw	r20, r22
     a2c:	bc 01       	movw	r22, r24
printf("\n");
printf((" Free Memory: "));
displayMemory (HIGH, freeMemory);
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	0e 94 95 03 	call	0x72a	; 0x72a <displayMemory>
printf("\n"); 
     a34:	8a e0       	ldi	r24, 0x0A	; 10
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
}
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	0f 90       	pop	r0
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	1f 91       	pop	r17
     a4e:	0f 91       	pop	r16
     a50:	ff 90       	pop	r15
     a52:	ef 90       	pop	r14
     a54:	df 90       	pop	r13
     a56:	cf 90       	pop	r12
     a58:	bf 90       	pop	r11
     a5a:	af 90       	pop	r10
     a5c:	9f 90       	pop	r9
     a5e:	8f 90       	pop	r8
     a60:	7f 90       	pop	r7
     a62:	6f 90       	pop	r6
     a64:	5f 90       	pop	r5
     a66:	4f 90       	pop	r4
     a68:	3f 90       	pop	r3
     a6a:	2f 90       	pop	r2
     a6c:	08 95       	ret

00000a6e <freeMemoryUpdate>:
//			to ADD or REMOVE clusters occupied by the file
//Arguments: #1.flag ADD or REMOVE #2.file size in Bytes
//return: none
//********************************************************************
void freeMemoryUpdate (unsigned char flag, unsigned long size)
{
     a6e:	cf 92       	push	r12
     a70:	df 92       	push	r13
     a72:	ef 92       	push	r14
     a74:	ff 92       	push	r15
     a76:	cf 93       	push	r28
     a78:	c8 2f       	mov	r28, r24
  unsigned long freeClusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
     a7a:	6a 01       	movw	r12, r20
     a7c:	7b 01       	movw	r14, r22
     a7e:	21 e0       	ldi	r18, 0x01	; 1
     a80:	d2 22       	and	r13, r18
     a82:	ee 24       	eor	r14, r14
     a84:	ff 24       	eor	r15, r15
     a86:	cd 28       	or	r12, r13
     a88:	ce 28       	or	r12, r14
     a8a:	cf 28       	or	r12, r15
     a8c:	61 f4       	brne	.+24     	; 0xaa6 <freeMemoryUpdate+0x38>
     a8e:	db 01       	movw	r26, r22
     a90:	ca 01       	movw	r24, r20
     a92:	07 2e       	mov	r0, r23
     a94:	79 e0       	ldi	r23, 0x09	; 9
     a96:	b6 95       	lsr	r27
     a98:	a7 95       	ror	r26
     a9a:	97 95       	ror	r25
     a9c:	87 95       	ror	r24
     a9e:	7a 95       	dec	r23
     aa0:	d1 f7       	brne	.-12     	; 0xa96 <freeMemoryUpdate+0x28>
     aa2:	70 2d       	mov	r23, r0
     aa4:	0e c0       	rjmp	.+28     	; 0xac2 <freeMemoryUpdate+0x54>
  else size = (size / 512) +1;
     aa6:	db 01       	movw	r26, r22
     aa8:	ca 01       	movw	r24, r20
     aaa:	07 2e       	mov	r0, r23
     aac:	79 e0       	ldi	r23, 0x09	; 9
     aae:	b6 95       	lsr	r27
     ab0:	a7 95       	ror	r26
     ab2:	97 95       	ror	r25
     ab4:	87 95       	ror	r24
     ab6:	7a 95       	dec	r23
     ab8:	d1 f7       	brne	.-12     	; 0xaae <freeMemoryUpdate+0x40>
     aba:	70 2d       	mov	r23, r0
     abc:	01 96       	adiw	r24, 0x01	; 1
     abe:	a1 1d       	adc	r26, r1
     ac0:	b1 1d       	adc	r27, r1
  if((size % 8) == 0) size = size / 8;
     ac2:	6c 01       	movw	r12, r24
     ac4:	7d 01       	movw	r14, r26
     ac6:	27 e0       	ldi	r18, 0x07	; 7
     ac8:	c2 22       	and	r12, r18
     aca:	dd 24       	eor	r13, r13
     acc:	ee 24       	eor	r14, r14
     ace:	ff 24       	eor	r15, r15
     ad0:	cd 28       	or	r12, r13
     ad2:	ce 28       	or	r12, r14
     ad4:	cf 28       	or	r12, r15
     ad6:	59 f4       	brne	.+22     	; 0xaee <freeMemoryUpdate+0x80>
     ad8:	6c 01       	movw	r12, r24
     ada:	7d 01       	movw	r14, r26
     adc:	68 94       	set
     ade:	12 f8       	bld	r1, 2
     ae0:	f6 94       	lsr	r15
     ae2:	e7 94       	ror	r14
     ae4:	d7 94       	ror	r13
     ae6:	c7 94       	ror	r12
     ae8:	16 94       	lsr	r1
     aea:	d1 f7       	brne	.-12     	; 0xae0 <freeMemoryUpdate+0x72>
     aec:	0f c0       	rjmp	.+30     	; 0xb0c <freeMemoryUpdate+0x9e>
  else size = (size / 8) +1;
     aee:	6c 01       	movw	r12, r24
     af0:	7d 01       	movw	r14, r26
     af2:	68 94       	set
     af4:	12 f8       	bld	r1, 2
     af6:	f6 94       	lsr	r15
     af8:	e7 94       	ror	r14
     afa:	d7 94       	ror	r13
     afc:	c7 94       	ror	r12
     afe:	16 94       	lsr	r1
     b00:	d1 f7       	brne	.-12     	; 0xaf6 <freeMemoryUpdate+0x88>
     b02:	8f ef       	ldi	r24, 0xFF	; 255
     b04:	c8 1a       	sub	r12, r24
     b06:	d8 0a       	sbc	r13, r24
     b08:	e8 0a       	sbc	r14, r24
     b0a:	f8 0a       	sbc	r15, r24

  if(freeClusterCountUpdated)
     b0c:	90 91 a4 08 	lds	r25, 0x08A4
     b10:	99 23       	and	r25, r25
     b12:	d1 f0       	breq	.+52     	; 0xb48 <freeMemoryUpdate+0xda>
  {
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
     b14:	20 e0       	ldi	r18, 0x00	; 0
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	a9 01       	movw	r20, r18
     b1a:	60 e0       	ldi	r22, 0x00	; 0
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <getSetFreeCluster>
	if(flag == ADD)
     b22:	c1 11       	cpse	r28, r1
     b24:	07 c0       	rjmp	.+14     	; 0xb34 <freeMemoryUpdate+0xc6>
  	   freeClusters = freeClusters + size;
     b26:	9b 01       	movw	r18, r22
     b28:	ac 01       	movw	r20, r24
     b2a:	2c 0d       	add	r18, r12
     b2c:	3d 1d       	adc	r19, r13
     b2e:	4e 1d       	adc	r20, r14
     b30:	5f 1d       	adc	r21, r15
     b32:	06 c0       	rjmp	.+12     	; 0xb40 <freeMemoryUpdate+0xd2>
	else  //when flag = REMOVE
	   freeClusters = freeClusters - size;
     b34:	9b 01       	movw	r18, r22
     b36:	ac 01       	movw	r20, r24
     b38:	2c 19       	sub	r18, r12
     b3a:	3d 09       	sbc	r19, r13
     b3c:	4e 09       	sbc	r20, r14
     b3e:	5f 09       	sbc	r21, r15
	getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
     b40:	61 e0       	ldi	r22, 0x01	; 1
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <getSetFreeCluster>
  }
}
     b48:	cf 91       	pop	r28
     b4a:	ff 90       	pop	r15
     b4c:	ef 90       	pop	r14
     b4e:	df 90       	pop	r13
     b50:	cf 90       	pop	r12
     b52:	08 95       	ret

00000b54 <findFiles>:
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
{
     b54:	2f 92       	push	r2
     b56:	3f 92       	push	r3
     b58:	4f 92       	push	r4
     b5a:	5f 92       	push	r5
     b5c:	6f 92       	push	r6
     b5e:	7f 92       	push	r7
     b60:	8f 92       	push	r8
     b62:	9f 92       	push	r9
     b64:	af 92       	push	r10
     b66:	bf 92       	push	r11
     b68:	cf 92       	push	r12
     b6a:	df 92       	push	r13
     b6c:	ef 92       	push	r14
     b6e:	ff 92       	push	r15
     b70:	0f 93       	push	r16
     b72:	1f 93       	push	r17
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62
     b7c:	68 97       	sbiw	r28, 0x18	; 24
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	f8 94       	cli
     b82:	de bf       	out	0x3e, r29	; 62
     b84:	0f be       	out	0x3f, r0	; 63
     b86:	cd bf       	out	0x3d, r28	; 61
     b88:	8c 87       	std	Y+12, r24	; 0x0c
     b8a:	7b 87       	std	Y+11, r23	; 0x0b
     b8c:	6a 87       	std	Y+10, r22	; 0x0a
unsigned long cluster, sector, firstSector, firstCluster, nextCluster;
struct dir_Structure *dir;
unsigned int i;
unsigned char j;

cluster = rootCluster; //root cluster
     b8e:	20 91 8a 06 	lds	r18, 0x068A
     b92:	30 91 8b 06 	lds	r19, 0x068B
     b96:	40 91 8c 06 	lds	r20, 0x068C
     b9a:	50 91 8d 06 	lds	r21, 0x068D
     b9e:	29 8b       	std	Y+17, r18	; 0x11
     ba0:	3a 8b       	std	Y+18, r19	; 0x12
     ba2:	4b 8b       	std	Y+19, r20	; 0x13
     ba4:	5c 8b       	std	Y+20, r21	; 0x14
			 for(j=0; j<11; j++)
		     {
			   if(j == 8) transmitByte(' ');
			   transmitByte (dir->name[j]);
			 }
		     printf(("   "));
     ba6:	0f 2e       	mov	r0, r31
     ba8:	f1 e8       	ldi	r31, 0x81	; 129
     baa:	ef 2e       	mov	r14, r31
     bac:	f1 e0       	ldi	r31, 0x01	; 1
     bae:	ff 2e       	mov	r15, r31
     bb0:	f0 2d       	mov	r31, r0
     bb2:	ab 01       	movw	r20, r22
     bb4:	4f 5f       	subi	r20, 0xFF	; 255
     bb6:	5f 4f       	sbci	r21, 0xFF	; 255
     bb8:	5e 8b       	std	Y+22, r21	; 0x16
     bba:	4d 8b       	std	Y+21, r20	; 0x15

cluster = rootCluster; //root cluster

while(1)
{
   firstSector = getFirstSector (cluster);
     bbc:	69 89       	ldd	r22, Y+17	; 0x11
     bbe:	7a 89       	ldd	r23, Y+18	; 0x12
     bc0:	8b 89       	ldd	r24, Y+19	; 0x13
     bc2:	9c 89       	ldd	r25, Y+20	; 0x14
     bc4:	0e 94 62 00 	call	0xc4	; 0xc4 <getFirstSector>
     bc8:	6d 87       	std	Y+13, r22	; 0x0d
     bca:	7e 87       	std	Y+14, r23	; 0x0e
     bcc:	8f 87       	std	Y+15, r24	; 0x0f
     bce:	98 8b       	std	Y+16, r25	; 0x10

   for(sector = 0; sector < sectorPerCluster; sector++)
     bd0:	80 91 92 08 	lds	r24, 0x0892
     bd4:	90 91 93 08 	lds	r25, 0x0893
     bd8:	89 2b       	or	r24, r25
     bda:	09 f4       	brne	.+2      	; 0xbde <findFiles+0x8a>
     bdc:	ba c1       	rjmp	.+884    	; 0xf52 <findFiles+0x3fe>
     bde:	81 2c       	mov	r8, r1
     be0:	91 2c       	mov	r9, r1
     be2:	a1 2c       	mov	r10, r1
     be4:	b1 2c       	mov	r11, r1

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &buffer[i];

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
     be6:	0f 2e       	mov	r0, r31
     be8:	f2 e9       	ldi	r31, 0x92	; 146
     bea:	4f 2e       	mov	r4, r31
     bec:	f6 e0       	ldi	r31, 0x06	; 6
     bee:	5f 2e       	mov	r5, r31
     bf0:	f0 2d       	mov	r31, r0
		      printf(("File does not exist!"));
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
     bf2:	5c 85       	ldd	r21, Y+12	; 0x0c
     bf4:	51 50       	subi	r21, 0x01	; 1
     bf6:	59 83       	std	Y+1, r21	; 0x01
			   transmitByte (dir->name[j]);
			 }
		     printf(("   "));
		     if((dir->attrib != 0x10) && (dir->attrib != 0x08))
			 {
			     printf(("FILE" ));
     bf8:	8a 82       	std	Y+2, r8	; 0x02
     bfa:	9b 82       	std	Y+3, r9	; 0x03
     bfc:	ac 82       	std	Y+4, r10	; 0x04
     bfe:	bd 82       	std	Y+5, r11	; 0x05
     c00:	8d 88       	ldd	r8, Y+21	; 0x15
     c02:	9e 88       	ldd	r9, Y+22	; 0x16
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
     c04:	8a 81       	ldd	r24, Y+2	; 0x02
     c06:	9b 81       	ldd	r25, Y+3	; 0x03
     c08:	ac 81       	ldd	r26, Y+4	; 0x04
     c0a:	bd 81       	ldd	r27, Y+5	; 0x05
     c0c:	2d 85       	ldd	r18, Y+13	; 0x0d
     c0e:	3e 85       	ldd	r19, Y+14	; 0x0e
     c10:	4f 85       	ldd	r20, Y+15	; 0x0f
     c12:	58 89       	ldd	r21, Y+16	; 0x10
     c14:	82 0f       	add	r24, r18
     c16:	93 1f       	adc	r25, r19
     c18:	a4 1f       	adc	r26, r20
     c1a:	b5 1f       	adc	r27, r21
     c1c:	8e 83       	std	Y+6, r24	; 0x06
     c1e:	9f 83       	std	Y+7, r25	; 0x07
     c20:	a8 87       	std	Y+8, r26	; 0x08
     c22:	b9 87       	std	Y+9, r27	; 0x09
     c24:	bc 01       	movw	r22, r24
     c26:	cd 01       	movw	r24, r26
     c28:	0e 94 55 12 	call	0x24aa	; 0x24aa <SD_readSingleBlock>
	

     for(i=0; i<bytesPerSector; i+=32)
     c2c:	80 91 84 06 	lds	r24, 0x0684
     c30:	90 91 85 06 	lds	r25, 0x0685
     c34:	89 2b       	or	r24, r25
     c36:	09 f4       	brne	.+2      	; 0xc3a <findFiles+0xe6>
     c38:	74 c1       	rjmp	.+744    	; 0xf22 <findFiles+0x3ce>
     {
	    dir = (struct dir_Structure *) &buffer[i];

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
     c3a:	d2 01       	movw	r26, r4
     c3c:	8c 91       	ld	r24, X
     c3e:	81 11       	cpse	r24, r1
     c40:	1b c0       	rjmp	.+54     	; 0xc78 <findFiles+0x124>
     c42:	0a c0       	rjmp	.+20     	; 0xc58 <findFiles+0x104>
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &buffer[i];
     c44:	d8 8e       	std	Y+24, r13	; 0x18
     c46:	cf 8a       	std	Y+23, r12	; 0x17
     c48:	b0 e2       	ldi	r27, 0x20	; 32
     c4a:	cb 0e       	add	r12, r27
     c4c:	d1 1c       	adc	r13, r1
     c4e:	f6 01       	movw	r30, r12
     c50:	b0 97       	sbiw	r30, 0x20	; 32

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
     c52:	80 81       	ld	r24, Z
     c54:	81 11       	cpse	r24, r1
     c56:	1f c0       	rjmp	.+62     	; 0xc96 <findFiles+0x142>
		{
		  if((flag == GET_FILE) || (flag == DELETE))
     c58:	8c 85       	ldd	r24, Y+12	; 0x0c
     c5a:	81 50       	subi	r24, 0x01	; 1
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	08 f0       	brcs	.+2      	; 0xc62 <findFiles+0x10e>
     c60:	9e c1       	rjmp	.+828    	; 0xf9e <findFiles+0x44a>
		      printf(("File does not exist!"));
     c62:	83 e5       	ldi	r24, 0x53	; 83
     c64:	91 e0       	ldi	r25, 0x01	; 1
     c66:	9f 93       	push	r25
     c68:	8f 93       	push	r24
     c6a:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
		  return 0;   
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	98 c1       	rjmp	.+816    	; 0xfa8 <findFiles+0x454>
     c78:	0f 2e       	mov	r0, r31
     c7a:	f2 eb       	ldi	r31, 0xB2	; 178
     c7c:	cf 2e       	mov	r12, r31
     c7e:	f6 e0       	ldi	r31, 0x06	; 6
     c80:	df 2e       	mov	r13, r31
     c82:	f0 2d       	mov	r31, r0
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
     c84:	61 2c       	mov	r6, r1
     c86:	71 2c       	mov	r7, r1
			  }
            }
          }
          else  //when flag = GET_LIST
		  {
		     printf("\n");
     c88:	aa 24       	eor	r10, r10
     c8a:	a3 94       	inc	r10
     c8c:	b1 2c       	mov	r11, r1
     c8e:	58 8e       	std	Y+24, r5	; 0x18
     c90:	4f 8a       	std	Y+23, r4	; 0x17
     c92:	2a 84       	ldd	r2, Y+10	; 0x0a
     c94:	3b 84       	ldd	r3, Y+11	; 0x0b
		{
		  if((flag == GET_FILE) || (flag == DELETE))
		      printf(("File does not exist!"));
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
     c96:	85 3e       	cpi	r24, 0xE5	; 229
     c98:	09 f4       	brne	.+2      	; 0xc9c <findFiles+0x148>
     c9a:	38 c1       	rjmp	.+624    	; 0xf0c <findFiles+0x3b8>
     c9c:	ef 89       	ldd	r30, Y+23	; 0x17
     c9e:	f8 8d       	ldd	r31, Y+24	; 0x18
     ca0:	83 85       	ldd	r24, Z+11	; 0x0b
     ca2:	8f 30       	cpi	r24, 0x0F	; 15
     ca4:	09 f4       	brne	.+2      	; 0xca8 <findFiles+0x154>
     ca6:	32 c1       	rjmp	.+612    	; 0xf0c <findFiles+0x3b8>
        {
          if((flag == GET_FILE) || (flag == DELETE))
     ca8:	f9 81       	ldd	r31, Y+1	; 0x01
     caa:	f2 30       	cpi	r31, 0x02	; 2
     cac:	08 f0       	brcs	.+2      	; 0xcb0 <findFiles+0x15c>
     cae:	da c0       	rjmp	.+436    	; 0xe64 <findFiles+0x310>
          {
            for(j=0; j<11; j++)
            if(dir->name[j] != fileName[j]) break;
     cb0:	af 89       	ldd	r26, Y+23	; 0x17
     cb2:	b8 8d       	ldd	r27, Y+24	; 0x18
     cb4:	9c 91       	ld	r25, X
     cb6:	f1 01       	movw	r30, r2
     cb8:	80 81       	ld	r24, Z
     cba:	98 13       	cpse	r25, r24
     cbc:	27 c1       	rjmp	.+590    	; 0xf0c <findFiles+0x3b8>
     cbe:	11 96       	adiw	r26, 0x01	; 1
     cc0:	f4 01       	movw	r30, r8
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
     cc2:	8a 2d       	mov	r24, r10
     cc4:	4f 89       	ldd	r20, Y+23	; 0x17
     cc6:	58 8d       	ldd	r21, Y+24	; 0x18
            if(dir->name[j] != fileName[j]) break;
     cc8:	2d 91       	ld	r18, X+
     cca:	91 91       	ld	r25, Z+
     ccc:	29 13       	cpse	r18, r25
     cce:	04 c0       	rjmp	.+8      	; 0xcd8 <findFiles+0x184>
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
     cd0:	8f 5f       	subi	r24, 0xFF	; 255
     cd2:	8b 30       	cpi	r24, 0x0B	; 11
     cd4:	c9 f7       	brne	.-14     	; 0xcc8 <findFiles+0x174>
     cd6:	09 c0       	rjmp	.+18     	; 0xcea <findFiles+0x196>
     cd8:	58 8f       	std	Y+24, r21	; 0x18
     cda:	4f 8b       	std	Y+23, r20	; 0x17
            if(dir->name[j] != fileName[j]) break;
            if(j == 11)
     cdc:	8b 30       	cpi	r24, 0x0B	; 11
     cde:	09 f0       	breq	.+2      	; 0xce2 <findFiles+0x18e>
     ce0:	15 c1       	rjmp	.+554    	; 0xf0c <findFiles+0x3b8>
     ce2:	23 01       	movw	r4, r6
     ce4:	3a 01       	movw	r6, r20
     ce6:	8a 01       	movw	r16, r20
     ce8:	03 c0       	rjmp	.+6      	; 0xcf0 <findFiles+0x19c>
     cea:	23 01       	movw	r4, r6
     cec:	3a 01       	movw	r6, r20
     cee:	8a 01       	movw	r16, r20
			{
			  if(flag == GET_FILE)
     cf0:	fc 85       	ldd	r31, Y+12	; 0x0c
     cf2:	f1 30       	cpi	r31, 0x01	; 1
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <findFiles+0x1a4>
     cf6:	41 c0       	rjmp	.+130    	; 0xd7a <findFiles+0x226>
              {
			    appendFileSector = firstSector + sector;
     cf8:	2e 81       	ldd	r18, Y+6	; 0x06
     cfa:	3f 81       	ldd	r19, Y+7	; 0x07
     cfc:	48 85       	ldd	r20, Y+8	; 0x08
     cfe:	59 85       	ldd	r21, Y+9	; 0x09
     d00:	20 93 a5 08 	sts	0x08A5, r18
     d04:	30 93 a6 08 	sts	0x08A6, r19
     d08:	40 93 a7 08 	sts	0x08A7, r20
     d0c:	50 93 a8 08 	sts	0x08A8, r21
				appendFileLocation = i;
     d10:	c2 01       	movw	r24, r4
     d12:	a0 e0       	ldi	r26, 0x00	; 0
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	80 93 78 06 	sts	0x0678, r24
     d1a:	90 93 79 06 	sts	0x0679, r25
     d1e:	a0 93 7a 06 	sts	0x067A, r26
     d22:	b0 93 7b 06 	sts	0x067B, r27
				appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
     d26:	d8 01       	movw	r26, r16
     d28:	54 96       	adiw	r26, 0x14	; 20
     d2a:	8d 91       	ld	r24, X+
     d2c:	9c 91       	ld	r25, X
     d2e:	55 97       	sbiw	r26, 0x15	; 21
     d30:	a0 e0       	ldi	r26, 0x00	; 0
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	dc 01       	movw	r26, r24
     d36:	99 27       	eor	r25, r25
     d38:	88 27       	eor	r24, r24
     d3a:	f8 01       	movw	r30, r16
     d3c:	42 8d       	ldd	r20, Z+26	; 0x1a
     d3e:	53 8d       	ldd	r21, Z+27	; 0x1b
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	84 2b       	or	r24, r20
     d46:	95 2b       	or	r25, r21
     d48:	a6 2b       	or	r26, r22
     d4a:	b7 2b       	or	r27, r23
     d4c:	80 93 9f 08 	sts	0x089F, r24
     d50:	90 93 a0 08 	sts	0x08A0, r25
     d54:	a0 93 a1 08 	sts	0x08A1, r26
     d58:	b0 93 a2 08 	sts	0x08A2, r27
				fileSize = dir->fileSize;
     d5c:	84 8d       	ldd	r24, Z+28	; 0x1c
     d5e:	95 8d       	ldd	r25, Z+29	; 0x1d
     d60:	a6 8d       	ldd	r26, Z+30	; 0x1e
     d62:	b7 8d       	ldd	r27, Z+31	; 0x1f
     d64:	80 93 80 06 	sts	0x0680, r24
     d68:	90 93 81 06 	sts	0x0681, r25
     d6c:	a0 93 82 06 	sts	0x0682, r26
     d70:	b0 93 83 06 	sts	0x0683, r27
			    return (dir);
     d74:	86 2d       	mov	r24, r6
     d76:	97 2d       	mov	r25, r7
     d78:	17 c1       	rjmp	.+558    	; 0xfa8 <findFiles+0x454>
			  }	
			  else    //when flag = DELETE
			  {
			     printf("\n");
     d7a:	8a e0       	ldi	r24, 0x0A	; 10
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
				 printf(("Deleting.."));
     d82:	88 e6       	ldi	r24, 0x68	; 104
     d84:	91 e0       	ldi	r25, 0x01	; 1
     d86:	9f 93       	push	r25
     d88:	8f 93       	push	r24
     d8a:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
				 printf("\n");
     d8e:	8a e0       	ldi	r24, 0x0A	; 10
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
				 printf("\n");
     d96:	8a e0       	ldi	r24, 0x0A	; 10
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
				 firstCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
     d9e:	d8 01       	movw	r26, r16
     da0:	54 96       	adiw	r26, 0x14	; 20
     da2:	8d 90       	ld	r8, X+
     da4:	9c 90       	ld	r9, X
     da6:	55 97       	sbiw	r26, 0x15	; 21
     da8:	a1 2c       	mov	r10, r1
     daa:	b1 2c       	mov	r11, r1
     dac:	54 01       	movw	r10, r8
     dae:	99 24       	eor	r9, r9
     db0:	88 24       	eor	r8, r8
     db2:	5a 96       	adiw	r26, 0x1a	; 26
     db4:	8d 91       	ld	r24, X+
     db6:	9c 91       	ld	r25, X
     db8:	5b 97       	sbiw	r26, 0x1b	; 27
     dba:	a0 e0       	ldi	r26, 0x00	; 0
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	88 2a       	or	r8, r24
     dc0:	99 2a       	or	r9, r25
     dc2:	aa 2a       	or	r10, r26
     dc4:	bb 2a       	or	r11, r27
                
				 //mark file as 'deleted' in FAT table
				 dir->name[0] = DELETED;    
     dc6:	85 ee       	ldi	r24, 0xE5	; 229
     dc8:	f8 01       	movw	r30, r16
     dca:	80 83       	st	Z, r24
				 SD_writeSingleBlock (firstSector+sector);
     dcc:	6e 81       	ldd	r22, Y+6	; 0x06
     dce:	7f 81       	ldd	r23, Y+7	; 0x07
     dd0:	88 85       	ldd	r24, Y+8	; 0x08
     dd2:	99 85       	ldd	r25, Y+9	; 0x09
     dd4:	0e 94 84 12 	call	0x2508	; 0x2508 <SD_writeSingleBlock>
				 			 
				 freeMemoryUpdate (ADD, dir->fileSize);
     dd8:	d8 01       	movw	r26, r16
     dda:	5c 96       	adiw	r26, 0x1c	; 28
     ddc:	4d 91       	ld	r20, X+
     dde:	5d 91       	ld	r21, X+
     de0:	6d 91       	ld	r22, X+
     de2:	7c 91       	ld	r23, X
     de4:	5f 97       	sbiw	r26, 0x1f	; 31
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	0e 94 37 05 	call	0xa6e	; 0xa6e <freeMemoryUpdate>

				 //update next free cluster entry in FSinfo sector
				 cluster = getSetFreeCluster (NEXT_FREE, GET, 0); 
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	a9 01       	movw	r20, r18
     df2:	60 e0       	ldi	r22, 0x00	; 0
     df4:	82 e0       	ldi	r24, 0x02	; 2
     df6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <getSetFreeCluster>
				 if(firstCluster < cluster)
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	86 16       	cp	r8, r22
     e00:	97 06       	cpc	r9, r23
     e02:	a8 06       	cpc	r10, r24
     e04:	b9 06       	cpc	r11, r25
     e06:	30 f4       	brcc	.+12     	; 0xe14 <findFiles+0x2c0>
				     getSetFreeCluster (NEXT_FREE, SET, firstCluster);
     e08:	a5 01       	movw	r20, r10
     e0a:	94 01       	movw	r18, r8
     e0c:	61 e0       	ldi	r22, 0x01	; 1
     e0e:	82 e0       	ldi	r24, 0x02	; 2
     e10:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <getSetFreeCluster>

				 //mark all the clusters allocated to the file as 'free'
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
     e14:	00 e0       	ldi	r16, 0x00	; 0
     e16:	10 e0       	ldi	r17, 0x00	; 0
     e18:	98 01       	movw	r18, r16
     e1a:	40 e0       	ldi	r20, 0x00	; 0
     e1c:	c5 01       	movw	r24, r10
     e1e:	b4 01       	movw	r22, r8
     e20:	0e 94 83 00 	call	0x106	; 0x106 <getSetNextCluster>
     e24:	6b 01       	movw	r12, r22
     e26:	7c 01       	movw	r14, r24
					getSetNextCluster (firstCluster, SET, 0);
     e28:	00 e0       	ldi	r16, 0x00	; 0
     e2a:	10 e0       	ldi	r17, 0x00	; 0
     e2c:	98 01       	movw	r18, r16
     e2e:	41 e0       	ldi	r20, 0x01	; 1
     e30:	c5 01       	movw	r24, r10
     e32:	b4 01       	movw	r22, r8
     e34:	0e 94 83 00 	call	0x106	; 0x106 <getSetNextCluster>
					if(nextCluster > 0x0ffffff6) 
     e38:	b7 ef       	ldi	r27, 0xF7	; 247
     e3a:	cb 16       	cp	r12, r27
     e3c:	bf ef       	ldi	r27, 0xFF	; 255
     e3e:	db 06       	cpc	r13, r27
     e40:	eb 06       	cpc	r14, r27
     e42:	bf e0       	ldi	r27, 0x0F	; 15
     e44:	fb 06       	cpc	r15, r27
     e46:	18 f4       	brcc	.+6      	; 0xe4e <findFiles+0x2fa>
					   {printf(("File deleted!"));return 0;}
					firstCluster = nextCluster;
     e48:	46 01       	movw	r8, r12
     e4a:	57 01       	movw	r10, r14
     e4c:	e3 cf       	rjmp	.-58     	; 0xe14 <findFiles+0x2c0>
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
					getSetNextCluster (firstCluster, SET, 0);
					if(nextCluster > 0x0ffffff6) 
					   {printf(("File deleted!"));return 0;}
     e4e:	83 e7       	ldi	r24, 0x73	; 115
     e50:	91 e0       	ldi	r25, 0x01	; 1
     e52:	9f 93       	push	r25
     e54:	8f 93       	push	r24
     e56:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	a2 c0       	rjmp	.+324    	; 0xfa8 <findFiles+0x454>
			  }
            }
          }
          else  //when flag = GET_LIST
		  {
		     printf("\n");
     e64:	8a e0       	ldi	r24, 0x0A	; 10
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
     e6c:	1a 2d       	mov	r17, r10
     e6e:	0b 2d       	mov	r16, r11
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <findFiles+0x322>
     e72:	0f 5f       	subi	r16, 0xFF	; 255
     e74:	1f 5f       	subi	r17, 0xFF	; 255
			 for(j=0; j<11; j++)
		     {
			   if(j == 8) transmitByte(' ');
     e76:	08 30       	cpi	r16, 0x08	; 8
     e78:	59 f4       	brne	.+22     	; 0xe90 <findFiles+0x33c>
     e7a:	80 e2       	ldi	r24, 0x20	; 32
     e7c:	0e 94 f5 12 	call	0x25ea	; 0x25ea <transmitByte>
			   transmitByte (dir->name[j]);
     e80:	ef 89       	ldd	r30, Y+23	; 0x17
     e82:	f8 8d       	ldd	r31, Y+24	; 0x18
     e84:	e0 0f       	add	r30, r16
     e86:	f1 1d       	adc	r31, r1
     e88:	80 81       	ld	r24, Z
     e8a:	0e 94 f5 12 	call	0x25ea	; 0x25ea <transmitByte>
     e8e:	f1 cf       	rjmp	.-30     	; 0xe72 <findFiles+0x31e>
     e90:	ef 89       	ldd	r30, Y+23	; 0x17
     e92:	f8 8d       	ldd	r31, Y+24	; 0x18
     e94:	e0 0f       	add	r30, r16
     e96:	f1 1d       	adc	r31, r1
     e98:	80 81       	ld	r24, Z
     e9a:	0e 94 f5 12 	call	0x25ea	; 0x25ea <transmitByte>
            }
          }
          else  //when flag = GET_LIST
		  {
		     printf("\n");
			 for(j=0; j<11; j++)
     e9e:	1b 30       	cpi	r17, 0x0B	; 11
     ea0:	40 f3       	brcs	.-48     	; 0xe72 <findFiles+0x31e>
		     {
			   if(j == 8) transmitByte(' ');
			   transmitByte (dir->name[j]);
			 }
		     printf(("   "));
     ea2:	ff 92       	push	r15
     ea4:	ef 92       	push	r14
     ea6:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
		     if((dir->attrib != 0x10) && (dir->attrib != 0x08))
     eaa:	af 89       	ldd	r26, Y+23	; 0x17
     eac:	b8 8d       	ldd	r27, Y+24	; 0x18
     eae:	1b 96       	adiw	r26, 0x0b	; 11
     eb0:	8c 91       	ld	r24, X
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	80 31       	cpi	r24, 0x10	; 16
     eb8:	e1 f0       	breq	.+56     	; 0xef2 <findFiles+0x39e>
     eba:	88 30       	cpi	r24, 0x08	; 8
     ebc:	01 f1       	breq	.+64     	; 0xefe <findFiles+0x3aa>
			 {
			     printf(("FILE" ));
     ebe:	a5 e8       	ldi	r26, 0x85	; 133
     ec0:	b1 e0       	ldi	r27, 0x01	; 1
     ec2:	bf 93       	push	r27
     ec4:	af 93       	push	r26
     ec6:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
		         printf(("   "));
     eca:	ff 92       	push	r15
     ecc:	ef 92       	push	r14
     ece:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
			     displayMemory (LOW, dir->fileSize);
     ed2:	af 89       	ldd	r26, Y+23	; 0x17
     ed4:	b8 8d       	ldd	r27, Y+24	; 0x18
     ed6:	5c 96       	adiw	r26, 0x1c	; 28
     ed8:	4d 91       	ld	r20, X+
     eda:	5d 91       	ld	r21, X+
     edc:	6d 91       	ld	r22, X+
     ede:	7c 91       	ld	r23, X
     ee0:	5f 97       	sbiw	r26, 0x1f	; 31
     ee2:	8b 2d       	mov	r24, r11
     ee4:	0e 94 95 03 	call	0x72a	; 0x72a <displayMemory>
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	0d c0       	rjmp	.+26     	; 0xf0c <findFiles+0x3b8>
			 }
			 else
			   transmitString_F ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
     ef2:	e1 e8       	ldi	r30, 0x81	; 129
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	8e 2f       	mov	r24, r30
     ef8:	df 01       	movw	r26, r30
     efa:	9b 2f       	mov	r25, r27
     efc:	05 c0       	rjmp	.+10     	; 0xf08 <findFiles+0x3b4>
     efe:	ec e7       	ldi	r30, 0x7C	; 124
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	8e 2f       	mov	r24, r30
     f04:	df 01       	movw	r26, r30
     f06:	9b 2f       	mov	r25, r27
     f08:	0e 94 fd 12 	call	0x25fa	; 0x25fa <transmitString_F>
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
     f0c:	b0 e2       	ldi	r27, 0x20	; 32
     f0e:	6b 0e       	add	r6, r27
     f10:	71 1c       	adc	r7, r1
     f12:	80 91 84 06 	lds	r24, 0x0684
     f16:	90 91 85 06 	lds	r25, 0x0685
     f1a:	68 16       	cp	r6, r24
     f1c:	79 06       	cpc	r7, r25
     f1e:	08 f4       	brcc	.+2      	; 0xf22 <findFiles+0x3ce>
     f20:	91 ce       	rjmp	.-734    	; 0xc44 <findFiles+0xf0>

while(1)
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
     f22:	2a 81       	ldd	r18, Y+2	; 0x02
     f24:	3b 81       	ldd	r19, Y+3	; 0x03
     f26:	4c 81       	ldd	r20, Y+4	; 0x04
     f28:	5d 81       	ldd	r21, Y+5	; 0x05
     f2a:	2f 5f       	subi	r18, 0xFF	; 255
     f2c:	3f 4f       	sbci	r19, 0xFF	; 255
     f2e:	4f 4f       	sbci	r20, 0xFF	; 255
     f30:	5f 4f       	sbci	r21, 0xFF	; 255
     f32:	2a 83       	std	Y+2, r18	; 0x02
     f34:	3b 83       	std	Y+3, r19	; 0x03
     f36:	4c 83       	std	Y+4, r20	; 0x04
     f38:	5d 83       	std	Y+5, r21	; 0x05
     f3a:	80 91 92 08 	lds	r24, 0x0892
     f3e:	90 91 93 08 	lds	r25, 0x0893
     f42:	a0 e0       	ldi	r26, 0x00	; 0
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	28 17       	cp	r18, r24
     f48:	39 07       	cpc	r19, r25
     f4a:	4a 07       	cpc	r20, r26
     f4c:	5b 07       	cpc	r21, r27
     f4e:	08 f4       	brcc	.+2      	; 0xf52 <findFiles+0x3fe>
     f50:	59 ce       	rjmp	.-846    	; 0xc04 <findFiles+0xb0>
		  }
       }
     }
   }

   cluster = (getSetNextCluster (cluster, GET, 0));
     f52:	00 e0       	ldi	r16, 0x00	; 0
     f54:	10 e0       	ldi	r17, 0x00	; 0
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	40 e0       	ldi	r20, 0x00	; 0
     f5c:	69 89       	ldd	r22, Y+17	; 0x11
     f5e:	7a 89       	ldd	r23, Y+18	; 0x12
     f60:	8b 89       	ldd	r24, Y+19	; 0x13
     f62:	9c 89       	ldd	r25, Y+20	; 0x14
     f64:	0e 94 83 00 	call	0x106	; 0x106 <getSetNextCluster>
     f68:	69 8b       	std	Y+17, r22	; 0x11
     f6a:	7a 8b       	std	Y+18, r23	; 0x12
     f6c:	8b 8b       	std	Y+19, r24	; 0x13
     f6e:	9c 8b       	std	Y+20, r25	; 0x14

   if(cluster > 0x0ffffff6)
     f70:	67 3f       	cpi	r22, 0xF7	; 247
     f72:	3f ef       	ldi	r19, 0xFF	; 255
     f74:	73 07       	cpc	r23, r19
     f76:	83 07       	cpc	r24, r19
     f78:	3f e0       	ldi	r19, 0x0F	; 15
     f7a:	93 07       	cpc	r25, r19
     f7c:	98 f4       	brcc	.+38     	; 0xfa4 <findFiles+0x450>
   	 return 0;
   if(cluster == 0) 
     f7e:	67 2b       	or	r22, r23
     f80:	68 2b       	or	r22, r24
     f82:	69 2b       	or	r22, r25
     f84:	09 f0       	breq	.+2      	; 0xf88 <findFiles+0x434>
     f86:	1a ce       	rjmp	.-972    	; 0xbbc <findFiles+0x68>
   {printf(("Error in getting cluster"));  return 0;}
     f88:	8a e8       	ldi	r24, 0x8A	; 138
     f8a:	91 e0       	ldi	r25, 0x01	; 1
     f8c:	9f 93       	push	r25
     f8e:	8f 93       	push	r24
     f90:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	05 c0       	rjmp	.+10     	; 0xfa8 <findFiles+0x454>

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
		{
		  if((flag == GET_FILE) || (flag == DELETE))
		      printf(("File does not exist!"));
		  return 0;   
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <findFiles+0x454>
   }

   cluster = (getSetNextCluster (cluster, GET, 0));

   if(cluster > 0x0ffffff6)
   	 return 0;
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	90 e0       	ldi	r25, 0x00	; 0
   if(cluster == 0) 
   {printf(("Error in getting cluster"));  return 0;}
 }
return 0;
}
     fa8:	68 96       	adiw	r28, 0x18	; 24
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	f8 94       	cli
     fae:	de bf       	out	0x3e, r29	; 62
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	cd bf       	out	0x3d, r28	; 61
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	ff 90       	pop	r15
     fbe:	ef 90       	pop	r14
     fc0:	df 90       	pop	r13
     fc2:	cf 90       	pop	r12
     fc4:	bf 90       	pop	r11
     fc6:	af 90       	pop	r10
     fc8:	9f 90       	pop	r9
     fca:	8f 90       	pop	r8
     fcc:	7f 90       	pop	r7
     fce:	6f 90       	pop	r6
     fd0:	5f 90       	pop	r5
     fd2:	4f 90       	pop	r4
     fd4:	3f 90       	pop	r3
     fd6:	2f 90       	pop	r2
     fd8:	08 95       	ret

00000fda <readFile>:
//return: 0, if normal operation or flag is READ
//	      1, if file is already existing and flag = VERIFY
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
     fda:	3f 92       	push	r3
     fdc:	4f 92       	push	r4
     fde:	5f 92       	push	r5
     fe0:	6f 92       	push	r6
     fe2:	7f 92       	push	r7
     fe4:	8f 92       	push	r8
     fe6:	9f 92       	push	r9
     fe8:	af 92       	push	r10
     fea:	bf 92       	push	r11
     fec:	cf 92       	push	r12
     fee:	df 92       	push	r13
     ff0:	ef 92       	push	r14
     ff2:	ff 92       	push	r15
     ff4:	0f 93       	push	r16
     ff6:	1f 93       	push	r17
     ff8:	cf 93       	push	r28
     ffa:	df 93       	push	r29
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	2c 97       	sbiw	r28, 0x0c	; 12
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	de bf       	out	0x3e, r29	; 62
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	cd bf       	out	0x3d, r28	; 61
    100c:	18 2f       	mov	r17, r24
    100e:	7b 01       	movw	r14, r22
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
    1010:	cb 01       	movw	r24, r22
    1012:	0e 94 67 02 	call	0x4ce	; 0x4ce <convertFileName>
if(error) return 2;
    1016:	81 11       	cpse	r24, r1
    1018:	ac c0       	rjmp	.+344    	; 0x1172 <readFile+0x198>

dir = findFiles (GET_FILE, fileName); //get the file location
    101a:	b7 01       	movw	r22, r14
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	0e 94 aa 05 	call	0xb54	; 0xb54 <findFiles>
if(dir == 0) 
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	09 f4       	brne	.+2      	; 0x1028 <readFile+0x4e>
    1026:	a7 c0       	rjmp	.+334    	; 0x1176 <readFile+0x19c>
  return (0);

if(flag == VERIFY) return (1);	//specified file name is already existing
    1028:	11 30       	cpi	r17, 0x01	; 1
    102a:	09 f4       	brne	.+2      	; 0x102e <readFile+0x54>
    102c:	a6 c0       	rjmp	.+332    	; 0x117a <readFile+0x1a0>

cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    102e:	dc 01       	movw	r26, r24
    1030:	54 96       	adiw	r26, 0x14	; 20
    1032:	4d 90       	ld	r4, X+
    1034:	5c 90       	ld	r5, X
    1036:	55 97       	sbiw	r26, 0x15	; 21
    1038:	61 2c       	mov	r6, r1
    103a:	71 2c       	mov	r7, r1
    103c:	32 01       	movw	r6, r4
    103e:	55 24       	eor	r5, r5
    1040:	44 24       	eor	r4, r4
    1042:	5a 96       	adiw	r26, 0x1a	; 26
    1044:	4d 91       	ld	r20, X+
    1046:	5c 91       	ld	r21, X
    1048:	5b 97       	sbiw	r26, 0x1b	; 27
    104a:	60 e0       	ldi	r22, 0x00	; 0
    104c:	70 e0       	ldi	r23, 0x00	; 0
    104e:	93 01       	movw	r18, r6
    1050:	82 01       	movw	r16, r4
    1052:	04 2b       	or	r16, r20
    1054:	15 2b       	or	r17, r21
    1056:	26 2b       	or	r18, r22
    1058:	37 2b       	or	r19, r23
    105a:	09 87       	std	Y+9, r16	; 0x09
    105c:	1a 87       	std	Y+10, r17	; 0x0a
    105e:	2b 87       	std	Y+11, r18	; 0x0b
    1060:	3c 87       	std	Y+12, r19	; 0x0c

fileSize = dir->fileSize;
    1062:	5c 96       	adiw	r26, 0x1c	; 28
    1064:	4d 90       	ld	r4, X+
    1066:	5d 90       	ld	r5, X+
    1068:	6d 90       	ld	r6, X+
    106a:	7c 90       	ld	r7, X
    106c:	5f 97       	sbiw	r26, 0x1f	; 31

printf("\n");
    106e:	8a e0       	ldi	r24, 0x0A	; 10
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
printf("\n");
    1076:	8a e0       	ldi	r24, 0x0A	; 10
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
    107e:	19 82       	std	Y+1, r1	; 0x01
    1080:	1a 82       	std	Y+2, r1	; 0x02
    1082:	1b 82       	std	Y+3, r1	; 0x03
    1084:	1c 82       	std	Y+4, r1	; 0x04

while(1)
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
    1086:	31 2c       	mov	r3, r1
printf("\n");
printf("\n");

while(1)
{
  firstSector = getFirstSector (cluster);
    1088:	69 85       	ldd	r22, Y+9	; 0x09
    108a:	7a 85       	ldd	r23, Y+10	; 0x0a
    108c:	8b 85       	ldd	r24, Y+11	; 0x0b
    108e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1090:	0e 94 62 00 	call	0xc4	; 0xc4 <getFirstSector>
    1094:	6d 83       	std	Y+5, r22	; 0x05
    1096:	7e 83       	std	Y+6, r23	; 0x06
    1098:	8f 83       	std	Y+7, r24	; 0x07
    109a:	98 87       	std	Y+8, r25	; 0x08

  for(j=0; j<sectorPerCluster; j++)
    109c:	80 91 92 08 	lds	r24, 0x0892
    10a0:	90 91 93 08 	lds	r25, 0x0893
    10a4:	89 2b       	or	r24, r25
    10a6:	09 f4       	brne	.+2      	; 0x10aa <readFile+0xd0>
    10a8:	47 c0       	rjmp	.+142    	; 0x1138 <readFile+0x15e>
    10aa:	13 2d       	mov	r17, r3
  {
    SD_readSingleBlock(firstSector + j);
    10ac:	6d 81       	ldd	r22, Y+5	; 0x05
    10ae:	7e 81       	ldd	r23, Y+6	; 0x06
    10b0:	8f 81       	ldd	r24, Y+7	; 0x07
    10b2:	98 85       	ldd	r25, Y+8	; 0x08
    10b4:	61 0f       	add	r22, r17
    10b6:	71 1d       	adc	r23, r1
    10b8:	81 1d       	adc	r24, r1
    10ba:	91 1d       	adc	r25, r1
    10bc:	0e 94 55 12 	call	0x24aa	; 0x24aa <SD_readSingleBlock>
    10c0:	89 80       	ldd	r8, Y+1	; 0x01
    10c2:	9a 80       	ldd	r9, Y+2	; 0x02
    10c4:	ab 80       	ldd	r10, Y+3	; 0x03
    10c6:	bc 80       	ldd	r11, Y+4	; 0x04
    10c8:	22 e0       	ldi	r18, 0x02	; 2
    10ca:	92 0e       	add	r9, r18
    10cc:	a1 1c       	adc	r10, r1
    10ce:	b1 1c       	adc	r11, r1
    10d0:	c9 80       	ldd	r12, Y+1	; 0x01
    10d2:	da 80       	ldd	r13, Y+2	; 0x02
    10d4:	eb 80       	ldd	r14, Y+3	; 0x03
    10d6:	fc 80       	ldd	r15, Y+4	; 0x04
    10d8:	f6 01       	movw	r30, r12
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	9a 81       	ldd	r25, Y+2	; 0x02
    10de:	e8 1b       	sub	r30, r24
    10e0:	f9 0b       	sbc	r31, r25
    
	for(k=0; k<512; k++)
    {
      transmitByte(buffer[k]);
    10e2:	ee 56       	subi	r30, 0x6E	; 110
    10e4:	f9 4f       	sbci	r31, 0xF9	; 249
    10e6:	80 81       	ld	r24, Z
    10e8:	0e 94 f5 12 	call	0x25ea	; 0x25ea <transmitByte>
      if ((byteCounter++) >= fileSize ) return 0;
    10ec:	b7 01       	movw	r22, r14
    10ee:	a6 01       	movw	r20, r12
    10f0:	4f 5f       	subi	r20, 0xFF	; 255
    10f2:	5f 4f       	sbci	r21, 0xFF	; 255
    10f4:	6f 4f       	sbci	r22, 0xFF	; 255
    10f6:	7f 4f       	sbci	r23, 0xFF	; 255
    10f8:	c4 14       	cp	r12, r4
    10fa:	d5 04       	cpc	r13, r5
    10fc:	e6 04       	cpc	r14, r6
    10fe:	f7 04       	cpc	r15, r7
    1100:	f0 f5       	brcc	.+124    	; 0x117e <readFile+0x1a4>

  for(j=0; j<sectorPerCluster; j++)
  {
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
    1102:	48 15       	cp	r20, r8
    1104:	59 05       	cpc	r21, r9
    1106:	6a 05       	cpc	r22, r10
    1108:	7b 05       	cpc	r23, r11
    110a:	19 f0       	breq	.+6      	; 0x1112 <readFile+0x138>
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    110c:	6a 01       	movw	r12, r20
    110e:	7b 01       	movw	r14, r22
    1110:	e3 cf       	rjmp	.-58     	; 0x10d8 <readFile+0xfe>

while(1)
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
    1112:	1f 5f       	subi	r17, 0xFF	; 255
    1114:	80 91 92 08 	lds	r24, 0x0892
    1118:	90 91 93 08 	lds	r25, 0x0893
    111c:	21 2f       	mov	r18, r17
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	28 17       	cp	r18, r24
    1122:	39 07       	cpc	r19, r25
    1124:	28 f4       	brcc	.+10     	; 0x1130 <readFile+0x156>
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    1126:	49 83       	std	Y+1, r20	; 0x01
    1128:	5a 83       	std	Y+2, r21	; 0x02
    112a:	6b 83       	std	Y+3, r22	; 0x03
    112c:	7c 83       	std	Y+4, r23	; 0x04
    112e:	be cf       	rjmp	.-132    	; 0x10ac <readFile+0xd2>
    1130:	49 83       	std	Y+1, r20	; 0x01
    1132:	5a 83       	std	Y+2, r21	; 0x02
    1134:	6b 83       	std	Y+3, r22	; 0x03
    1136:	7c 83       	std	Y+4, r23	; 0x04
    }
  }
  cluster = getSetNextCluster (cluster, GET, 0);
    1138:	00 e0       	ldi	r16, 0x00	; 0
    113a:	10 e0       	ldi	r17, 0x00	; 0
    113c:	98 01       	movw	r18, r16
    113e:	43 2d       	mov	r20, r3
    1140:	69 85       	ldd	r22, Y+9	; 0x09
    1142:	7a 85       	ldd	r23, Y+10	; 0x0a
    1144:	8b 85       	ldd	r24, Y+11	; 0x0b
    1146:	9c 85       	ldd	r25, Y+12	; 0x0c
    1148:	0e 94 83 00 	call	0x106	; 0x106 <getSetNextCluster>
    114c:	69 87       	std	Y+9, r22	; 0x09
    114e:	7a 87       	std	Y+10, r23	; 0x0a
    1150:	8b 87       	std	Y+11, r24	; 0x0b
    1152:	9c 87       	std	Y+12, r25	; 0x0c
  if(cluster == 0) {printf(("Error in getting cluster")); return 0;}
    1154:	67 2b       	or	r22, r23
    1156:	68 2b       	or	r22, r24
    1158:	69 2b       	or	r22, r25
    115a:	09 f0       	breq	.+2      	; 0x115e <readFile+0x184>
    115c:	95 cf       	rjmp	.-214    	; 0x1088 <readFile+0xae>
    115e:	8a e8       	ldi	r24, 0x8A	; 138
    1160:	91 e0       	ldi	r25, 0x01	; 1
    1162:	9f 93       	push	r25
    1164:	8f 93       	push	r24
    1166:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	07 c0       	rjmp	.+14     	; 0x1180 <readFile+0x1a6>
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
if(error) return 2;
    1172:	82 e0       	ldi	r24, 0x02	; 2
    1174:	05 c0       	rjmp	.+10     	; 0x1180 <readFile+0x1a6>

dir = findFiles (GET_FILE, fileName); //get the file location
if(dir == 0) 
  return (0);
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	03 c0       	rjmp	.+6      	; 0x1180 <readFile+0x1a6>

if(flag == VERIFY) return (1);	//specified file name is already existing
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	01 c0       	rjmp	.+2      	; 0x1180 <readFile+0x1a6>
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    117e:	80 e0       	ldi	r24, 0x00	; 0
  }
  cluster = getSetNextCluster (cluster, GET, 0);
  if(cluster == 0) {printf(("Error in getting cluster")); return 0;}
}
return 0;
}
    1180:	2c 96       	adiw	r28, 0x0c	; 12
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	f8 94       	cli
    1186:	de bf       	out	0x3e, r29	; 62
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	cd bf       	out	0x3d, r28	; 61
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	1f 91       	pop	r17
    1192:	0f 91       	pop	r16
    1194:	ff 90       	pop	r15
    1196:	ef 90       	pop	r14
    1198:	df 90       	pop	r13
    119a:	cf 90       	pop	r12
    119c:	bf 90       	pop	r11
    119e:	af 90       	pop	r10
    11a0:	9f 90       	pop	r9
    11a2:	8f 90       	pop	r8
    11a4:	7f 90       	pop	r7
    11a6:	6f 90       	pop	r6
    11a8:	5f 90       	pop	r5
    11aa:	4f 90       	pop	r4
    11ac:	3f 90       	pop	r3
    11ae:	08 95       	ret

000011b0 <deleteFile>:
//Function: to delete a specified file from the root directory
//Arguments: pointer to the file name
//return: none
//********************************************************************
void deleteFile (unsigned char *fileName)
{
    11b0:	cf 93       	push	r28
    11b2:	df 93       	push	r29
    11b4:	ec 01       	movw	r28, r24
  unsigned char error;

  error = convertFileName (fileName);
    11b6:	0e 94 67 02 	call	0x4ce	; 0x4ce <convertFileName>
  if(error) return;
    11ba:	81 11       	cpse	r24, r1
    11bc:	04 c0       	rjmp	.+8      	; 0x11c6 <deleteFile+0x16>

  findFiles (DELETE, fileName);
    11be:	be 01       	movw	r22, r28
    11c0:	82 e0       	ldi	r24, 0x02	; 2
    11c2:	0e 94 aa 05 	call	0xb54	; 0xb54 <findFiles>
}
    11c6:	df 91       	pop	r29
    11c8:	cf 91       	pop	r28
    11ca:	08 95       	ret

000011cc <writeFile>:
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
    11cc:	2f 92       	push	r2
    11ce:	3f 92       	push	r3
    11d0:	4f 92       	push	r4
    11d2:	5f 92       	push	r5
    11d4:	6f 92       	push	r6
    11d6:	7f 92       	push	r7
    11d8:	8f 92       	push	r8
    11da:	9f 92       	push	r9
    11dc:	af 92       	push	r10
    11de:	bf 92       	push	r11
    11e0:	cf 92       	push	r12
    11e2:	df 92       	push	r13
    11e4:	ef 92       	push	r14
    11e6:	ff 92       	push	r15
    11e8:	0f 93       	push	r16
    11ea:	1f 93       	push	r17
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	66 97       	sbiw	r28, 0x16	; 22
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	de bf       	out	0x3e, r29	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	cd bf       	out	0x3d, r28	; 61
    1200:	8e 83       	std	Y+6, r24	; 0x06
    1202:	9b 87       	std	Y+11, r25	; 0x0b
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector;
unsigned int i, firstClusterHigh, firstClusterLow;
struct dir_Structure *dir;
unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;

j = readFile (VERIFY, fileName);
    1204:	68 2f       	mov	r22, r24
    1206:	79 2f       	mov	r23, r25
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	0e 94 ed 07 	call	0xfda	; 0xfda <readFile>

if(j == 1) 
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	09 f0       	breq	.+2      	; 0x1214 <writeFile+0x48>
    1212:	57 c0       	rjmp	.+174    	; 0x12c2 <writeFile+0xf6>
{
  printf(("  File already existing, appending data..")); 
    1214:	83 ea       	ldi	r24, 0xA3	; 163
    1216:	91 e0       	ldi	r25, 0x01	; 1
    1218:	9f 93       	push	r25
    121a:	8f 93       	push	r24
    121c:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
  appendFile = 1;
  cluster = appendStartCluster;
    1220:	c0 90 9f 08 	lds	r12, 0x089F
    1224:	d0 90 a0 08 	lds	r13, 0x08A0
    1228:	e0 90 a1 08 	lds	r14, 0x08A1
    122c:	f0 90 a2 08 	lds	r15, 0x08A2
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
  clusterCount=0;
    1234:	81 2c       	mov	r8, r1
    1236:	91 2c       	mov	r9, r1
    1238:	54 01       	movw	r10, r8
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    123a:	00 e0       	ldi	r16, 0x00	; 0
    123c:	10 e0       	ldi	r17, 0x00	; 0
    123e:	98 01       	movw	r18, r16
    1240:	40 e0       	ldi	r20, 0x00	; 0
    1242:	c7 01       	movw	r24, r14
    1244:	b6 01       	movw	r22, r12
    1246:	0e 94 83 00 	call	0x106	; 0x106 <getSetNextCluster>
    if(nextCluster == EOF) break;
    124a:	6f 3f       	cpi	r22, 0xFF	; 255
    124c:	2f ef       	ldi	r18, 0xFF	; 255
    124e:	72 07       	cpc	r23, r18
    1250:	82 07       	cpc	r24, r18
    1252:	2f e0       	ldi	r18, 0x0F	; 15
    1254:	92 07       	cpc	r25, r18
    1256:	41 f0       	breq	.+16     	; 0x1268 <writeFile+0x9c>
	cluster = nextCluster;
	clusterCount++;
    1258:	3f ef       	ldi	r19, 0xFF	; 255
    125a:	83 1a       	sub	r8, r19
    125c:	93 0a       	sbc	r9, r19
    125e:	a3 0a       	sbc	r10, r19
    1260:	b3 0a       	sbc	r11, r19
  clusterCount=0;
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    if(nextCluster == EOF) break;
	cluster = nextCluster;
    1262:	6b 01       	movw	r12, r22
    1264:	7c 01       	movw	r14, r24
	clusterCount++;
  }
    1266:	e9 cf       	rjmp	.-46     	; 0x123a <writeFile+0x6e>

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
    1268:	a0 91 92 08 	lds	r26, 0x0892
    126c:	b0 91 93 08 	lds	r27, 0x0893
    1270:	20 91 84 06 	lds	r18, 0x0684
    1274:	30 91 85 06 	lds	r19, 0x0685
    1278:	e0 91 84 06 	lds	r30, 0x0684
    127c:	f0 91 85 06 	lds	r31, 0x0685
    1280:	0e 94 58 13 	call	0x26b0	; 0x26b0 <__umulhisi3>
    1284:	9b 01       	movw	r18, r22
    1286:	ac 01       	movw	r20, r24
    1288:	c5 01       	movw	r24, r10
    128a:	b4 01       	movw	r22, r8
    128c:	0e 94 20 13 	call	0x2640	; 0x2640 <__mulsi3>
    1290:	00 91 80 06 	lds	r16, 0x0680
    1294:	10 91 81 06 	lds	r17, 0x0681
    1298:	20 91 82 06 	lds	r18, 0x0682
    129c:	30 91 83 06 	lds	r19, 0x0683
    12a0:	48 01       	movw	r8, r16
    12a2:	59 01       	movw	r10, r18
    12a4:	86 1a       	sub	r8, r22
    12a6:	97 0a       	sbc	r9, r23
    12a8:	a8 0a       	sbc	r10, r24
    12aa:	b9 0a       	sbc	r11, r25
    12ac:	c5 01       	movw	r24, r10
    12ae:	b4 01       	movw	r22, r8
    12b0:	9f 01       	movw	r18, r30
    12b2:	40 e0       	ldi	r20, 0x00	; 0
    12b4:	50 e0       	ldi	r21, 0x00	; 0
    12b6:	0e 94 30 13 	call	0x2660	; 0x2660 <__udivmodsi4>
    12ba:	b2 2e       	mov	r11, r18
  start = 1;
    12bc:	21 e0       	ldi	r18, 0x01	; 1
    12be:	2c 87       	std	Y+12, r18	; 0x0c
    12c0:	55 c0       	rjmp	.+170    	; 0x136c <writeFile+0x1a0>
//  appendFile();
//  return;
}
else if(j == 2) 
    12c2:	82 30       	cpi	r24, 0x02	; 2
    12c4:	09 f4       	brne	.+2      	; 0x12c8 <writeFile+0xfc>
    12c6:	74 c3       	rjmp	.+1768   	; 0x19b0 <writeFile+0x7e4>
   return; //invalid file name
else
{
  printf("\n");
    12c8:	8a e0       	ldi	r24, 0x0A	; 10
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
  printf((" Creating File.."));
    12d0:	8d ec       	ldi	r24, 0xCD	; 205
    12d2:	91 e0       	ldi	r25, 0x01	; 1
    12d4:	9f 93       	push	r25
    12d6:	8f 93       	push	r24
    12d8:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>

  cluster = getSetFreeCluster (NEXT_FREE, GET, 0);
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	a9 01       	movw	r20, r18
    12e2:	60 e0       	ldi	r22, 0x00	; 0
    12e4:	82 e0       	ldi	r24, 0x02	; 2
    12e6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <getSetFreeCluster>
  if(cluster > totalClusters)
    12ea:	00 91 86 06 	lds	r16, 0x0686
    12ee:	10 91 87 06 	lds	r17, 0x0687
    12f2:	20 91 88 06 	lds	r18, 0x0688
    12f6:	30 91 89 06 	lds	r19, 0x0689
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	06 17       	cp	r16, r22
    1300:	17 07       	cpc	r17, r23
    1302:	28 07       	cpc	r18, r24
    1304:	39 07       	cpc	r19, r25
    1306:	40 f4       	brcc	.+16     	; 0x1318 <writeFile+0x14c>
     cluster = rootCluster;
    1308:	60 91 8a 06 	lds	r22, 0x068A
    130c:	70 91 8b 06 	lds	r23, 0x068B
    1310:	80 91 8c 06 	lds	r24, 0x068C
    1314:	90 91 8d 06 	lds	r25, 0x068D

  cluster = searchNextFreeCluster(cluster);
    1318:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <searchNextFreeCluster>
    131c:	6b 01       	movw	r12, r22
    131e:	7c 01       	movw	r14, r24
   if(cluster == 0)
    1320:	61 15       	cp	r22, r1
    1322:	71 05       	cpc	r23, r1
    1324:	81 05       	cpc	r24, r1
    1326:	91 05       	cpc	r25, r1
    1328:	69 f4       	brne	.+26     	; 0x1344 <writeFile+0x178>
   {
      printf("\n");
    132a:	8a e0       	ldi	r24, 0x0A	; 10
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
      printf((" No free cluster!"));
    1332:	8e ed       	ldi	r24, 0xDE	; 222
    1334:	91 e0       	ldi	r25, 0x01	; 1
    1336:	9f 93       	push	r25
    1338:	8f 93       	push	r24
    133a:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
	  return;
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	36 c3       	rjmp	.+1644   	; 0x19b0 <writeFile+0x7e4>
   }
  getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    1344:	0f ef       	ldi	r16, 0xFF	; 255
    1346:	1f ef       	ldi	r17, 0xFF	; 255
    1348:	2f ef       	ldi	r18, 0xFF	; 255
    134a:	3f e0       	ldi	r19, 0x0F	; 15
    134c:	41 e0       	ldi	r20, 0x01	; 1
    134e:	0e 94 83 00 	call	0x106	; 0x106 <getSetNextCluster>
   
  firstClusterHigh = (unsigned int) ((cluster & 0xffff0000) >> 16 );
    1352:	f9 8a       	std	Y+17, r15	; 0x11
    1354:	e8 8a       	std	Y+16, r14	; 0x10
  firstClusterLow = (unsigned int) ( cluster & 0x0000ffff);
    1356:	db 8a       	std	Y+19, r13	; 0x13
    1358:	ca 8a       	std	Y+18, r12	; 0x12
  fileSize = 0;
    135a:	10 92 80 06 	sts	0x0680, r1
    135e:	10 92 81 06 	sts	0x0681, r1
    1362:	10 92 82 06 	sts	0x0682, r1
    1366:	10 92 83 06 	sts	0x0683, r1
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector;
    136a:	1c 86       	std	Y+12, r1	; 0x0c
    136c:	8c 85       	ldd	r24, Y+12	; 0x0c
    136e:	61 2c       	mov	r6, r1
   }
   else
   {
      startBlock = getFirstSector (cluster);
	  i=0;
	  j=0;
    1370:	71 2c       	mov	r7, r1
while(1)
{
   if(start)
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    1372:	2b 2d       	mov	r18, r11
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	40 e0       	ldi	r20, 0x00	; 0
    1378:	50 e0       	ldi	r21, 0x00	; 0
    137a:	2a 83       	std	Y+2, r18	; 0x02
    137c:	3b 83       	std	Y+3, r19	; 0x03
    137e:	4c 83       	std	Y+4, r20	; 0x04
    1380:	5d 83       	std	Y+5, r21	; 0x05
	  SD_readSingleBlock (startBlock);
	  i = fileSize % bytesPerSector;
	  j = sector;
    1382:	bf 82       	std	Y+7, r11	; 0x07
     buffer[i++] = data;
	 fileSize++;
     if(data == '\r')  //'Carriege Return (CR)' character
     {
        if(i == 512)
		   sectorEndFlag = 1;  //flag to indicate that the appended '\n' char should be put in the next sector
    1384:	88 24       	eor	r8, r8
    1386:	83 94       	inc	r8
   }
   else
   {
      startBlock = getFirstSector (cluster);
	  i=0;
	  j=0;
    1388:	b7 2c       	mov	r11, r7
     buffer[i++] = data;
	 fileSize++;
     if(data == '\r')  //'Carriege Return (CR)' character
     {
        if(i == 512)
		   sectorEndFlag = 1;  //flag to indicate that the appended '\n' char should be put in the next sector
    138a:	89 82       	std	Y+1, r8	; 0x01
	    }
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
    138c:	91 2c       	mov	r9, r1
    138e:	a1 2c       	mov	r10, r1



while(1)
{
   if(start)
    1390:	88 23       	and	r24, r24
    1392:	89 f1       	breq	.+98     	; 0x13f6 <writeFile+0x22a>
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    1394:	c7 01       	movw	r24, r14
    1396:	b6 01       	movw	r22, r12
    1398:	0e 94 62 00 	call	0xc4	; 0xc4 <getFirstSector>
    139c:	2a 81       	ldd	r18, Y+2	; 0x02
    139e:	3b 81       	ldd	r19, Y+3	; 0x03
    13a0:	4c 81       	ldd	r20, Y+4	; 0x04
    13a2:	5d 81       	ldd	r21, Y+5	; 0x05
    13a4:	26 0f       	add	r18, r22
    13a6:	37 1f       	adc	r19, r23
    13a8:	48 1f       	adc	r20, r24
    13aa:	59 1f       	adc	r21, r25
    13ac:	20 93 8e 06 	sts	0x068E, r18
    13b0:	30 93 8f 06 	sts	0x068F, r19
    13b4:	40 93 90 06 	sts	0x0690, r20
    13b8:	50 93 91 06 	sts	0x0691, r21
	  SD_readSingleBlock (startBlock);
    13bc:	60 91 8e 06 	lds	r22, 0x068E
    13c0:	70 91 8f 06 	lds	r23, 0x068F
    13c4:	80 91 90 06 	lds	r24, 0x0690
    13c8:	90 91 91 06 	lds	r25, 0x0691
    13cc:	0e 94 55 12 	call	0x24aa	; 0x24aa <SD_readSingleBlock>
	  i = fileSize % bytesPerSector;
    13d0:	20 91 84 06 	lds	r18, 0x0684
    13d4:	30 91 85 06 	lds	r19, 0x0685
    13d8:	40 e0       	ldi	r20, 0x00	; 0
    13da:	50 e0       	ldi	r21, 0x00	; 0
    13dc:	60 91 80 06 	lds	r22, 0x0680
    13e0:	70 91 81 06 	lds	r23, 0x0681
    13e4:	80 91 82 06 	lds	r24, 0x0682
    13e8:	90 91 83 06 	lds	r25, 0x0683
    13ec:	0e 94 30 13 	call	0x2660	; 0x2660 <__udivmodsi4>
    13f0:	1b 01       	movw	r2, r22
	  j = sector;
    13f2:	4f 80       	ldd	r4, Y+7	; 0x07
    13f4:	0f c0       	rjmp	.+30     	; 0x1414 <writeFile+0x248>
   }
   else
   {
      startBlock = getFirstSector (cluster);
    13f6:	c7 01       	movw	r24, r14
    13f8:	b6 01       	movw	r22, r12
    13fa:	0e 94 62 00 	call	0xc4	; 0xc4 <getFirstSector>
    13fe:	60 93 8e 06 	sts	0x068E, r22
    1402:	70 93 8f 06 	sts	0x068F, r23
    1406:	80 93 90 06 	sts	0x0690, r24
    140a:	90 93 91 06 	sts	0x0691, r25
	  i=0;
    140e:	21 2c       	mov	r2, r1
    1410:	31 2c       	mov	r3, r1
	  j=0;
    1412:	47 2c       	mov	r4, r7
   }
   

   printf("\n");
    1414:	8a e0       	ldi	r24, 0x0A	; 10
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
   printf((" Enter text (end with ~):"));
    141c:	a0 ef       	ldi	r26, 0xF0	; 240
    141e:	b1 e0       	ldi	r27, 0x01	; 1
    1420:	bf 93       	push	r27
    1422:	af 93       	push	r26
    1424:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	16 2d       	mov	r17, r6
   
   do
   {
     if(sectorEndFlag == 1) //special case when the last character in previous sector was '\r'
    142e:	11 30       	cpi	r17, 0x01	; 1
    1430:	f9 f4       	brne	.+62     	; 0x1470 <writeFile+0x2a4>
	 {
	 	transmitByte ('\n');
    1432:	8a e0       	ldi	r24, 0x0A	; 10
    1434:	0e 94 f5 12 	call	0x25ea	; 0x25ea <transmitByte>
        buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    1438:	f1 01       	movw	r30, r2
    143a:	ee 56       	subi	r30, 0x6E	; 110
    143c:	f9 4f       	sbci	r31, 0xF9	; 249
    143e:	8a e0       	ldi	r24, 0x0A	; 10
    1440:	80 83       	st	Z, r24
		fileSize++;
    1442:	80 91 80 06 	lds	r24, 0x0680
    1446:	90 91 81 06 	lds	r25, 0x0681
    144a:	a0 91 82 06 	lds	r26, 0x0682
    144e:	b0 91 83 06 	lds	r27, 0x0683
    1452:	01 96       	adiw	r24, 0x01	; 1
    1454:	a1 1d       	adc	r26, r1
    1456:	b1 1d       	adc	r27, r1
    1458:	80 93 80 06 	sts	0x0680, r24
    145c:	90 93 81 06 	sts	0x0681, r25
    1460:	a0 93 82 06 	sts	0x0682, r26
    1464:	b0 93 83 06 	sts	0x0683, r27
   do
   {
     if(sectorEndFlag == 1) //special case when the last character in previous sector was '\r'
	 {
	 	transmitByte ('\n');
        buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    1468:	91 01       	movw	r18, r2
    146a:	2f 5f       	subi	r18, 0xFF	; 255
    146c:	3f 4f       	sbci	r19, 0xFF	; 255
    146e:	19 01       	movw	r2, r18
		fileSize++;
	 }

	sectorEndFlag = 0;

	 data = receiveByte();
    1470:	0e 94 ed 12 	call	0x25da	; 0x25da <receiveByte>
    1474:	58 2e       	mov	r5, r24
	 if(data == 0x08)	//'Back Space' key pressed
    1476:	38 e0       	ldi	r19, 0x08	; 8
    1478:	83 13       	cpse	r24, r19
    147a:	24 c0       	rjmp	.+72     	; 0x14c4 <writeFile+0x2f8>
	 { 
	   if(i != 0)
    147c:	21 14       	cp	r2, r1
    147e:	31 04       	cpc	r3, r1
    1480:	09 f4       	brne	.+2      	; 0x1484 <writeFile+0x2b8>
    1482:	80 c2       	rjmp	.+1280   	; 0x1984 <writeFile+0x7b8>
	   { 
	     transmitByte(data);
    1484:	88 e0       	ldi	r24, 0x08	; 8
    1486:	0e 94 f5 12 	call	0x25ea	; 0x25ea <transmitByte>
		 transmitByte(' '); 
    148a:	80 e2       	ldi	r24, 0x20	; 32
    148c:	0e 94 f5 12 	call	0x25ea	; 0x25ea <transmitByte>
	     transmitByte(data); 
    1490:	88 e0       	ldi	r24, 0x08	; 8
    1492:	0e 94 f5 12 	call	0x25ea	; 0x25ea <transmitByte>
	     i--; 
    1496:	41 e0       	ldi	r20, 0x01	; 1
    1498:	24 1a       	sub	r2, r20
    149a:	31 08       	sbc	r3, r1
		 fileSize--;
    149c:	80 91 80 06 	lds	r24, 0x0680
    14a0:	90 91 81 06 	lds	r25, 0x0681
    14a4:	a0 91 82 06 	lds	r26, 0x0682
    14a8:	b0 91 83 06 	lds	r27, 0x0683
    14ac:	01 97       	sbiw	r24, 0x01	; 1
    14ae:	a1 09       	sbc	r26, r1
    14b0:	b1 09       	sbc	r27, r1
    14b2:	80 93 80 06 	sts	0x0680, r24
    14b6:	90 93 81 06 	sts	0x0681, r25
    14ba:	a0 93 82 06 	sts	0x0682, r26
    14be:	b0 93 83 06 	sts	0x0683, r27
    14c2:	60 c2       	rjmp	.+1216   	; 0x1984 <writeFile+0x7b8>
	   } 
	   continue;     
	 }
	 transmitByte(data);
    14c4:	0e 94 f5 12 	call	0x25ea	; 0x25ea <transmitByte>
     buffer[i++] = data;
    14c8:	81 01       	movw	r16, r2
    14ca:	0f 5f       	subi	r16, 0xFF	; 255
    14cc:	1f 4f       	sbci	r17, 0xFF	; 255
    14ce:	f1 01       	movw	r30, r2
    14d0:	ee 56       	subi	r30, 0x6E	; 110
    14d2:	f9 4f       	sbci	r31, 0xF9	; 249
    14d4:	50 82       	st	Z, r5
	 fileSize++;
    14d6:	80 91 80 06 	lds	r24, 0x0680
    14da:	90 91 81 06 	lds	r25, 0x0681
    14de:	a0 91 82 06 	lds	r26, 0x0682
    14e2:	b0 91 83 06 	lds	r27, 0x0683
    14e6:	01 96       	adiw	r24, 0x01	; 1
    14e8:	a1 1d       	adc	r26, r1
    14ea:	b1 1d       	adc	r27, r1
    14ec:	80 93 80 06 	sts	0x0680, r24
    14f0:	90 93 81 06 	sts	0x0681, r25
    14f4:	a0 93 82 06 	sts	0x0682, r26
    14f8:	b0 93 83 06 	sts	0x0683, r27
     if(data == '\r')  //'Carriege Return (CR)' character
    14fc:	5d e0       	ldi	r21, 0x0D	; 13
    14fe:	55 12       	cpse	r5, r21
    1500:	21 c0       	rjmp	.+66     	; 0x1544 <writeFile+0x378>
     {
        if(i == 512)
    1502:	01 15       	cp	r16, r1
    1504:	82 e0       	ldi	r24, 0x02	; 2
    1506:	18 07       	cpc	r17, r24
    1508:	19 f1       	breq	.+70     	; 0x1550 <writeFile+0x384>
		   sectorEndFlag = 1;  //flag to indicate that the appended '\n' char should be put in the next sector
	    else
		{ 
		   transmitByte ('\n');
    150a:	8a e0       	ldi	r24, 0x0A	; 10
    150c:	0e 94 f5 12 	call	0x25ea	; 0x25ea <transmitByte>
           buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    1510:	f8 01       	movw	r30, r16
    1512:	ee 56       	subi	r30, 0x6E	; 110
    1514:	f9 4f       	sbci	r31, 0xF9	; 249
    1516:	8a e0       	ldi	r24, 0x0A	; 10
    1518:	80 83       	st	Z, r24
		   fileSize++;
    151a:	80 91 80 06 	lds	r24, 0x0680
    151e:	90 91 81 06 	lds	r25, 0x0681
    1522:	a0 91 82 06 	lds	r26, 0x0682
    1526:	b0 91 83 06 	lds	r27, 0x0683
    152a:	01 96       	adiw	r24, 0x01	; 1
    152c:	a1 1d       	adc	r26, r1
    152e:	b1 1d       	adc	r27, r1
    1530:	80 93 80 06 	sts	0x0680, r24
    1534:	90 93 81 06 	sts	0x0681, r25
    1538:	a0 93 82 06 	sts	0x0682, r26
    153c:	b0 93 83 06 	sts	0x0683, r27
        if(i == 512)
		   sectorEndFlag = 1;  //flag to indicate that the appended '\n' char should be put in the next sector
	    else
		{ 
		   transmitByte ('\n');
           buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    1540:	0f 5f       	subi	r16, 0xFF	; 255
    1542:	1f 4f       	sbci	r17, 0xFF	; 255
		   fileSize++;
	    }
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
    1544:	01 15       	cp	r16, r1
    1546:	92 e0       	ldi	r25, 0x02	; 2
    1548:	19 07       	cpc	r17, r25
    154a:	68 f1       	brcs	.+90     	; 0x15a6 <writeFile+0x3da>
    154c:	1b 2d       	mov	r17, r11
    154e:	01 c0       	rjmp	.+2      	; 0x1552 <writeFile+0x386>
     buffer[i++] = data;
	 fileSize++;
     if(data == '\r')  //'Carriege Return (CR)' character
     {
        if(i == 512)
		   sectorEndFlag = 1;  //flag to indicate that the appended '\n' char should be put in the next sector
    1550:	19 81       	ldd	r17, Y+1	; 0x01
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
	   error = SD_writeSingleBlock (startBlock);
    1552:	60 91 8e 06 	lds	r22, 0x068E
    1556:	70 91 8f 06 	lds	r23, 0x068F
    155a:	80 91 90 06 	lds	r24, 0x0690
    155e:	90 91 91 06 	lds	r25, 0x0691
    1562:	0e 94 84 12 	call	0x2508	; 0x2508 <SD_writeSingleBlock>
       j++;
    1566:	43 94       	inc	r4
	   if(j == sectorPerCluster) {j = 0; break;}
    1568:	80 91 92 08 	lds	r24, 0x0892
    156c:	90 91 93 08 	lds	r25, 0x0893
    1570:	24 2d       	mov	r18, r4
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	28 17       	cp	r18, r24
    1576:	39 07       	cpc	r19, r25
    1578:	e1 f0       	breq	.+56     	; 0x15b2 <writeFile+0x3e6>
	   startBlock++; 
    157a:	80 91 8e 06 	lds	r24, 0x068E
    157e:	90 91 8f 06 	lds	r25, 0x068F
    1582:	a0 91 90 06 	lds	r26, 0x0690
    1586:	b0 91 91 06 	lds	r27, 0x0691
    158a:	01 96       	adiw	r24, 0x01	; 1
    158c:	a1 1d       	adc	r26, r1
    158e:	b1 1d       	adc	r27, r1
    1590:	80 93 8e 06 	sts	0x068E, r24
    1594:	90 93 8f 06 	sts	0x068F, r25
    1598:	a0 93 90 06 	sts	0x0690, r26
    159c:	b0 93 91 06 	sts	0x0691, r27
	    }
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
    15a0:	29 2c       	mov	r2, r9
    15a2:	3a 2c       	mov	r3, r10
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <writeFile+0x3de>
    15a6:	18 01       	movw	r2, r16
    15a8:	1b 2d       	mov	r17, r11
	   error = SD_writeSingleBlock (startBlock);
       j++;
	   if(j == sectorPerCluster) {j = 0; break;}
	   startBlock++; 
     }
	}while (data != '~');
    15aa:	ae e7       	ldi	r26, 0x7E	; 126
    15ac:	5a 12       	cpse	r5, r26
    15ae:	3f cf       	rjmp	.-386    	; 0x142e <writeFile+0x262>
    15b0:	05 c0       	rjmp	.+10     	; 0x15bc <writeFile+0x3f0>
    15b2:	61 2e       	mov	r6, r17

   if(data == '~') 
    15b4:	be e7       	ldi	r27, 0x7E	; 126
    15b6:	5b 12       	cpse	r5, r27
    15b8:	3a c0       	rjmp	.+116    	; 0x162e <writeFile+0x462>
    15ba:	e6 c1       	rjmp	.+972    	; 0x1988 <writeFile+0x7bc>
   {
      fileSize--;	//to remove the last entered '~' character
    15bc:	80 91 80 06 	lds	r24, 0x0680
    15c0:	90 91 81 06 	lds	r25, 0x0681
    15c4:	a0 91 82 06 	lds	r26, 0x0682
    15c8:	b0 91 83 06 	lds	r27, 0x0683
    15cc:	01 97       	sbiw	r24, 0x01	; 1
    15ce:	a1 09       	sbc	r26, r1
    15d0:	b1 09       	sbc	r27, r1
    15d2:	80 93 80 06 	sts	0x0680, r24
    15d6:	90 93 81 06 	sts	0x0681, r25
    15da:	a0 93 82 06 	sts	0x0682, r26
    15de:	b0 93 83 06 	sts	0x0683, r27
	  i--;
    15e2:	91 01       	movw	r18, r2
    15e4:	21 50       	subi	r18, 0x01	; 1
    15e6:	31 09       	sbc	r19, r1
	  for(;i<512;i++)  //fill the rest of the buffer with 0x00
    15e8:	21 15       	cp	r18, r1
    15ea:	e2 e0       	ldi	r30, 0x02	; 2
    15ec:	3e 07       	cpc	r19, r30
    15ee:	50 f4       	brcc	.+20     	; 0x1604 <writeFile+0x438>
        buffer[i]= 0x00;
    15f0:	f9 01       	movw	r30, r18
    15f2:	ee 56       	subi	r30, 0x6E	; 110
    15f4:	f9 4f       	sbci	r31, 0xF9	; 249
    15f6:	10 82       	st	Z, r1

   if(data == '~') 
   {
      fileSize--;	//to remove the last entered '~' character
	  i--;
	  for(;i<512;i++)  //fill the rest of the buffer with 0x00
    15f8:	2f 5f       	subi	r18, 0xFF	; 255
    15fa:	3f 4f       	sbci	r19, 0xFF	; 255
    15fc:	21 15       	cp	r18, r1
    15fe:	f2 e0       	ldi	r31, 0x02	; 2
    1600:	3f 07       	cpc	r19, r31
    1602:	b1 f7       	brne	.-20     	; 0x15f0 <writeFile+0x424>
        buffer[i]= 0x00;
   	  error = SD_writeSingleBlock (startBlock);
    1604:	60 91 8e 06 	lds	r22, 0x068E
    1608:	70 91 8f 06 	lds	r23, 0x068F
    160c:	80 91 90 06 	lds	r24, 0x0690
    1610:	90 91 91 06 	lds	r25, 0x0691
    1614:	0e 94 84 12 	call	0x2508	; 0x2508 <SD_writeSingleBlock>

   getSetNextCluster(prevCluster, SET, cluster);
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
}        

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry
    1618:	a7 01       	movw	r20, r14
    161a:	96 01       	movw	r18, r12
    161c:	61 e0       	ldi	r22, 0x01	; 1
    161e:	82 e0       	ldi	r24, 0x02	; 2
    1620:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <getSetFreeCluster>

if(appendFile)  //executes this loop if file is to be appended
    1624:	8c 84       	ldd	r8, Y+12	; 0x0c
    1626:	88 20       	and	r8, r8
    1628:	09 f4       	brne	.+2      	; 0x162c <writeFile+0x460>
    162a:	73 c0       	rjmp	.+230    	; 0x1712 <writeFile+0x546>
    162c:	2c c0       	rjmp	.+88     	; 0x1686 <writeFile+0x4ba>
      break;
   } 
	  
   prevCluster = cluster;

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    162e:	c7 01       	movw	r24, r14
    1630:	b6 01       	movw	r22, r12
    1632:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <searchNextFreeCluster>
    1636:	1b 01       	movw	r2, r22
    1638:	2c 01       	movw	r4, r24

   if(cluster == 0)
    163a:	61 15       	cp	r22, r1
    163c:	71 05       	cpc	r23, r1
    163e:	81 05       	cpc	r24, r1
    1640:	91 05       	cpc	r25, r1
    1642:	69 f4       	brne	.+26     	; 0x165e <writeFile+0x492>
   {
      printf("\n");
    1644:	8a e0       	ldi	r24, 0x0A	; 10
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
      printf((" No free cluster!"));
    164c:	8e ed       	ldi	r24, 0xDE	; 222
    164e:	91 e0       	ldi	r25, 0x01	; 1
    1650:	9f 93       	push	r25
    1652:	8f 93       	push	r24
    1654:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
	  return;
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	a9 c1       	rjmp	.+850    	; 0x19b0 <writeFile+0x7e4>
   }

   getSetNextCluster(prevCluster, SET, cluster);
    165e:	8b 01       	movw	r16, r22
    1660:	9c 01       	movw	r18, r24
    1662:	48 2d       	mov	r20, r8
    1664:	c7 01       	movw	r24, r14
    1666:	b6 01       	movw	r22, r12
    1668:	0e 94 83 00 	call	0x106	; 0x106 <getSetNextCluster>
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    166c:	0f ef       	ldi	r16, 0xFF	; 255
    166e:	1f ef       	ldi	r17, 0xFF	; 255
    1670:	2f ef       	ldi	r18, 0xFF	; 255
    1672:	3f e0       	ldi	r19, 0x0F	; 15
    1674:	48 2d       	mov	r20, r8
    1676:	c2 01       	movw	r24, r4
    1678:	b1 01       	movw	r22, r2
    167a:	0e 94 83 00 	call	0x106	; 0x106 <getSetNextCluster>
    167e:	87 2d       	mov	r24, r7
      break;
   } 
	  
   prevCluster = cluster;

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    1680:	72 01       	movw	r14, r4
    1682:	61 01       	movw	r12, r2
	  return;
   }

   getSetNextCluster(prevCluster, SET, cluster);
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
}        
    1684:	85 ce       	rjmp	.-758    	; 0x1390 <writeFile+0x1c4>

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry

if(appendFile)  //executes this loop if file is to be appended
{
  SD_readSingleBlock (appendFileSector);    
    1686:	60 91 a5 08 	lds	r22, 0x08A5
    168a:	70 91 a6 08 	lds	r23, 0x08A6
    168e:	80 91 a7 08 	lds	r24, 0x08A7
    1692:	90 91 a8 08 	lds	r25, 0x08A8
    1696:	0e 94 55 12 	call	0x24aa	; 0x24aa <SD_readSingleBlock>
  dir = (struct dir_Structure *) &buffer[appendFileLocation]; 
    169a:	e0 91 78 06 	lds	r30, 0x0678
    169e:	f0 91 79 06 	lds	r31, 0x0679
    16a2:	ee 56       	subi	r30, 0x6E	; 110
    16a4:	f9 4f       	sbci	r31, 0xF9	; 249
  extraMemory = fileSize - dir->fileSize;
    16a6:	80 91 80 06 	lds	r24, 0x0680
    16aa:	90 91 81 06 	lds	r25, 0x0681
    16ae:	a0 91 82 06 	lds	r26, 0x0682
    16b2:	b0 91 83 06 	lds	r27, 0x0683
    16b6:	44 8d       	ldd	r20, Z+28	; 0x1c
    16b8:	55 8d       	ldd	r21, Z+29	; 0x1d
    16ba:	66 8d       	ldd	r22, Z+30	; 0x1e
    16bc:	77 8d       	ldd	r23, Z+31	; 0x1f
    16be:	6c 01       	movw	r12, r24
    16c0:	7d 01       	movw	r14, r26
    16c2:	c4 1a       	sub	r12, r20
    16c4:	d5 0a       	sbc	r13, r21
    16c6:	e6 0a       	sbc	r14, r22
    16c8:	f7 0a       	sbc	r15, r23
  dir->fileSize = fileSize;
    16ca:	84 8f       	std	Z+28, r24	; 0x1c
    16cc:	95 8f       	std	Z+29, r25	; 0x1d
    16ce:	a6 8f       	std	Z+30, r26	; 0x1e
    16d0:	b7 8f       	std	Z+31, r27	; 0x1f
  SD_writeSingleBlock (appendFileSector);
    16d2:	60 91 a5 08 	lds	r22, 0x08A5
    16d6:	70 91 a6 08 	lds	r23, 0x08A6
    16da:	80 91 a7 08 	lds	r24, 0x08A7
    16de:	90 91 a8 08 	lds	r25, 0x08A8
    16e2:	0e 94 84 12 	call	0x2508	; 0x2508 <SD_writeSingleBlock>
  freeMemoryUpdate (REMOVE, extraMemory); //updating free memory count in FSinfo sector;
    16e6:	b7 01       	movw	r22, r14
    16e8:	a6 01       	movw	r20, r12
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	0e 94 37 05 	call	0xa6e	; 0xa6e <freeMemoryUpdate>

  
  printf("\n");
    16f0:	8a e0       	ldi	r24, 0x0A	; 10
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
  printf((" File appended!"));
    16f8:	8a e0       	ldi	r24, 0x0A	; 10
    16fa:	92 e0       	ldi	r25, 0x02	; 2
    16fc:	9f 93       	push	r25
    16fe:	8f 93       	push	r24
    1700:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
  printf("\n");
    1704:	8a e0       	ldi	r24, 0x0A	; 10
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
  return;
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	4f c1       	rjmp	.+670    	; 0x19b0 <writeFile+0x7e4>
}

//executes following portion when new file is created

prevCluster = rootCluster; //root cluster
    1712:	80 90 8a 06 	lds	r8, 0x068A
    1716:	90 90 8b 06 	lds	r9, 0x068B
    171a:	a0 90 8c 06 	lds	r10, 0x068C
    171e:	b0 90 8d 06 	lds	r11, 0x068D
    1722:	8f 82       	std	Y+7, r8	; 0x07
    1724:	98 86       	std	Y+8, r9	; 0x08
    1726:	a9 86       	std	Y+9, r10	; 0x09
    1728:	ba 86       	std	Y+10, r11	; 0x0a
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector;
    172a:	31 2c       	mov	r3, r1
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &buffer[i];
    172c:	0f 2e       	mov	r0, r31
    172e:	f2 e9       	ldi	r31, 0x92	; 146
    1730:	8f 2e       	mov	r8, r31
    1732:	f6 e0       	ldi	r31, 0x06	; 6
    1734:	9f 2e       	mov	r9, r31
    1736:	f0 2d       	mov	r31, r0
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
		  dir->NTreserved = 0;			//always set to 0
		  dir->timeTenth = 0;			//always set to 0
		  dir->createTime = 0x9684;		//fixed time of creation
    1738:	0f 2e       	mov	r0, r31
    173a:	f4 e8       	ldi	r31, 0x84	; 132
    173c:	af 2e       	mov	r10, r31
    173e:	f6 e9       	ldi	r31, 0x96	; 150
    1740:	bf 2e       	mov	r11, r31
    1742:	f0 2d       	mov	r31, r0
		  dir->createDate = 0x3a37;		//fixed date of creation
    1744:	0f 2e       	mov	r0, r31
    1746:	f7 e3       	ldi	r31, 0x37	; 55
    1748:	4f 2e       	mov	r4, r31
    174a:	fa e3       	ldi	r31, 0x3A	; 58
    174c:	5f 2e       	mov	r5, r31
    174e:	f0 2d       	mov	r31, r0
		  SD_writeSingleBlock (firstSector + sector);
		  fileCreatedFlag = 1;

		  printf("\n");
		  printf("\n");
		  printf((" File Created!"));
    1750:	0f 2e       	mov	r0, r31
    1752:	fa e1       	ldi	r31, 0x1A	; 26
    1754:	6f 2e       	mov	r6, r31
    1756:	f2 e0       	ldi	r31, 0x02	; 2
    1758:	7f 2e       	mov	r7, r31
    175a:	f0 2d       	mov	r31, r0
    175c:	2b 84       	ldd	r2, Y+11	; 0x0b
    175e:	39 82       	std	Y+1, r3	; 0x01
    1760:	9d 8a       	std	Y+21, r9	; 0x15
    1762:	8c 8a       	std	Y+20, r8	; 0x14
    1764:	2e 8a       	std	Y+22, r2	; 0x16
    1766:	2a 88       	ldd	r2, Y+18	; 0x12
    1768:	3b 88       	ldd	r3, Y+19	; 0x13

prevCluster = rootCluster; //root cluster

while(1)
{
   firstSector = getFirstSector (prevCluster);
    176a:	6f 81       	ldd	r22, Y+7	; 0x07
    176c:	78 85       	ldd	r23, Y+8	; 0x08
    176e:	89 85       	ldd	r24, Y+9	; 0x09
    1770:	9a 85       	ldd	r25, Y+10	; 0x0a
    1772:	0e 94 62 00 	call	0xc4	; 0xc4 <getFirstSector>
    1776:	6c 87       	std	Y+12, r22	; 0x0c
    1778:	7d 87       	std	Y+13, r23	; 0x0d
    177a:	8e 87       	std	Y+14, r24	; 0x0e
    177c:	9f 87       	std	Y+15, r25	; 0x0f

   for(sector = 0; sector < sectorPerCluster; sector++)
    177e:	80 91 92 08 	lds	r24, 0x0892
    1782:	90 91 93 08 	lds	r25, 0x0893
    1786:	89 2b       	or	r24, r25
    1788:	09 f4       	brne	.+2      	; 0x178c <writeFile+0x5c0>
    178a:	a2 c0       	rjmp	.+324    	; 0x18d0 <writeFile+0x704>
    178c:	1b 86       	std	Y+11, r1	; 0x0b

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    178e:	00 e2       	ldi	r16, 0x20	; 32
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    1790:	0f 2e       	mov	r0, r31
    1792:	fb e0       	ldi	r31, 0x0B	; 11
    1794:	9f 2e       	mov	r9, r31
    1796:	f0 2d       	mov	r31, r0
    1798:	9a 82       	std	Y+2, r9	; 0x02
    179a:	88 88       	ldd	r8, Y+16	; 0x10
    179c:	99 88       	ldd	r9, Y+17	; 0x11
    179e:	1e 89       	ldd	r17, Y+22	; 0x16
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
    17a0:	cc 84       	ldd	r12, Y+12	; 0x0c
    17a2:	dd 84       	ldd	r13, Y+13	; 0x0d
    17a4:	ee 84       	ldd	r14, Y+14	; 0x0e
    17a6:	ff 84       	ldd	r15, Y+15	; 0x0f
    17a8:	3b 85       	ldd	r19, Y+11	; 0x0b
    17aa:	c3 0e       	add	r12, r19
    17ac:	d1 1c       	adc	r13, r1
    17ae:	e1 1c       	adc	r14, r1
    17b0:	f1 1c       	adc	r15, r1
    17b2:	c7 01       	movw	r24, r14
    17b4:	b6 01       	movw	r22, r12
    17b6:	0e 94 55 12 	call	0x24aa	; 0x24aa <SD_readSingleBlock>
	

     for(i=0; i<bytesPerSector; i+=32)
    17ba:	80 91 84 06 	lds	r24, 0x0684
    17be:	90 91 85 06 	lds	r25, 0x0685
    17c2:	89 2b       	or	r24, r25
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <writeFile+0x5fc>
    17c6:	74 c0       	rjmp	.+232    	; 0x18b0 <writeFile+0x6e4>
     {
	    dir = (struct dir_Structure *) &buffer[i];

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
    17c8:	49 81       	ldd	r20, Y+1	; 0x01
    17ca:	44 23       	and	r20, r20
    17cc:	69 f0       	breq	.+26     	; 0x17e8 <writeFile+0x61c>
    17ce:	07 c0       	rjmp	.+14     	; 0x17de <writeFile+0x612>
    17d0:	8a 89       	ldd	r24, Y+18	; 0x12
    17d2:	9b 89       	ldd	r25, Y+19	; 0x13
    17d4:	8e 56       	subi	r24, 0x6E	; 110
    17d6:	99 4f       	sbci	r25, 0xF9	; 249
    17d8:	22 23       	and	r18, r18
    17da:	51 f0       	breq	.+20     	; 0x17f0 <writeFile+0x624>
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <writeFile+0x616>
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &buffer[i];
    17de:	82 e9       	ldi	r24, 0x92	; 146
    17e0:	96 e0       	ldi	r25, 0x06	; 6

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
		 { 					  //indicating end of the directory file list
		   dir->name[0] = 0x00;
    17e2:	dc 01       	movw	r26, r24
    17e4:	1c 92       	st	X, r1
           return;
    17e6:	e4 c0       	rjmp	.+456    	; 0x19b0 <writeFile+0x7e4>
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &buffer[i];
    17e8:	8c 89       	ldd	r24, Y+20	; 0x14
    17ea:	9d 89       	ldd	r25, Y+21	; 0x15
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    17ec:	1a 8a       	std	Y+18, r1	; 0x12
    17ee:	1b 8a       	std	Y+19, r1	; 0x13
		 { 					  //indicating end of the directory file list
		   dir->name[0] = 0x00;
           return;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    17f0:	dc 01       	movw	r26, r24
    17f2:	2c 91       	ld	r18, X
    17f4:	22 23       	and	r18, r18
    17f6:	19 f0       	breq	.+6      	; 0x17fe <writeFile+0x632>
    17f8:	25 3e       	cpi	r18, 0xE5	; 229
    17fa:	09 f0       	breq	.+2      	; 0x17fe <writeFile+0x632>
    17fc:	4a c0       	rjmp	.+148    	; 0x1892 <writeFile+0x6c6>
    17fe:	4e 81       	ldd	r20, Y+6	; 0x06
    1800:	51 2f       	mov	r21, r17
    1802:	dc 01       	movw	r26, r24
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    1804:	2a 81       	ldd	r18, Y+2	; 0x02
    1806:	fa 01       	movw	r30, r20
    1808:	4a 89       	ldd	r20, Y+18	; 0x12
    180a:	5b 89       	ldd	r21, Y+19	; 0x13
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
    180c:	31 91       	ld	r19, Z+
    180e:	3d 93       	st	X+, r19
    1810:	21 50       	subi	r18, 0x01	; 1
           return;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
    1812:	e1 f7       	brne	.-8      	; 0x180c <writeFile+0x640>
    1814:	5b 8b       	std	Y+19, r21	; 0x13
    1816:	4a 8b       	std	Y+18, r20	; 0x12
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    1818:	fc 01       	movw	r30, r24
    181a:	03 87       	std	Z+11, r16	; 0x0b
		  dir->NTreserved = 0;			//always set to 0
    181c:	14 86       	std	Z+12, r1	; 0x0c
		  dir->timeTenth = 0;			//always set to 0
    181e:	15 86       	std	Z+13, r1	; 0x0d
		  dir->createTime = 0x9684;		//fixed time of creation
    1820:	b7 86       	std	Z+15, r11	; 0x0f
    1822:	a6 86       	std	Z+14, r10	; 0x0e
		  dir->createDate = 0x3a37;		//fixed date of creation
    1824:	51 8a       	std	Z+17, r5	; 0x11
    1826:	40 8a       	std	Z+16, r4	; 0x10
		  dir->lastAccessDate = 0x3a37;	//fixed date of last access
    1828:	53 8a       	std	Z+19, r5	; 0x13
    182a:	42 8a       	std	Z+18, r4	; 0x12
		  dir->writeTime = 0x9684;		//fixed time of last write
    182c:	b7 8a       	std	Z+23, r11	; 0x17
    182e:	a6 8a       	std	Z+22, r10	; 0x16
		  dir->writeDate = 0x3a37;		//fixed date of last write
    1830:	51 8e       	std	Z+25, r5	; 0x19
    1832:	40 8e       	std	Z+24, r4	; 0x18
		  dir->firstClusterHI = firstClusterHigh;
    1834:	95 8a       	std	Z+21, r9	; 0x15
    1836:	84 8a       	std	Z+20, r8	; 0x14
		  dir->firstClusterLO = firstClusterLow;
    1838:	33 8e       	std	Z+27, r3	; 0x1b
    183a:	22 8e       	std	Z+26, r2	; 0x1a
		  dir->fileSize = fileSize;
    183c:	40 91 80 06 	lds	r20, 0x0680
    1840:	50 91 81 06 	lds	r21, 0x0681
    1844:	60 91 82 06 	lds	r22, 0x0682
    1848:	70 91 83 06 	lds	r23, 0x0683
    184c:	44 8f       	std	Z+28, r20	; 0x1c
    184e:	55 8f       	std	Z+29, r21	; 0x1d
    1850:	66 8f       	std	Z+30, r22	; 0x1e
    1852:	77 8f       	std	Z+31, r23	; 0x1f

		  SD_writeSingleBlock (firstSector + sector);
    1854:	c7 01       	movw	r24, r14
    1856:	b6 01       	movw	r22, r12
    1858:	0e 94 84 12 	call	0x2508	; 0x2508 <SD_writeSingleBlock>
		  fileCreatedFlag = 1;

		  printf("\n");
    185c:	8a e0       	ldi	r24, 0x0A	; 10
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
		  printf("\n");
    1864:	8a e0       	ldi	r24, 0x0A	; 10
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
		  printf((" File Created!"));
    186c:	7f 92       	push	r7
    186e:	6f 92       	push	r6
    1870:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>

		  freeMemoryUpdate (REMOVE, fileSize); //updating free memory count in FSinfo sector
    1874:	40 91 80 06 	lds	r20, 0x0680
    1878:	50 91 81 06 	lds	r21, 0x0681
    187c:	60 91 82 06 	lds	r22, 0x0682
    1880:	70 91 83 06 	lds	r23, 0x0683
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	0e 94 37 05 	call	0xa6e	; 0xa6e <freeMemoryUpdate>
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
		  dir->firstClusterHI = firstClusterHigh;
		  dir->firstClusterLO = firstClusterLow;
		  dir->fileSize = fileSize;

		  SD_writeSingleBlock (firstSector + sector);
		  fileCreatedFlag = 1;
    188e:	21 e0       	ldi	r18, 0x01	; 1
    1890:	01 c0       	rjmp	.+2      	; 0x1894 <writeFile+0x6c8>
    1892:	29 81       	ldd	r18, Y+1	; 0x01
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    1894:	ea 89       	ldd	r30, Y+18	; 0x12
    1896:	fb 89       	ldd	r31, Y+19	; 0x13
    1898:	b0 96       	adiw	r30, 0x20	; 32
    189a:	fb 8b       	std	Y+19, r31	; 0x13
    189c:	ea 8b       	std	Y+18, r30	; 0x12
    189e:	80 91 84 06 	lds	r24, 0x0684
    18a2:	90 91 85 06 	lds	r25, 0x0685
    18a6:	e8 17       	cp	r30, r24
    18a8:	f9 07       	cpc	r31, r25
    18aa:	08 f4       	brcc	.+2      	; 0x18ae <writeFile+0x6e2>
    18ac:	91 cf       	rjmp	.-222    	; 0x17d0 <writeFile+0x604>
    18ae:	01 c0       	rjmp	.+2      	; 0x18b2 <writeFile+0x6e6>
    18b0:	29 81       	ldd	r18, Y+1	; 0x01

while(1)
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    18b2:	fb 85       	ldd	r31, Y+11	; 0x0b
    18b4:	ff 5f       	subi	r31, 0xFF	; 255
    18b6:	fb 87       	std	Y+11, r31	; 0x0b
    18b8:	80 91 92 08 	lds	r24, 0x0892
    18bc:	90 91 93 08 	lds	r25, 0x0893
    18c0:	4f 2f       	mov	r20, r31
    18c2:	50 e0       	ldi	r21, 0x00	; 0
    18c4:	48 17       	cp	r20, r24
    18c6:	59 07       	cpc	r21, r25
    18c8:	10 f4       	brcc	.+4      	; 0x18ce <writeFile+0x702>
    18ca:	29 83       	std	Y+1, r18	; 0x01
    18cc:	69 cf       	rjmp	.-302    	; 0x17a0 <writeFile+0x5d4>
    18ce:	29 83       	std	Y+1, r18	; 0x01
	     
        }
     }
   }

   cluster = getSetNextCluster (prevCluster, GET, 0);
    18d0:	00 e0       	ldi	r16, 0x00	; 0
    18d2:	10 e0       	ldi	r17, 0x00	; 0
    18d4:	98 01       	movw	r18, r16
    18d6:	40 e0       	ldi	r20, 0x00	; 0
    18d8:	6f 81       	ldd	r22, Y+7	; 0x07
    18da:	78 85       	ldd	r23, Y+8	; 0x08
    18dc:	89 85       	ldd	r24, Y+9	; 0x09
    18de:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e0:	0e 94 83 00 	call	0x106	; 0x106 <getSetNextCluster>

   if(cluster > 0x0ffffff6)
    18e4:	67 3f       	cpi	r22, 0xF7	; 247
    18e6:	2f ef       	ldi	r18, 0xFF	; 255
    18e8:	72 07       	cpc	r23, r18
    18ea:	82 07       	cpc	r24, r18
    18ec:	2f e0       	ldi	r18, 0x0F	; 15
    18ee:	92 07       	cpc	r25, r18
    18f0:	98 f1       	brcs	.+102    	; 0x1958 <writeFile+0x78c>
   {
      if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
    18f2:	6f 3f       	cpi	r22, 0xFF	; 255
    18f4:	7f 4f       	sbci	r23, 0xFF	; 255
    18f6:	8f 4f       	sbci	r24, 0xFF	; 255
    18f8:	9f 40       	sbci	r25, 0x0F	; 15
    18fa:	29 f5       	brne	.+74     	; 0x1946 <writeFile+0x77a>
	  {  
		cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
    18fc:	6f 81       	ldd	r22, Y+7	; 0x07
    18fe:	78 85       	ldd	r23, Y+8	; 0x08
    1900:	89 85       	ldd	r24, Y+9	; 0x09
    1902:	9a 85       	ldd	r25, Y+10	; 0x0a
    1904:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <searchNextFreeCluster>
    1908:	e6 2e       	mov	r14, r22
    190a:	f7 2e       	mov	r15, r23
    190c:	c8 2e       	mov	r12, r24
    190e:	d9 2e       	mov	r13, r25
		getSetNextCluster(prevCluster, SET, cluster); //link the new cluster of root to the previous cluster
    1910:	06 2f       	mov	r16, r22
    1912:	17 2f       	mov	r17, r23
    1914:	28 2f       	mov	r18, r24
    1916:	39 2f       	mov	r19, r25
    1918:	41 e0       	ldi	r20, 0x01	; 1
    191a:	6f 81       	ldd	r22, Y+7	; 0x07
    191c:	78 85       	ldd	r23, Y+8	; 0x08
    191e:	89 85       	ldd	r24, Y+9	; 0x09
    1920:	9a 85       	ldd	r25, Y+10	; 0x0a
    1922:	0e 94 83 00 	call	0x106	; 0x106 <getSetNextCluster>
		getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
    1926:	0f ef       	ldi	r16, 0xFF	; 255
    1928:	1f ef       	ldi	r17, 0xFF	; 255
    192a:	2f ef       	ldi	r18, 0xFF	; 255
    192c:	3f e0       	ldi	r19, 0x0F	; 15
    192e:	41 e0       	ldi	r20, 0x01	; 1
    1930:	6e 2d       	mov	r22, r14
    1932:	7f 2d       	mov	r23, r15
    1934:	8c 2d       	mov	r24, r12
    1936:	9d 2d       	mov	r25, r13
    1938:	0e 94 83 00 	call	0x106	; 0x106 <getSetNextCluster>

   if(cluster > 0x0ffffff6)
   {
      if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
	  {  
		cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
    193c:	ef 82       	std	Y+7, r14	; 0x07
    193e:	f8 86       	std	Y+8, r15	; 0x08
    1940:	c9 86       	std	Y+9, r12	; 0x09
    1942:	da 86       	std	Y+10, r13	; 0x0a
    1944:	0d c0       	rjmp	.+26     	; 0x1960 <writeFile+0x794>
		getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
      } 

      else
      {	
	    printf(("End of Cluster Chain")); 
    1946:	89 e2       	ldi	r24, 0x29	; 41
    1948:	92 e0       	ldi	r25, 0x02	; 2
    194a:	9f 93       	push	r25
    194c:	8f 93       	push	r24
    194e:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
	    return;
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	2c c0       	rjmp	.+88     	; 0x19b0 <writeFile+0x7e4>
	     
        }
     }
   }

   cluster = getSetNextCluster (prevCluster, GET, 0);
    1958:	6f 83       	std	Y+7, r22	; 0x07
    195a:	78 87       	std	Y+8, r23	; 0x08
    195c:	89 87       	std	Y+9, r24	; 0x09
    195e:	9a 87       	std	Y+10, r25	; 0x0a
      {	
	    printf(("End of Cluster Chain")); 
	    return;
      }
   }
   if(cluster == 0) {printf(("Error in getting cluster")); return;}
    1960:	8f 81       	ldd	r24, Y+7	; 0x07
    1962:	98 85       	ldd	r25, Y+8	; 0x08
    1964:	a9 85       	ldd	r26, Y+9	; 0x09
    1966:	ba 85       	ldd	r27, Y+10	; 0x0a
    1968:	89 2b       	or	r24, r25
    196a:	8a 2b       	or	r24, r26
    196c:	8b 2b       	or	r24, r27
    196e:	09 f0       	breq	.+2      	; 0x1972 <writeFile+0x7a6>
    1970:	fc ce       	rjmp	.-520    	; 0x176a <writeFile+0x59e>
    1972:	8a e8       	ldi	r24, 0x8A	; 138
    1974:	91 e0       	ldi	r25, 0x01	; 1
    1976:	9f 93       	push	r25
    1978:	8f 93       	push	r24
    197a:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	16 c0       	rjmp	.+44     	; 0x19b0 <writeFile+0x7e4>
   }
   else
   {
      startBlock = getFirstSector (cluster);
	  i=0;
	  j=0;
    1984:	1b 2d       	mov	r17, r11
    1986:	53 cd       	rjmp	.-1370   	; 0x142e <writeFile+0x262>
     }
	}while (data != '~');

   if(data == '~') 
   {
      fileSize--;	//to remove the last entered '~' character
    1988:	80 91 80 06 	lds	r24, 0x0680
    198c:	90 91 81 06 	lds	r25, 0x0681
    1990:	a0 91 82 06 	lds	r26, 0x0682
    1994:	b0 91 83 06 	lds	r27, 0x0683
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	a1 09       	sbc	r26, r1
    199c:	b1 09       	sbc	r27, r1
    199e:	80 93 80 06 	sts	0x0680, r24
    19a2:	90 93 81 06 	sts	0x0681, r25
    19a6:	a0 93 82 06 	sts	0x0682, r26
    19aa:	b0 93 83 06 	sts	0x0683, r27
    19ae:	2a ce       	rjmp	.-940    	; 0x1604 <writeFile+0x438>
   
   prevCluster = cluster;
 }
 
 return;
}
    19b0:	66 96       	adiw	r28, 0x16	; 22
    19b2:	0f b6       	in	r0, 0x3f	; 63
    19b4:	f8 94       	cli
    19b6:	de bf       	out	0x3e, r29	; 62
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	cd bf       	out	0x3d, r28	; 61
    19bc:	df 91       	pop	r29
    19be:	cf 91       	pop	r28
    19c0:	1f 91       	pop	r17
    19c2:	0f 91       	pop	r16
    19c4:	ff 90       	pop	r15
    19c6:	ef 90       	pop	r14
    19c8:	df 90       	pop	r13
    19ca:	cf 90       	pop	r12
    19cc:	bf 90       	pop	r11
    19ce:	af 90       	pop	r10
    19d0:	9f 90       	pop	r9
    19d2:	8f 90       	pop	r8
    19d4:	7f 90       	pop	r7
    19d6:	6f 90       	pop	r6
    19d8:	5f 90       	pop	r5
    19da:	4f 90       	pop	r4
    19dc:	3f 90       	pop	r3
    19de:	2f 90       	pop	r2
    19e0:	08 95       	ret

000019e2 <UARTPutChar>:

// the following function sends a single character out of the serial port
static int UARTPutChar(char ch, FILE *stream)
{

    while ( (UCSR0A & (1 << UDRE0)) == 0 )		// wait until there is room in the transmit buffer
    19e2:	e0 ec       	ldi	r30, 0xC0	; 192
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	90 81       	ld	r25, Z
    19e8:	95 ff       	sbrs	r25, 5
    19ea:	fd cf       	rjmp	.-6      	; 0x19e6 <UARTPutChar+0x4>
	{
	}

    UDR0 = ch;									// load the character into the UART data register
    19ec:	80 93 c6 00 	sts	0x00C6, r24

    return 0;
}
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	08 95       	ret

000019f6 <UARTGetChar>:
// the following function waits for a serial character to be received
static int UARTGetChar(FILE *stream)
{
   unsigned char ch;   							// create a variable to hold the received value
   
   while ( (UCSR0A & (1<<RXC0)) == 0 )			// wait until the received character flag is set
    19f6:	e0 ec       	ldi	r30, 0xC0	; 192
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	88 23       	and	r24, r24
    19fe:	ec f7       	brge	.-6      	; 0x19fa <UARTGetChar+0x4>
   {
   }
   
   ch=UDR0;  									// load the received character into the local variable
    1a00:	80 91 c6 00 	lds	r24, 0x00C6


   return ch;									// return the value
}
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	08 95       	ret

00001a08 <InitUART>:


void InitUART(void)
{

	UCSR0A = 0x00;			
    1a08:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x18;			// enable UART TX and RX
    1a0c:	88 e1       	ldi	r24, 0x18	; 24
    1a0e:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = 0x06;			// set the UART for N, 8, 1
    1a12:	86 e0       	ldi	r24, 0x06	; 6
    1a14:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0L = 8;				// set BAUD Rate for 115200 with 16MHz clock
    1a18:	88 e0       	ldi	r24, 0x08	; 8
    1a1a:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0;
    1a1e:	10 92 c5 00 	sts	0x00C5, r1

	stdout = &mystdout;		// define the output stream
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	91 e0       	ldi	r25, 0x01	; 1
    1a26:	90 93 ac 08 	sts	0x08AC, r25
    1a2a:	80 93 ab 08 	sts	0x08AB, r24
	stdin = &mystdout;		// define the input stream	
    1a2e:	90 93 aa 08 	sts	0x08AA, r25
    1a32:	80 93 a9 08 	sts	0x08A9, r24
    1a36:	08 95       	ret

00001a38 <port_init>:
void port_init(void)
{
    //PORTA = 0x00;		//no port A on this device, leave commented out for now
    //DDRA  = 0x00;

    PORTB = 0xEF;
    1a38:	8f ee       	ldi	r24, 0xEF	; 239
    1a3a:	85 b9       	out	0x05, r24	; 5
    DDRB  = 0xBF;       //MISO line i/p, rest o/p
    1a3c:	8f eb       	ldi	r24, 0xBF	; 191
    1a3e:	84 b9       	out	0x04, r24	; 4

    PORTC = 0x00;
    1a40:	18 b8       	out	0x08, r1	; 8
    DDRC  = 0x00;
    1a42:	17 b8       	out	0x07, r1	; 7

    PORTD = 0x00;
    1a44:	1b b8       	out	0x0b, r1	; 11
    PORTD |= (1<<5);    //output high on CS pin
    1a46:	5d 9a       	sbi	0x0b, 5	; 11
    DDRD  = 0xFE;
    1a48:	8e ef       	ldi	r24, 0xFE	; 254
    1a4a:	8a b9       	out	0x0a, r24	; 10
    1a4c:	08 95       	ret

00001a4e <init_devices>:


//call this routine to initialize all peripherals
void init_devices(void)
{
	cli();  //all interrupts disabled
    1a4e:	f8 94       	cli
	port_init();
    1a50:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <port_init>
	spi_init();
    1a54:	0e 94 ce 12 	call	0x259c	; 0x259c <spi_init>
	uart0_init();
    1a58:	0e 94 df 12 	call	0x25be	; 0x25be <uart0_init>
    1a5c:	08 95       	ret

00001a5e <main>:
	//all peripherals are now initialized
}

//*************************** MAIN *******************************//
int main(void)
{
    1a5e:	cf 93       	push	r28
    1a60:	df 93       	push	r29
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
    1a66:	2f 97       	sbiw	r28, 0x0f	; 15
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	f8 94       	cli
    1a6c:	de bf       	out	0x3e, r29	; 62
    1a6e:	0f be       	out	0x3f, r0	; 63
    1a70:	cd bf       	out	0x3d, r28	; 61
	InitUART();
    1a72:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <InitUART>
	
	printf("\nI'm about to init some variables...");
    1a76:	8e e3       	ldi	r24, 0x3E	; 62
    1a78:	92 e0       	ldi	r25, 0x02	; 2
    1a7a:	9f 93       	push	r25
    1a7c:	8f 93       	push	r24
    1a7e:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
	unsigned char option, error, data, FAT32_active;
	unsigned int i;
	unsigned char fileName[13];
	printf("init done.");
    1a82:	83 e6       	ldi	r24, 0x63	; 99
    1a84:	92 e0       	ldi	r25, 0x02	; 2
    1a86:	9f 93       	push	r25
    1a88:	8f 93       	push	r24
    1a8a:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a8e:	2f ef       	ldi	r18, 0xFF	; 255
    1a90:	31 ee       	ldi	r19, 0xE1	; 225
    1a92:	84 e0       	ldi	r24, 0x04	; 4
    1a94:	21 50       	subi	r18, 0x01	; 1
    1a96:	30 40       	sbci	r19, 0x00	; 0
    1a98:	80 40       	sbci	r24, 0x00	; 0
    1a9a:	e1 f7       	brne	.-8      	; 0x1a94 <main+0x36>
    1a9c:	00 c0       	rjmp	.+0      	; 0x1a9e <main+0x40>
    1a9e:	00 00       	nop

	_delay_ms(100);  //delay for VCC stabilization
	
	
	printf("\nTime to init some devices...");
    1aa0:	8e e6       	ldi	r24, 0x6E	; 110
    1aa2:	92 e0       	ldi	r25, 0x02	; 2
    1aa4:	9f 93       	push	r25
    1aa6:	8f 93       	push	r24
    1aa8:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
	init_devices();
    1aac:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <init_devices>
	printf("done.");
    1ab0:	88 e6       	ldi	r24, 0x68	; 104
    1ab2:	92 e0       	ldi	r25, 0x02	; 2
    1ab4:	9f 93       	push	r25
    1ab6:	8f 93       	push	r24
    1ab8:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>

	//PORTD |= 0x04; //switching ON the LED (for testing purpose only)
	printf("\n");
    1abc:	8a e0       	ldi	r24, 0x0A	; 10
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
	printf("\n");
    1ac4:	8a e0       	ldi	r24, 0x0A	; 10
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
	//printf(("*********************************************"));
	printf("*********************************************");
    1acc:	0c e8       	ldi	r16, 0x8C	; 140
    1ace:	12 e0       	ldi	r17, 0x02	; 2
    1ad0:	1f 93       	push	r17
    1ad2:	0f 93       	push	r16
    1ad4:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
	printf("\n");
    1ad8:	8a e0       	ldi	r24, 0x0A	; 10
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
	//printf(("    Dharmani's microSD Card Testing..  "));
	printf("            microSD Card Testing..  ");
    1ae0:	8a eb       	ldi	r24, 0xBA	; 186
    1ae2:	92 e0       	ldi	r25, 0x02	; 2
    1ae4:	9f 93       	push	r25
    1ae6:	8f 93       	push	r24
    1ae8:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
	printf("\n");
    1aec:	8a e0       	ldi	r24, 0x0A	; 10
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
	//printf(("*********************************************"));
	printf("*********************************************");
    1af4:	1f 93       	push	r17
    1af6:	0f 93       	push	r16
    1af8:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
	printf("\n");
    1afc:	8a e0       	ldi	r24, 0x0A	; 10
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>

	cardType = 0;
    1b04:	10 92 a3 08 	sts	0x08A3, r1
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	f8 94       	cli
    1b0c:	de bf       	out	0x3e, r29	; 62
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	cd bf       	out	0x3d, r28	; 61
    1b12:	0a e0       	ldi	r16, 0x0A	; 10
    1b14:	10 e0       	ldi	r17, 0x00	; 0

	for (i=0; i<10; i++)
	{
	  error = SD_init();
	  printf("\nError value returned: %d", error);
    1b16:	0f 2e       	mov	r0, r31
    1b18:	ff ed       	ldi	r31, 0xDF	; 223
    1b1a:	cf 2e       	mov	r12, r31
    1b1c:	f2 e0       	ldi	r31, 0x02	; 2
    1b1e:	df 2e       	mov	r13, r31
    1b20:	f0 2d       	mov	r31, r0
	  printf("\nCard type detected %d", cardType);
    1b22:	0f 2e       	mov	r0, r31
    1b24:	f9 ef       	ldi	r31, 0xF9	; 249
    1b26:	ef 2e       	mov	r14, r31
    1b28:	f2 e0       	ldi	r31, 0x02	; 2
    1b2a:	ff 2e       	mov	r15, r31
    1b2c:	f0 2d       	mov	r31, r0

	cardType = 0;

	for (i=0; i<10; i++)
	{
	  error = SD_init();
    1b2e:	0e 94 4a 11 	call	0x2294	; 0x2294 <SD_init>
    1b32:	b8 2e       	mov	r11, r24
	  printf("\nError value returned: %d", error);
    1b34:	1f 92       	push	r1
    1b36:	8f 93       	push	r24
    1b38:	df 92       	push	r13
    1b3a:	cf 92       	push	r12
    1b3c:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
	  printf("\nCard type detected %d", cardType);
    1b40:	80 91 a3 08 	lds	r24, 0x08A3
    1b44:	1f 92       	push	r1
    1b46:	8f 93       	push	r24
    1b48:	ff 92       	push	r15
    1b4a:	ef 92       	push	r14
    1b4c:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
	  if(!error) break;
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	de bf       	out	0x3e, r29	; 62
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	cd bf       	out	0x3d, r28	; 61
    1b5a:	bb 20       	and	r11, r11
    1b5c:	09 f4       	brne	.+2      	; 0x1b60 <main+0x102>
    1b5e:	1c c3       	rjmp	.+1592   	; 0x2198 <main+0x73a>
    1b60:	01 50       	subi	r16, 0x01	; 1
    1b62:	11 09       	sbc	r17, r1
	printf("*********************************************");
	printf("\n");

	cardType = 0;

	for (i=0; i<10; i++)
    1b64:	01 15       	cp	r16, r1
    1b66:	11 05       	cpc	r17, r1
    1b68:	11 f7       	brne	.-60     	; 0x1b2e <main+0xd0>
    1b6a:	22 c3       	rjmp	.+1604   	; 0x21b0 <main+0x752>
	  if(!error) break;
	}

	if(error)
	{
	  if(error == 1) printf("SD card not detected..");
    1b6c:	80 e1       	ldi	r24, 0x10	; 16
    1b6e:	93 e0       	ldi	r25, 0x03	; 3
    1b70:	9f 93       	push	r25
    1b72:	8f 93       	push	r24
    1b74:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
    1b78:	0f 90       	pop	r0
    1b7a:	0f 90       	pop	r0
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <main+0x124>
	  if(error == 2) printf("Card Initialization failed..");
    1b7e:	32 e0       	ldi	r19, 0x02	; 2
    1b80:	b3 12       	cpse	r11, r19
    1b82:	09 c0       	rjmp	.+18     	; 0x1b96 <main+0x138>
    1b84:	87 e2       	ldi	r24, 0x27	; 39
    1b86:	93 e0       	ldi	r25, 0x03	; 3
    1b88:	9f 93       	push	r25
    1b8a:	8f 93       	push	r24
    1b8c:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	f6 cf       	rjmp	.-20     	; 0x1b82 <main+0x124>
    1b96:	ff cf       	rjmp	.-2      	; 0x1b96 <main+0x138>
	  while(1);  //wait here forever if error in SD init 
	}

	switch (cardType)
	{
	  case 1: printf(("Standard Capacity Card (Ver 1.x) Detected!"));
    1b98:	84 e4       	ldi	r24, 0x44	; 68
    1b9a:	93 e0       	ldi	r25, 0x03	; 3
    1b9c:	9f 93       	push	r25
    1b9e:	8f 93       	push	r24
    1ba0:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
  			 break;
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	1a c0       	rjmp	.+52     	; 0x1bde <main+0x180>
	  case 2: printf(("High Capacity Card Detected!"));
    1baa:	8f e6       	ldi	r24, 0x6F	; 111
    1bac:	93 e0       	ldi	r25, 0x03	; 3
    1bae:	9f 93       	push	r25
    1bb0:	8f 93       	push	r24
    1bb2:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
  			 break;
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	11 c0       	rjmp	.+34     	; 0x1bde <main+0x180>
	  case 3: printf(("Standard Capacity Card (Ver 2.x) Detected!"));
    1bbc:	8c e8       	ldi	r24, 0x8C	; 140
    1bbe:	93 e0       	ldi	r25, 0x03	; 3
    1bc0:	9f 93       	push	r25
    1bc2:	8f 93       	push	r24
    1bc4:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
  			 break;
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	08 c0       	rjmp	.+16     	; 0x1bde <main+0x180>
	  default: printf(("Unknown SD Card Detected!"));
    1bce:	87 eb       	ldi	r24, 0xB7	; 183
    1bd0:	93 e0       	ldi	r25, 0x03	; 3
    1bd2:	9f 93       	push	r25
    1bd4:	8f 93       	push	r24
    1bd6:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
  			 break; 
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
	}


	SPI_HIGH_SPEED;	//SCK - 8 MHz
    1bde:	80 e5       	ldi	r24, 0x50	; 80
    1be0:	8c bd       	out	0x2c, r24	; 44
    1be2:	8d b5       	in	r24, 0x2d	; 45
    1be4:	81 60       	ori	r24, 0x01	; 1
    1be6:	8d bd       	out	0x2d, r24	; 45
	printf("\nsetting spi for high speed");
    1be8:	81 ed       	ldi	r24, 0xD1	; 209
    1bea:	93 e0       	ldi	r25, 0x03	; 3
    1bec:	9f 93       	push	r25
    1bee:	8f 93       	push	r24
    1bf0:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
    1bf4:	8f e9       	ldi	r24, 0x9F	; 159
    1bf6:	9f e0       	ldi	r25, 0x0F	; 15
    1bf8:	01 97       	sbiw	r24, 0x01	; 1
    1bfa:	f1 f7       	brne	.-4      	; 0x1bf8 <main+0x19a>
    1bfc:	00 c0       	rjmp	.+0      	; 0x1bfe <main+0x1a0>
    1bfe:	00 00       	nop
	_delay_ms(1);   //some delay


	FAT32_active = 1;
	error = getBootSectorData (); //read boot sector and keep necessary data in global variables
    1c00:	0e 94 8f 01 	call	0x31e	; 0x31e <getBootSectorData>
	if(error) 	
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	88 23       	and	r24, r24
    1c0a:	71 f0       	breq	.+28     	; 0x1c28 <main+0x1ca>
	{
	  printf("\n");
    1c0c:	8a e0       	ldi	r24, 0x0A	; 10
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
	  printf(("FAT32 not found!"));  //FAT32 incompatible drive
    1c14:	8d ee       	ldi	r24, 0xED	; 237
    1c16:	93 e0       	ldi	r25, 0x03	; 3
    1c18:	9f 93       	push	r25
    1c1a:	8f 93       	push	r24
    1c1c:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
	  FAT32_active = 0;
    1c24:	21 2c       	mov	r2, r1
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <main+0x1ce>
	SPI_HIGH_SPEED;	//SCK - 8 MHz
	printf("\nsetting spi for high speed");
	_delay_ms(1);   //some delay


	FAT32_active = 1;
    1c28:	22 24       	eor	r2, r2
    1c2a:	23 94       	inc	r2
	}

	while(1)
	{
	printf("\n");
	printf(("Press any key..."));
    1c2c:	0f 2e       	mov	r0, r31
    1c2e:	fe ef       	ldi	r31, 0xFE	; 254
    1c30:	6f 2e       	mov	r6, r31
    1c32:	f3 e0       	ldi	r31, 0x03	; 3
    1c34:	7f 2e       	mov	r7, r31
    1c36:	f0 2d       	mov	r31, r0
	printf("\n");
	option = receiveByte();
	printf("\n");
	printf(("> 0 : Erase Blocks"));
    1c38:	0f 2e       	mov	r0, r31
    1c3a:	ff e0       	ldi	r31, 0x0F	; 15
    1c3c:	4f 2e       	mov	r4, r31
    1c3e:	f4 e0       	ldi	r31, 0x04	; 4
    1c40:	5f 2e       	mov	r5, r31
    1c42:	f0 2d       	mov	r31, r0
	data = receiveByte(); transmitByte(data);
	startBlock += (data & 0x0f);
	printf("\n");
	}

	totalBlocks = 1;
    1c44:	c1 2c       	mov	r12, r1
    1c46:	d1 2c       	mov	r13, r1
    1c48:	76 01       	movw	r14, r12
    1c4a:	c3 94       	inc	r12
    1c4c:	5e 01       	movw	r10, r28
    1c4e:	9e e0       	ldi	r25, 0x0E	; 14
    1c50:	a9 0e       	add	r10, r25
    1c52:	b1 1c       	adc	r11, r1
	  FAT32_active = 0;
	}

	while(1)
	{
	printf("\n");
    1c54:	8a e0       	ldi	r24, 0x0A	; 10
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
	printf(("Press any key..."));
    1c5c:	7f 92       	push	r7
    1c5e:	6f 92       	push	r6
    1c60:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
	printf("\n");
    1c64:	8a e0       	ldi	r24, 0x0A	; 10
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
	option = receiveByte();
    1c6c:	0e 94 ed 12 	call	0x25da	; 0x25da <receiveByte>
	printf("\n");
    1c70:	8a e0       	ldi	r24, 0x0A	; 10
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
	printf(("> 0 : Erase Blocks"));
    1c78:	5f 92       	push	r5
    1c7a:	4f 92       	push	r4
    1c7c:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
	printf("\n");
    1c80:	8a e0       	ldi	r24, 0x0A	; 10
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
	printf(("> 1 : Write single Block"));
    1c88:	a2 e2       	ldi	r26, 0x22	; 34
    1c8a:	b4 e0       	ldi	r27, 0x04	; 4
    1c8c:	bf 93       	push	r27
    1c8e:	af 93       	push	r26
    1c90:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
	printf("\n");
    1c94:	8a e0       	ldi	r24, 0x0A	; 10
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
	printf(("> 2 : Read single Block"));
    1c9c:	ab e3       	ldi	r26, 0x3B	; 59
    1c9e:	b4 e0       	ldi	r27, 0x04	; 4
    1ca0:	bf 93       	push	r27
    1ca2:	af 93       	push	r26
    1ca4:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
	printf("\n");
	printf(("> 4 : Read multiple Blocks"));
	#endif


	printf("\n");
    1ca8:	8a e0       	ldi	r24, 0x0A	; 10
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
	printf(("> 5 : Get file list"));
    1cb0:	a3 e5       	ldi	r26, 0x53	; 83
    1cb2:	b4 e0       	ldi	r27, 0x04	; 4
    1cb4:	bf 93       	push	r27
    1cb6:	af 93       	push	r26
    1cb8:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
	printf("\n");
    1cbc:	8a e0       	ldi	r24, 0x0A	; 10
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
	printf(("> 6 : Read File"));
    1cc4:	a7 e6       	ldi	r26, 0x67	; 103
    1cc6:	b4 e0       	ldi	r27, 0x04	; 4
    1cc8:	bf 93       	push	r27
    1cca:	af 93       	push	r26
    1ccc:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
	printf("\n");
    1cd0:	8a e0       	ldi	r24, 0x0A	; 10
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
	printf(("> 7 : Write File"));
    1cd8:	a7 e7       	ldi	r26, 0x77	; 119
    1cda:	b4 e0       	ldi	r27, 0x04	; 4
    1cdc:	bf 93       	push	r27
    1cde:	af 93       	push	r26
    1ce0:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
	printf("\n");
    1ce4:	8a e0       	ldi	r24, 0x0A	; 10
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
	printf(("> 8 : Delete File"));
    1cec:	a8 e8       	ldi	r26, 0x88	; 136
    1cee:	b4 e0       	ldi	r27, 0x04	; 4
    1cf0:	bf 93       	push	r27
    1cf2:	af 93       	push	r26
    1cf4:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
	printf("\n");
    1cf8:	8a e0       	ldi	r24, 0x0A	; 10
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
	printf(("> 9 : Read SD Memory Capacity (Total/Free)"));
    1d00:	aa e9       	ldi	r26, 0x9A	; 154
    1d02:	b4 e0       	ldi	r27, 0x04	; 4
    1d04:	bf 93       	push	r27
    1d06:	af 93       	push	r26
    1d08:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>

	printf("\n");
    1d0c:	8a e0       	ldi	r24, 0x0A	; 10
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
	printf("\n");
    1d14:	8a e0       	ldi	r24, 0x0A	; 10
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
	printf(("> Select Option (0-9): ")); 
    1d1c:	a5 ec       	ldi	r26, 0xC5	; 197
    1d1e:	b4 e0       	ldi	r27, 0x04	; 4
    1d20:	bf 93       	push	r27
    1d22:	af 93       	push	r26
    1d24:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>

	/*WARNING: If option 0, 1 or 3 is selected, the card may not be detected by PC/Laptop again,
	as it disturbs the FAT format, and you may have to format it again with FAT32.
	This options are given for learning the raw data transfer to & from the SD Card*/

	option = receiveByte();
    1d28:	0e 94 ed 12 	call	0x25da	; 0x25da <receiveByte>
    1d2c:	98 2e       	mov	r9, r24
	transmitByte(option);
    1d2e:	0e 94 f5 12 	call	0x25ea	; 0x25ea <transmitByte>

	if(option >=0x35 && option <=0x39)  //options 5 to 9 disabled if FAT32 not found
    1d32:	8b ec       	ldi	r24, 0xCB	; 203
    1d34:	89 0d       	add	r24, r9
    1d36:	0f b6       	in	r0, 0x3f	; 63
    1d38:	f8 94       	cli
    1d3a:	de bf       	out	0x3e, r29	; 62
    1d3c:	0f be       	out	0x3f, r0	; 63
    1d3e:	cd bf       	out	0x3d, r28	; 61
    1d40:	85 30       	cpi	r24, 0x05	; 5
    1d42:	98 f4       	brcc	.+38     	; 0x1d6a <main+0x30c>
	{
	  if(!FAT32_active) 
    1d44:	21 10       	cpse	r2, r1
    1d46:	11 c0       	rjmp	.+34     	; 0x1d6a <main+0x30c>
	  {
		printf("\n");
    1d48:	8a e0       	ldi	r24, 0x0A	; 10
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
		printf("\n");
    1d50:	8a e0       	ldi	r24, 0x0A	; 10
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
		printf(("FAT32 options disabled!"));
    1d58:	8d ed       	ldi	r24, 0xDD	; 221
    1d5a:	94 e0       	ldi	r25, 0x04	; 4
    1d5c:	9f 93       	push	r25
    1d5e:	8f 93       	push	r24
    1d60:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
		continue;
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	75 cf       	rjmp	.-278    	; 0x1c54 <main+0x1f6>
	  } 
	}


	if((option >= 0x30) && (option <=0x34)) //get starting block address for options 0 to 4
    1d6a:	80 ed       	ldi	r24, 0xD0	; 208
    1d6c:	89 0d       	add	r24, r9
    1d6e:	85 30       	cpi	r24, 0x05	; 5
    1d70:	08 f0       	brcs	.+2      	; 0x1d74 <main+0x316>
    1d72:	94 c0       	rjmp	.+296    	; 0x1e9c <main+0x43e>
	{
	printf("\n");
    1d74:	8a e0       	ldi	r24, 0x0A	; 10
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
	printf("\n");
    1d7c:	8a e0       	ldi	r24, 0x0A	; 10
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
	printf(("Enter the Block number (0000-9999):"));
    1d84:	85 ef       	ldi	r24, 0xF5	; 245
    1d86:	94 e0       	ldi	r25, 0x04	; 4
    1d88:	9f 93       	push	r25
    1d8a:	8f 93       	push	r24
    1d8c:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
	data = receiveByte(); transmitByte(data);
    1d90:	0e 94 ed 12 	call	0x25da	; 0x25da <receiveByte>
    1d94:	18 2f       	mov	r17, r24
    1d96:	0e 94 f5 12 	call	0x25ea	; 0x25ea <transmitByte>
	startBlock = (data & 0x0f) * 1000;
    1d9a:	1f 70       	andi	r17, 0x0F	; 15
    1d9c:	28 ee       	ldi	r18, 0xE8	; 232
    1d9e:	33 e0       	ldi	r19, 0x03	; 3
    1da0:	12 9f       	mul	r17, r18
    1da2:	c0 01       	movw	r24, r0
    1da4:	13 9f       	mul	r17, r19
    1da6:	90 0d       	add	r25, r0
    1da8:	11 24       	eor	r1, r1
    1daa:	aa 27       	eor	r26, r26
    1dac:	97 fd       	sbrc	r25, 7
    1dae:	a0 95       	com	r26
    1db0:	ba 2f       	mov	r27, r26
    1db2:	80 93 8e 06 	sts	0x068E, r24
    1db6:	90 93 8f 06 	sts	0x068F, r25
    1dba:	a0 93 90 06 	sts	0x0690, r26
    1dbe:	b0 93 91 06 	sts	0x0691, r27
	data = receiveByte(); transmitByte(data);
    1dc2:	0e 94 ed 12 	call	0x25da	; 0x25da <receiveByte>
    1dc6:	18 2f       	mov	r17, r24
    1dc8:	0e 94 f5 12 	call	0x25ea	; 0x25ea <transmitByte>
	startBlock += (data & 0x0f) * 100;
    1dcc:	40 91 8e 06 	lds	r20, 0x068E
    1dd0:	50 91 8f 06 	lds	r21, 0x068F
    1dd4:	60 91 90 06 	lds	r22, 0x0690
    1dd8:	70 91 91 06 	lds	r23, 0x0691
    1ddc:	1f 70       	andi	r17, 0x0F	; 15
    1dde:	b4 e6       	ldi	r27, 0x64	; 100
    1de0:	1b 9f       	mul	r17, r27
    1de2:	c0 01       	movw	r24, r0
    1de4:	11 24       	eor	r1, r1
    1de6:	aa 27       	eor	r26, r26
    1de8:	97 fd       	sbrc	r25, 7
    1dea:	a0 95       	com	r26
    1dec:	ba 2f       	mov	r27, r26
    1dee:	84 0f       	add	r24, r20
    1df0:	95 1f       	adc	r25, r21
    1df2:	a6 1f       	adc	r26, r22
    1df4:	b7 1f       	adc	r27, r23
    1df6:	80 93 8e 06 	sts	0x068E, r24
    1dfa:	90 93 8f 06 	sts	0x068F, r25
    1dfe:	a0 93 90 06 	sts	0x0690, r26
    1e02:	b0 93 91 06 	sts	0x0691, r27
	data = receiveByte(); transmitByte(data);
    1e06:	0e 94 ed 12 	call	0x25da	; 0x25da <receiveByte>
    1e0a:	18 2f       	mov	r17, r24
    1e0c:	0e 94 f5 12 	call	0x25ea	; 0x25ea <transmitByte>
	startBlock += (data & 0x0f) * 10;
    1e10:	40 91 8e 06 	lds	r20, 0x068E
    1e14:	50 91 8f 06 	lds	r21, 0x068F
    1e18:	60 91 90 06 	lds	r22, 0x0690
    1e1c:	70 91 91 06 	lds	r23, 0x0691
    1e20:	1f 70       	andi	r17, 0x0F	; 15
    1e22:	21 2f       	mov	r18, r17
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	c9 01       	movw	r24, r18
    1e28:	88 0f       	add	r24, r24
    1e2a:	99 1f       	adc	r25, r25
    1e2c:	22 0f       	add	r18, r18
    1e2e:	33 1f       	adc	r19, r19
    1e30:	22 0f       	add	r18, r18
    1e32:	33 1f       	adc	r19, r19
    1e34:	22 0f       	add	r18, r18
    1e36:	33 1f       	adc	r19, r19
    1e38:	82 0f       	add	r24, r18
    1e3a:	93 1f       	adc	r25, r19
    1e3c:	aa 27       	eor	r26, r26
    1e3e:	97 fd       	sbrc	r25, 7
    1e40:	a0 95       	com	r26
    1e42:	ba 2f       	mov	r27, r26
    1e44:	84 0f       	add	r24, r20
    1e46:	95 1f       	adc	r25, r21
    1e48:	a6 1f       	adc	r26, r22
    1e4a:	b7 1f       	adc	r27, r23
    1e4c:	80 93 8e 06 	sts	0x068E, r24
    1e50:	90 93 8f 06 	sts	0x068F, r25
    1e54:	a0 93 90 06 	sts	0x0690, r26
    1e58:	b0 93 91 06 	sts	0x0691, r27
	data = receiveByte(); transmitByte(data);
    1e5c:	0e 94 ed 12 	call	0x25da	; 0x25da <receiveByte>
    1e60:	18 2f       	mov	r17, r24
    1e62:	0e 94 f5 12 	call	0x25ea	; 0x25ea <transmitByte>
	startBlock += (data & 0x0f);
    1e66:	80 91 8e 06 	lds	r24, 0x068E
    1e6a:	90 91 8f 06 	lds	r25, 0x068F
    1e6e:	a0 91 90 06 	lds	r26, 0x0690
    1e72:	b0 91 91 06 	lds	r27, 0x0691
    1e76:	1f 70       	andi	r17, 0x0F	; 15
    1e78:	81 0f       	add	r24, r17
    1e7a:	91 1d       	adc	r25, r1
    1e7c:	a1 1d       	adc	r26, r1
    1e7e:	b1 1d       	adc	r27, r1
    1e80:	80 93 8e 06 	sts	0x068E, r24
    1e84:	90 93 8f 06 	sts	0x068F, r25
    1e88:	a0 93 90 06 	sts	0x0690, r26
    1e8c:	b0 93 91 06 	sts	0x0691, r27
	printf("\n");
    1e90:	8a e0       	ldi	r24, 0x0A	; 10
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
    1e98:	0f 90       	pop	r0
    1e9a:	0f 90       	pop	r0
	}

	totalBlocks = 1;
    1e9c:	c0 92 99 08 	sts	0x0899, r12
    1ea0:	d0 92 9a 08 	sts	0x089A, r13
    1ea4:	e0 92 9b 08 	sts	0x089B, r14
    1ea8:	f0 92 9c 08 	sts	0x089C, r15
	totalBlocks += (data & 0x0f);
	printf("\n");
	}
	#endif

	switch (option)
    1eac:	49 2d       	mov	r20, r9
    1eae:	50 e0       	ldi	r21, 0x00	; 0
    1eb0:	fa 01       	movw	r30, r20
    1eb2:	f0 97       	sbiw	r30, 0x30	; 48
    1eb4:	ea 30       	cpi	r30, 0x0A	; 10
    1eb6:	f1 05       	cpc	r31, r1
    1eb8:	08 f0       	brcs	.+2      	; 0x1ebc <main+0x45e>
    1eba:	55 c1       	rjmp	.+682    	; 0x2166 <main+0x708>
    1ebc:	ec 5c       	subi	r30, 0xCC	; 204
    1ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec0:	0c 94 52 13 	jmp	0x26a4	; 0x26a4 <__tablejump2__>
	{
	case '0': //error = SD_erase (block, totalBlocks);
			  error = SD_erase (startBlock, totalBlocks);
    1ec4:	20 91 99 08 	lds	r18, 0x0899
    1ec8:	30 91 9a 08 	lds	r19, 0x089A
    1ecc:	40 91 9b 08 	lds	r20, 0x089B
    1ed0:	50 91 9c 08 	lds	r21, 0x089C
    1ed4:	60 91 8e 06 	lds	r22, 0x068E
    1ed8:	70 91 8f 06 	lds	r23, 0x068F
    1edc:	80 91 90 06 	lds	r24, 0x0690
    1ee0:	90 91 91 06 	lds	r25, 0x0691
    1ee4:	0e 94 23 12 	call	0x2446	; 0x2446 <SD_erase>
    1ee8:	18 2f       	mov	r17, r24
			  printf("\n");
    1eea:	8a e0       	ldi	r24, 0x0A	; 10
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
			  if(error)
    1ef2:	11 23       	and	r17, r17
    1ef4:	49 f0       	breq	.+18     	; 0x1f08 <main+0x4aa>
				  printf(("Erase failed.."));
    1ef6:	89 e1       	ldi	r24, 0x19	; 25
    1ef8:	95 e0       	ldi	r25, 0x05	; 5
    1efa:	9f 93       	push	r25
    1efc:	8f 93       	push	r24
    1efe:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	43 c1       	rjmp	.+646    	; 0x218e <main+0x730>
			  else
				  printf(("Erased!"));
    1f08:	88 e2       	ldi	r24, 0x28	; 40
    1f0a:	95 e0       	ldi	r25, 0x05	; 5
    1f0c:	9f 93       	push	r25
    1f0e:	8f 93       	push	r24
    1f10:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
    1f14:	0f 90       	pop	r0
    1f16:	0f 90       	pop	r0
    1f18:	3a c1       	rjmp	.+628    	; 0x218e <main+0x730>
			  break;

	case '1': printf("\n");
    1f1a:	8a e0       	ldi	r24, 0x0A	; 10
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
			  printf((" Enter text (End with ~):"));
    1f22:	80 e3       	ldi	r24, 0x30	; 48
    1f24:	95 e0       	ldi	r25, 0x05	; 5
    1f26:	9f 93       	push	r25
    1f28:	8f 93       	push	r24
    1f2a:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
			  i=0;
    1f32:	81 2c       	mov	r8, r1
    1f34:	91 2c       	mov	r9, r1
    1f36:	01 c0       	rjmp	.+2      	; 0x1f3a <main+0x4dc>
					transmitByte(data);
					buffer[i++] = data;
					if(data == 0x0d)
					{
						transmitByte(0x0a);
						buffer[i++] = 0x0a;
    1f38:	48 01       	movw	r8, r16
	case '1': printf("\n");
			  printf((" Enter text (End with ~):"));
			  i=0;
				do
				{
					data = receiveByte();
    1f3a:	0e 94 ed 12 	call	0x25da	; 0x25da <receiveByte>
    1f3e:	38 2e       	mov	r3, r24
					transmitByte(data);
    1f40:	0e 94 f5 12 	call	0x25ea	; 0x25ea <transmitByte>
					buffer[i++] = data;
    1f44:	84 01       	movw	r16, r8
    1f46:	0f 5f       	subi	r16, 0xFF	; 255
    1f48:	1f 4f       	sbci	r17, 0xFF	; 255
    1f4a:	f4 01       	movw	r30, r8
    1f4c:	ee 56       	subi	r30, 0x6E	; 110
    1f4e:	f9 4f       	sbci	r31, 0xF9	; 249
    1f50:	30 82       	st	Z, r3
					if(data == 0x0d)
    1f52:	2d e0       	ldi	r18, 0x0D	; 13
    1f54:	32 12       	cpse	r3, r18
    1f56:	11 c0       	rjmp	.+34     	; 0x1f7a <main+0x51c>
					{
						transmitByte(0x0a);
    1f58:	8a e0       	ldi	r24, 0x0A	; 10
    1f5a:	0e 94 f5 12 	call	0x25ea	; 0x25ea <transmitByte>
						buffer[i++] = 0x0a;
    1f5e:	32 e0       	ldi	r19, 0x02	; 2
    1f60:	83 0e       	add	r8, r19
    1f62:	91 1c       	adc	r9, r1
    1f64:	f8 01       	movw	r30, r16
    1f66:	ee 56       	subi	r30, 0x6E	; 110
    1f68:	f9 4f       	sbci	r31, 0xF9	; 249
    1f6a:	8a e0       	ldi	r24, 0x0A	; 10
    1f6c:	80 83       	st	Z, r24
					}
					if(i == 512) break;
    1f6e:	81 14       	cp	r8, r1
    1f70:	82 e0       	ldi	r24, 0x02	; 2
    1f72:	98 06       	cpc	r9, r24
    1f74:	49 f0       	breq	.+18     	; 0x1f88 <main+0x52a>
					transmitByte(data);
					buffer[i++] = data;
					if(data == 0x0d)
					{
						transmitByte(0x0a);
						buffer[i++] = 0x0a;
    1f76:	84 01       	movw	r16, r8
    1f78:	df cf       	rjmp	.-66     	; 0x1f38 <main+0x4da>
					}
					if(i == 512) break;
    1f7a:	01 15       	cp	r16, r1
    1f7c:	92 e0       	ldi	r25, 0x02	; 2
    1f7e:	19 07       	cpc	r17, r25
    1f80:	19 f0       	breq	.+6      	; 0x1f88 <main+0x52a>
				}while (data != '~');
    1f82:	ae e7       	ldi	r26, 0x7E	; 126
    1f84:	3a 12       	cpse	r3, r26
    1f86:	d8 cf       	rjmp	.-80     	; 0x1f38 <main+0x4da>

				error = SD_writeSingleBlock (startBlock);
    1f88:	60 91 8e 06 	lds	r22, 0x068E
    1f8c:	70 91 8f 06 	lds	r23, 0x068F
    1f90:	80 91 90 06 	lds	r24, 0x0690
    1f94:	90 91 91 06 	lds	r25, 0x0691
    1f98:	0e 94 84 12 	call	0x2508	; 0x2508 <SD_writeSingleBlock>
    1f9c:	18 2f       	mov	r17, r24
				printf("\n");
    1f9e:	8a e0       	ldi	r24, 0x0A	; 10
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
				printf("\n");
    1fa6:	8a e0       	ldi	r24, 0x0A	; 10
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
				if(error)
    1fae:	11 23       	and	r17, r17
    1fb0:	49 f0       	breq	.+18     	; 0x1fc4 <main+0x566>
					printf(("Write failed.."));
    1fb2:	8a e4       	ldi	r24, 0x4A	; 74
    1fb4:	95 e0       	ldi	r25, 0x05	; 5
    1fb6:	9f 93       	push	r25
    1fb8:	8f 93       	push	r24
    1fba:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	e5 c0       	rjmp	.+458    	; 0x218e <main+0x730>
				else
					printf(("Write successful!"));
    1fc4:	89 e5       	ldi	r24, 0x59	; 89
    1fc6:	95 e0       	ldi	r25, 0x05	; 5
    1fc8:	9f 93       	push	r25
    1fca:	8f 93       	push	r24
    1fcc:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
    1fd0:	0f 90       	pop	r0
    1fd2:	0f 90       	pop	r0
    1fd4:	dc c0       	rjmp	.+440    	; 0x218e <main+0x730>
				break;

	case '2': error = SD_readSingleBlock (startBlock);
    1fd6:	60 91 8e 06 	lds	r22, 0x068E
    1fda:	70 91 8f 06 	lds	r23, 0x068F
    1fde:	80 91 90 06 	lds	r24, 0x0690
    1fe2:	90 91 91 06 	lds	r25, 0x0691
    1fe6:	0e 94 55 12 	call	0x24aa	; 0x24aa <SD_readSingleBlock>
    1fea:	18 2f       	mov	r17, r24
			  printf("\n");
    1fec:	8a e0       	ldi	r24, 0x0A	; 10
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
			  if(error)
    1ff4:	11 11       	cpse	r17, r1
    1ff6:	06 c0       	rjmp	.+12     	; 0x2004 <main+0x5a6>
				printf(("Read failed.."));
			  else
			  {
				for(i=0;i<512;i++)
				{
					if(buffer[i] == '~') break;
    1ff8:	80 91 92 06 	lds	r24, 0x0692
    1ffc:	8e 37       	cpi	r24, 0x7E	; 126
    1ffe:	09 f0       	breq	.+2      	; 0x2002 <main+0x5a4>
    2000:	db c0       	rjmp	.+438    	; 0x21b8 <main+0x75a>
    2002:	1b c0       	rjmp	.+54     	; 0x203a <main+0x5dc>
				break;

	case '2': error = SD_readSingleBlock (startBlock);
			  printf("\n");
			  if(error)
				printf(("Read failed.."));
    2004:	8b e6       	ldi	r24, 0x6B	; 107
    2006:	95 e0       	ldi	r25, 0x05	; 5
    2008:	9f 93       	push	r25
    200a:	8f 93       	push	r24
    200c:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	bc c0       	rjmp	.+376    	; 0x218e <main+0x730>
			  else
			  {
				for(i=0;i<512;i++)
				{
					if(buffer[i] == '~') break;
    2016:	f8 01       	movw	r30, r16
    2018:	ee 56       	subi	r30, 0x6E	; 110
    201a:	f9 4f       	sbci	r31, 0xF9	; 249
    201c:	80 81       	ld	r24, Z
    201e:	8e 37       	cpi	r24, 0x7E	; 126
    2020:	61 f0       	breq	.+24     	; 0x203a <main+0x5dc>
					transmitByte(buffer[i]);
    2022:	f8 01       	movw	r30, r16
    2024:	ee 56       	subi	r30, 0x6E	; 110
    2026:	f9 4f       	sbci	r31, 0xF9	; 249
    2028:	80 81       	ld	r24, Z
    202a:	0e 94 f5 12 	call	0x25ea	; 0x25ea <transmitByte>
			  printf("\n");
			  if(error)
				printf(("Read failed.."));
			  else
			  {
				for(i=0;i<512;i++)
    202e:	0f 5f       	subi	r16, 0xFF	; 255
    2030:	1f 4f       	sbci	r17, 0xFF	; 255
    2032:	01 15       	cp	r16, r1
    2034:	b2 e0       	ldi	r27, 0x02	; 2
    2036:	1b 07       	cpc	r17, r27
    2038:	71 f7       	brne	.-36     	; 0x2016 <main+0x5b8>
				{
					if(buffer[i] == '~') break;
					transmitByte(buffer[i]);
				}
				printf("\n");
    203a:	8a e0       	ldi	r24, 0x0A	; 10
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
				printf("\n");
    2042:	8a e0       	ldi	r24, 0x0A	; 10
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
				printf(("Read successful!"));
    204a:	89 e7       	ldi	r24, 0x79	; 121
    204c:	95 e0       	ldi	r25, 0x05	; 5
    204e:	9f 93       	push	r25
    2050:	8f 93       	push	r24
    2052:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	99 c0       	rjmp	.+306    	; 0x218e <main+0x730>
			  else
				printf(("Read successful!"));
			  break;
	#endif

	case '5': printf("\n");
    205c:	8a e0       	ldi	r24, 0x0A	; 10
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
  			  findFiles(GET_LIST,0);
    2064:	60 e0       	ldi	r22, 0x00	; 0
    2066:	70 e0       	ldi	r23, 0x00	; 0
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	0e 94 aa 05 	call	0xb54	; 0xb54 <findFiles>
			  break;
    206e:	8f c0       	rjmp	.+286    	; 0x218e <main+0x730>

	case '6': 
	case '7': 
	case '8': printf("\n");
    2070:	8a e0       	ldi	r24, 0x0A	; 10
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
			  printf("\n");
    2078:	8a e0       	ldi	r24, 0x0A	; 10
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
			  printf(("Enter file name: "));
    2080:	8a e8       	ldi	r24, 0x8A	; 138
    2082:	95 e0       	ldi	r25, 0x05	; 5
    2084:	9f 93       	push	r25
    2086:	8f 93       	push	r24
    2088:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
    208c:	fe 01       	movw	r30, r28
    208e:	31 96       	adiw	r30, 0x01	; 1
    2090:	0f 90       	pop	r0
    2092:	0f 90       	pop	r0
			  for(i=0; i<13; i++)
				fileName[i] = 0x00;   //clearing any previously stored file name
    2094:	11 92       	st	Z+, r1
	case '6': 
	case '7': 
	case '8': printf("\n");
			  printf("\n");
			  printf(("Enter file name: "));
			  for(i=0; i<13; i++)
    2096:	ea 15       	cp	r30, r10
    2098:	fb 05       	cpc	r31, r11
    209a:	e1 f7       	brne	.-8      	; 0x2094 <main+0x636>
    209c:	1f 86       	std	Y+15, r1	; 0x0f
    209e:	1e 86       	std	Y+14, r1	; 0x0e
    20a0:	02 c0       	rjmp	.+4      	; 0x20a6 <main+0x648>
	   				} 
	   				continue;     
	 			}
				if(data <0x20 || data > 0x7e) continue;  //check for valid English text character
				transmitByte(data);
				fileName[i++] = data;
    20a2:	3f 87       	std	Y+15, r19	; 0x0f
    20a4:	2e 87       	std	Y+14, r18	; 0x0e
			  for(i=0; i<13; i++)
				fileName[i] = 0x00;   //clearing any previously stored file name
			  i=0;
			  while(1)
			  {
				data = receiveByte();
    20a6:	0e 94 ed 12 	call	0x25da	; 0x25da <receiveByte>
    20aa:	18 2f       	mov	r17, r24
				if(data == 0x0d) break;  //'ENTER' key pressed
    20ac:	8d 30       	cpi	r24, 0x0D	; 13
    20ae:	a9 f1       	breq	.+106    	; 0x211a <main+0x6bc>
				if(data == 0x08)	//'Back Space' key pressed
    20b0:	88 30       	cpi	r24, 0x08	; 8
    20b2:	99 f4       	brne	.+38     	; 0x20da <main+0x67c>
	 			{ 
	   				if(i != 0)
    20b4:	2e 85       	ldd	r18, Y+14	; 0x0e
    20b6:	3f 85       	ldd	r19, Y+15	; 0x0f
    20b8:	23 2b       	or	r18, r19
    20ba:	a9 f3       	breq	.-22     	; 0x20a6 <main+0x648>
	   				{ 
	     				transmitByte(data);
    20bc:	88 e0       	ldi	r24, 0x08	; 8
    20be:	0e 94 f5 12 	call	0x25ea	; 0x25ea <transmitByte>
						transmitByte(' '); 
    20c2:	80 e2       	ldi	r24, 0x20	; 32
    20c4:	0e 94 f5 12 	call	0x25ea	; 0x25ea <transmitByte>
	     				transmitByte(data); 
    20c8:	88 e0       	ldi	r24, 0x08	; 8
    20ca:	0e 94 f5 12 	call	0x25ea	; 0x25ea <transmitByte>
	     				i--; 
    20ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    20d0:	9f 85       	ldd	r25, Y+15	; 0x0f
    20d2:	01 97       	sbiw	r24, 0x01	; 1
    20d4:	9f 87       	std	Y+15, r25	; 0x0f
    20d6:	8e 87       	std	Y+14, r24	; 0x0e
    20d8:	e6 cf       	rjmp	.-52     	; 0x20a6 <main+0x648>
	   				} 
	   				continue;     
	 			}
				if(data <0x20 || data > 0x7e) continue;  //check for valid English text character
    20da:	80 ee       	ldi	r24, 0xE0	; 224
    20dc:	81 0f       	add	r24, r17
    20de:	8f 35       	cpi	r24, 0x5F	; 95
    20e0:	10 f7       	brcc	.-60     	; 0x20a6 <main+0x648>
				transmitByte(data);
    20e2:	81 2f       	mov	r24, r17
    20e4:	0e 94 f5 12 	call	0x25ea	; 0x25ea <transmitByte>
				fileName[i++] = data;
    20e8:	2e 85       	ldd	r18, Y+14	; 0x0e
    20ea:	3f 85       	ldd	r19, Y+15	; 0x0f
    20ec:	2f 5f       	subi	r18, 0xFF	; 255
    20ee:	3f 4f       	sbci	r19, 0xFF	; 255
    20f0:	e1 e0       	ldi	r30, 0x01	; 1
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	ec 0f       	add	r30, r28
    20f6:	fd 1f       	adc	r31, r29
    20f8:	ae 85       	ldd	r26, Y+14	; 0x0e
    20fa:	bf 85       	ldd	r27, Y+15	; 0x0f
    20fc:	ea 0f       	add	r30, r26
    20fe:	fb 1f       	adc	r31, r27
    2100:	10 83       	st	Z, r17
				if(i==13){printf((" file name too long..")); break;}
    2102:	2d 30       	cpi	r18, 0x0D	; 13
    2104:	31 05       	cpc	r19, r1
    2106:	69 f6       	brne	.-102    	; 0x20a2 <main+0x644>
    2108:	8c e9       	ldi	r24, 0x9C	; 156
    210a:	95 e0       	ldi	r25, 0x05	; 5
    210c:	9f 93       	push	r25
    210e:	8f 93       	push	r24
    2110:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	3a c0       	rjmp	.+116    	; 0x218e <main+0x730>
			  }
			  if(i>12) break;
    211a:	2e 85       	ldd	r18, Y+14	; 0x0e
    211c:	3f 85       	ldd	r19, Y+15	; 0x0f
    211e:	2d 30       	cpi	r18, 0x0D	; 13
    2120:	31 05       	cpc	r19, r1
    2122:	a8 f5       	brcc	.+106    	; 0x218e <main+0x730>
       
			  printf("\n");
    2124:	8a e0       	ldi	r24, 0x0A	; 10
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
			  if(option == '6')
    212c:	36 e3       	ldi	r19, 0x36	; 54
    212e:	93 12       	cpse	r9, r19
    2130:	07 c0       	rjmp	.+14     	; 0x2140 <main+0x6e2>
				 readFile( READ, fileName);
    2132:	be 01       	movw	r22, r28
    2134:	6f 5f       	subi	r22, 0xFF	; 255
    2136:	7f 4f       	sbci	r23, 0xFF	; 255
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	0e 94 ed 07 	call	0xfda	; 0xfda <readFile>
    213e:	27 c0       	rjmp	.+78     	; 0x218e <main+0x730>
			  if(option == '7')
    2140:	87 e3       	ldi	r24, 0x37	; 55
    2142:	98 12       	cpse	r9, r24
    2144:	05 c0       	rjmp	.+10     	; 0x2150 <main+0x6f2>
		  		 writeFile(fileName);
    2146:	ce 01       	movw	r24, r28
    2148:	01 96       	adiw	r24, 0x01	; 1
    214a:	0e 94 e6 08 	call	0x11cc	; 0x11cc <writeFile>
    214e:	1f c0       	rjmp	.+62     	; 0x218e <main+0x730>
 			  if(option == '8')
    2150:	98 e3       	ldi	r25, 0x38	; 56
    2152:	99 12       	cpse	r9, r25
    2154:	1c c0       	rjmp	.+56     	; 0x218e <main+0x730>
				 deleteFile(fileName);
    2156:	ce 01       	movw	r24, r28
    2158:	01 96       	adiw	r24, 0x01	; 1
    215a:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <deleteFile>
    215e:	17 c0       	rjmp	.+46     	; 0x218e <main+0x730>
			  break;

	case '9': memoryStatistics();
    2160:	0e 94 fe 03 	call	0x7fc	; 0x7fc <memoryStatistics>
			  break;
    2164:	14 c0       	rjmp	.+40     	; 0x218e <main+0x730>

	default: printf("\n");
    2166:	8a e0       	ldi	r24, 0x0A	; 10
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
			 printf("\n");
    216e:	8a e0       	ldi	r24, 0x0A	; 10
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
			 printf((" Invalid option!"));
    2176:	82 eb       	ldi	r24, 0xB2	; 178
    2178:	95 e0       	ldi	r25, 0x05	; 5
    217a:	9f 93       	push	r25
    217c:	8f 93       	push	r24
    217e:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
			 printf("\n");
    2182:	8a e0       	ldi	r24, 0x0A	; 10
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
    218a:	0f 90       	pop	r0
    218c:	0f 90       	pop	r0
	}

	printf("\n");
    218e:	8a e0       	ldi	r24, 0x0A	; 10
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
    2196:	5e cd       	rjmp	.-1348   	; 0x1c54 <main+0x1f6>
	  if(error == 2) printf("Card Initialization failed..");

	  while(1);  //wait here forever if error in SD init 
	}

	switch (cardType)
    2198:	80 91 a3 08 	lds	r24, 0x08A3
    219c:	82 30       	cpi	r24, 0x02	; 2
    219e:	09 f4       	brne	.+2      	; 0x21a2 <main+0x744>
    21a0:	04 cd       	rjmp	.-1528   	; 0x1baa <main+0x14c>
    21a2:	83 30       	cpi	r24, 0x03	; 3
    21a4:	09 f4       	brne	.+2      	; 0x21a8 <main+0x74a>
    21a6:	0a cd       	rjmp	.-1516   	; 0x1bbc <main+0x15e>
    21a8:	81 30       	cpi	r24, 0x01	; 1
    21aa:	09 f0       	breq	.+2      	; 0x21ae <main+0x750>
    21ac:	10 cd       	rjmp	.-1504   	; 0x1bce <main+0x170>
    21ae:	f4 cc       	rjmp	.-1560   	; 0x1b98 <main+0x13a>
	  if(!error) break;
	}

	if(error)
	{
	  if(error == 1) printf("SD card not detected..");
    21b0:	a1 e0       	ldi	r26, 0x01	; 1
    21b2:	ba 12       	cpse	r11, r26
    21b4:	e4 cc       	rjmp	.-1592   	; 0x1b7e <main+0x120>
    21b6:	da cc       	rjmp	.-1612   	; 0x1b6c <main+0x10e>
			  else
			  {
				for(i=0;i<512;i++)
				{
					if(buffer[i] == '~') break;
					transmitByte(buffer[i]);
    21b8:	80 91 92 06 	lds	r24, 0x0692
    21bc:	0e 94 f5 12 	call	0x25ea	; 0x25ea <transmitByte>
			  printf("\n");
			  if(error)
				printf(("Read failed.."));
			  else
			  {
				for(i=0;i<512;i++)
    21c0:	01 e0       	ldi	r16, 0x01	; 1
    21c2:	10 e0       	ldi	r17, 0x00	; 0
    21c4:	28 cf       	rjmp	.-432    	; 0x2016 <main+0x5b8>

000021c6 <SD_sendCommand>:
//Arguments	: unsigned char (8-bit command value)
// 			  & unsigned long (32-bit command argument)
//return	: unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
    21c6:	cf 92       	push	r12
    21c8:	df 92       	push	r13
    21ca:	ef 92       	push	r14
    21cc:	ff 92       	push	r15
    21ce:	cf 93       	push	r28
    21d0:	c8 2f       	mov	r28, r24
    21d2:	6a 01       	movw	r12, r20
    21d4:	7b 01       	movw	r14, r22
//SD card accepts byte address while SDHC accepts block address in multiples of 512
//so, if it's SD card we need to convert block address into corresponding byte address by 
//multipying it with 512. which is equivalent to shifting it left 9 times
//following 'if' loop does that

if(SDHC_flag == 0)		
    21d6:	80 91 98 08 	lds	r24, 0x0898
    21da:	81 11       	cpse	r24, r1
    21dc:	15 c0       	rjmp	.+42     	; 0x2208 <SD_sendCommand+0x42>
if(cmd == READ_SINGLE_BLOCK     ||
    21de:	8f ee       	ldi	r24, 0xEF	; 239
    21e0:	8c 0f       	add	r24, r28
    21e2:	82 30       	cpi	r24, 0x02	; 2
    21e4:	40 f0       	brcs	.+16     	; 0x21f6 <SD_sendCommand+0x30>
   cmd == READ_MULTIPLE_BLOCKS  ||
    21e6:	88 ee       	ldi	r24, 0xE8	; 232
    21e8:	8c 0f       	add	r24, r28
    21ea:	82 30       	cpi	r24, 0x02	; 2
    21ec:	20 f0       	brcs	.+8      	; 0x21f6 <SD_sendCommand+0x30>
   cmd == WRITE_SINGLE_BLOCK    ||
   cmd == WRITE_MULTIPLE_BLOCKS ||
    21ee:	80 ee       	ldi	r24, 0xE0	; 224
    21f0:	8c 0f       	add	r24, r28
    21f2:	82 30       	cpi	r24, 0x02	; 2
    21f4:	48 f4       	brcc	.+18     	; 0x2208 <SD_sendCommand+0x42>
   cmd == ERASE_BLOCK_START_ADDR|| 
   cmd == ERASE_BLOCK_END_ADDR ) 
   {
     arg = arg << 9;
    21f6:	0b 2e       	mov	r0, r27
    21f8:	b9 e0       	ldi	r27, 0x09	; 9
    21fa:	cc 0c       	add	r12, r12
    21fc:	dd 1c       	adc	r13, r13
    21fe:	ee 1c       	adc	r14, r14
    2200:	ff 1c       	adc	r15, r15
    2202:	ba 95       	dec	r27
    2204:	d1 f7       	brne	.-12     	; 0x21fa <SD_sendCommand+0x34>
    2206:	b0 2d       	mov	r27, r0
   }	   

SD_CS_ASSERT;
    2208:	5c 98       	cbi	0x0b, 4	; 11

SPI_transmit(cmd | 0x40); //send command, first two bits always '01'
    220a:	8c 2f       	mov	r24, r28
    220c:	80 64       	ori	r24, 0x40	; 64
    220e:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <SPI_transmit>
SPI_transmit(arg>>24);
    2212:	8f 2d       	mov	r24, r15
    2214:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <SPI_transmit>
SPI_transmit(arg>>16);
    2218:	8e 2d       	mov	r24, r14
    221a:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <SPI_transmit>
SPI_transmit(arg>>8);
    221e:	8d 2d       	mov	r24, r13
    2220:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <SPI_transmit>
SPI_transmit(arg);
    2224:	8c 2d       	mov	r24, r12
    2226:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <SPI_transmit>

if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
    222a:	c8 30       	cpi	r28, 0x08	; 8
    222c:	21 f4       	brne	.+8      	; 0x2236 <SD_sendCommand+0x70>
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
    222e:	87 e8       	ldi	r24, 0x87	; 135
    2230:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <SPI_transmit>
    2234:	07 c0       	rjmp	.+14     	; 0x2244 <SD_sendCommand+0x7e>
else 
  SPI_transmit(0x95); 
    2236:	85 e9       	ldi	r24, 0x95	; 149
    2238:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <SPI_transmit>
    223c:	03 c0       	rjmp	.+6      	; 0x2244 <SD_sendCommand+0x7e>
    223e:	fa 94       	dec	r15

while((response = SPI_receive()) == 0xff) //wait response
   if(retry++ > 0xfe) break; //time out error
    2240:	11 f4       	brne	.+4      	; 0x2246 <SD_sendCommand+0x80>
    2242:	1b c0       	rjmp	.+54     	; 0x227a <SD_sendCommand+0xb4>
//Arguments	: unsigned char (8-bit command value)
// 			  & unsigned long (32-bit command argument)
//return	: unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
    2244:	f1 2c       	mov	r15, r1
if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 

while((response = SPI_receive()) == 0xff) //wait response
    2246:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <SPI_receive>
    224a:	8f 3f       	cpi	r24, 0xFF	; 255
    224c:	c1 f3       	breq	.-16     	; 0x223e <SD_sendCommand+0x78>
    224e:	f8 2e       	mov	r15, r24
   if(retry++ > 0xfe) break; //time out error

if(response == 0x00 && cmd == 58)  //checking response of CMD58
    2250:	81 11       	cpse	r24, r1
    2252:	15 c0       	rjmp	.+42     	; 0x227e <SD_sendCommand+0xb8>
    2254:	ca 33       	cpi	r28, 0x3A	; 58
    2256:	a1 f4       	brne	.+40     	; 0x2280 <SD_sendCommand+0xba>
{
  status = SPI_receive() & 0x40;     //first byte of the OCR register (bit 31:24)
    2258:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <SPI_receive>
  if(status == 0x40) SDHC_flag = 1;  //we need it to verify SDHC card
    225c:	86 ff       	sbrs	r24, 6
    225e:	04 c0       	rjmp	.+8      	; 0x2268 <SD_sendCommand+0xa2>
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	80 93 98 08 	sts	0x0898, r24
    2266:	02 c0       	rjmp	.+4      	; 0x226c <SD_sendCommand+0xa6>
  else SDHC_flag = 0;
    2268:	10 92 98 08 	sts	0x0898, r1

  SPI_receive(); //remaining 3 bytes of the OCR register are ignored here
    226c:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <SPI_receive>
  SPI_receive(); //one can use these bytes to check power supply limits of SD
    2270:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <SPI_receive>
  SPI_receive(); 
    2274:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <SPI_receive>
    2278:	03 c0       	rjmp	.+6      	; 0x2280 <SD_sendCommand+0xba>
if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 

while((response = SPI_receive()) == 0xff) //wait response
    227a:	f8 2e       	mov	r15, r24
    227c:	01 c0       	rjmp	.+2      	; 0x2280 <SD_sendCommand+0xba>
    227e:	f8 2e       	mov	r15, r24
  SPI_receive(); //remaining 3 bytes of the OCR register are ignored here
  SPI_receive(); //one can use these bytes to check power supply limits of SD
  SPI_receive(); 
}

SPI_receive(); //extra 8 CLK
    2280:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <SPI_receive>
SD_CS_DEASSERT;
    2284:	5c 9a       	sbi	0x0b, 4	; 11

return response; //return state
}
    2286:	8f 2d       	mov	r24, r15
    2288:	cf 91       	pop	r28
    228a:	ff 90       	pop	r15
    228c:	ef 90       	pop	r14
    228e:	df 90       	pop	r13
    2290:	cf 90       	pop	r12
    2292:	08 95       	ret

00002294 <SD_init>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_init(void)
{
    2294:	0f 93       	push	r16
    2296:	1f 93       	push	r17
    2298:	cf 93       	push	r28
    229a:	df 93       	push	r29
unsigned char i, response, SD_version;
unsigned int retry=0 ;
printf("\nWere about to send the first command...");
    229c:	83 ec       	ldi	r24, 0xC3	; 195
    229e:	95 e0       	ldi	r25, 0x05	; 5
    22a0:	9f 93       	push	r25
    22a2:	8f 93       	push	r24
    22a4:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
    22a8:	0f 90       	pop	r0
    22aa:	0f 90       	pop	r0
    22ac:	1a e0       	ldi	r17, 0x0A	; 10
 for(i=0;i<10;i++)
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command
    22ae:	8f ef       	ldi	r24, 0xFF	; 255
    22b0:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <SPI_transmit>
    22b4:	11 50       	subi	r17, 0x01	; 1
unsigned char SD_init(void)
{
unsigned char i, response, SD_version;
unsigned int retry=0 ;
printf("\nWere about to send the first command...");
 for(i=0;i<10;i++)
    22b6:	d9 f7       	brne	.-10     	; 0x22ae <SD_init+0x1a>
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command

SD_CS_ASSERT;
    22b8:	5c 98       	cbi	0x0b, 4	; 11
printf("BAM! CS is now active");
    22ba:	2c ee       	ldi	r18, 0xEC	; 236
    22bc:	35 e0       	ldi	r19, 0x05	; 5
    22be:	3f 93       	push	r19
    22c0:	2f 93       	push	r18
    22c2:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
do
{
  
   response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command
    22c6:	40 e0       	ldi	r20, 0x00	; 0
    22c8:	50 e0       	ldi	r21, 0x00	; 0
    22ca:	ba 01       	movw	r22, r20
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <SD_sendCommand>
    22d2:	08 2f       	mov	r16, r24
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	c0 e2       	ldi	r28, 0x20	; 32
    22da:	d0 e0       	ldi	r29, 0x00	; 0
    22dc:	0b c0       	rjmp	.+22     	; 0x22f4 <SD_init+0x60>
    22de:	40 e0       	ldi	r20, 0x00	; 0
    22e0:	50 e0       	ldi	r21, 0x00	; 0
    22e2:	ba 01       	movw	r22, r20
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <SD_sendCommand>
    22ea:	08 2f       	mov	r16, r24
    22ec:	21 97       	sbiw	r28, 0x01	; 1
   retry++;
   if(retry>0x20) 
    22ee:	20 97       	sbiw	r28, 0x00	; 0
    22f0:	09 f4       	brne	.+2      	; 0x22f4 <SD_init+0x60>
    22f2:	98 c0       	rjmp	.+304    	; 0x2424 <SD_init+0x190>
   	  return 1;   //time out, card not detected
		 printf("Card not detected\n");
    22f4:	82 e0       	ldi	r24, 0x02	; 2
    22f6:	96 e0       	ldi	r25, 0x06	; 6
    22f8:	0e 94 8d 13 	call	0x271a	; 0x271a <puts>
   
} while(response != 0x01);
    22fc:	01 30       	cpi	r16, 0x01	; 1
    22fe:	79 f7       	brne	.-34     	; 0x22de <SD_init+0x4a>

SD_CS_DEASSERT;
    2300:	5c 9a       	sbi	0x0b, 4	; 11
printf("\nSD send command done (reset and go idle)");
    2302:	24 e1       	ldi	r18, 0x14	; 20
    2304:	36 e0       	ldi	r19, 0x06	; 6
    2306:	3f 93       	push	r19
    2308:	2f 93       	push	r18
    230a:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>

printf("\nTransmitting ones...");
    230e:	2e e3       	ldi	r18, 0x3E	; 62
    2310:	36 e0       	ldi	r19, 0x06	; 6
    2312:	3f 93       	push	r19
    2314:	2f 93       	push	r18
    2316:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
SPI_transmit (0xff);
    231a:	8f ef       	ldi	r24, 0xFF	; 255
    231c:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <SPI_transmit>
SPI_transmit (0xff);
    2320:	8f ef       	ldi	r24, 0xFF	; 255
    2322:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <SPI_transmit>
printf("done transmitting");
    2326:	24 e5       	ldi	r18, 0x54	; 84
    2328:	36 e0       	ldi	r19, 0x06	; 6
    232a:	3f 93       	push	r19
    232c:	2f 93       	push	r18
    232e:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>

SD_version = 2; //default set to SD compliance with ver2.x; 
				//this may change after checking the next command
do
{
response = SD_sendCommand(SEND_IF_COND,0x000001AA); //Check power supply status, mandatory for SDHC card
    2332:	4a ea       	ldi	r20, 0xAA	; 170
    2334:	51 e0       	ldi	r21, 0x01	; 1
    2336:	60 e0       	ldi	r22, 0x00	; 0
    2338:	70 e0       	ldi	r23, 0x00	; 0
    233a:	88 e0       	ldi	r24, 0x08	; 8
    233c:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <SD_sendCommand>
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	0f 90       	pop	r0
    234c:	ce ef       	ldi	r28, 0xFE	; 254
    234e:	d0 e0       	ldi	r29, 0x00	; 0
    2350:	13 c0       	rjmp	.+38     	; 0x2378 <SD_init+0xe4>
    2352:	4a ea       	ldi	r20, 0xAA	; 170
    2354:	51 e0       	ldi	r21, 0x01	; 1
    2356:	60 e0       	ldi	r22, 0x00	; 0
    2358:	70 e0       	ldi	r23, 0x00	; 0
    235a:	88 e0       	ldi	r24, 0x08	; 8
    235c:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <SD_sendCommand>
    2360:	21 97       	sbiw	r28, 0x01	; 1
retry++;
if(retry>0xfe) 
    2362:	20 97       	sbiw	r28, 0x00	; 0
    2364:	49 f4       	brne	.+18     	; 0x2378 <SD_init+0xe4>
   {
	  printf("\n");
    2366:	8a e0       	ldi	r24, 0x0A	; 10
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
	  SD_version = 1;
	  cardType = 1;
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	80 93 a3 08 	sts	0x08A3, r24
response = SD_sendCommand(SEND_IF_COND,0x000001AA); //Check power supply status, mandatory for SDHC card
retry++;
if(retry>0xfe) 
   {
	  printf("\n");
	  SD_version = 1;
    2374:	01 e0       	ldi	r16, 0x01	; 1
	  cardType = 1;
	  break;
    2376:	03 c0       	rjmp	.+6      	; 0x237e <SD_init+0xea>
   } //time out

}while(response != 0x01);
    2378:	81 30       	cpi	r24, 0x01	; 1
    237a:	59 f7       	brne	.-42     	; 0x2352 <SD_init+0xbe>
SPI_transmit (0xff);
printf("done transmitting");

retry = 0;

SD_version = 2; //default set to SD compliance with ver2.x; 
    237c:	02 e0       	ldi	r16, 0x02	; 2
}while(response != 0x01);
retry = 0;

do
{
response = SD_sendCommand(APP_CMD,0); //CMD55, must be sent before sending any ACMD command
    237e:	40 e0       	ldi	r20, 0x00	; 0
    2380:	50 e0       	ldi	r21, 0x00	; 0
    2382:	ba 01       	movw	r22, r20
    2384:	87 e3       	ldi	r24, 0x37	; 55
    2386:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <SD_sendCommand>
response = SD_sendCommand(SD_SEND_OP_COND,0x40000000); //ACMD41
    238a:	40 e0       	ldi	r20, 0x00	; 0
    238c:	50 e0       	ldi	r21, 0x00	; 0
    238e:	60 e0       	ldi	r22, 0x00	; 0
    2390:	70 e4       	ldi	r23, 0x40	; 64
    2392:	89 e2       	ldi	r24, 0x29	; 41
    2394:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <SD_sendCommand>
    2398:	ce ef       	ldi	r28, 0xFE	; 254
    239a:	d0 e0       	ldi	r29, 0x00	; 0
    239c:	16 c0       	rjmp	.+44     	; 0x23ca <SD_init+0x136>
}while(response != 0x01);
retry = 0;

do
{
response = SD_sendCommand(APP_CMD,0); //CMD55, must be sent before sending any ACMD command
    239e:	40 e0       	ldi	r20, 0x00	; 0
    23a0:	50 e0       	ldi	r21, 0x00	; 0
    23a2:	ba 01       	movw	r22, r20
    23a4:	87 e3       	ldi	r24, 0x37	; 55
    23a6:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <SD_sendCommand>
response = SD_sendCommand(SD_SEND_OP_COND,0x40000000); //ACMD41
    23aa:	40 e0       	ldi	r20, 0x00	; 0
    23ac:	50 e0       	ldi	r21, 0x00	; 0
    23ae:	60 e0       	ldi	r22, 0x00	; 0
    23b0:	70 e4       	ldi	r23, 0x40	; 64
    23b2:	89 e2       	ldi	r24, 0x29	; 41
    23b4:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <SD_sendCommand>
    23b8:	21 97       	sbiw	r28, 0x01	; 1

retry++;
if(retry>0xfe) 
    23ba:	20 97       	sbiw	r28, 0x00	; 0
    23bc:	31 f4       	brne	.+12     	; 0x23ca <SD_init+0x136>
   {
      printf("\n");
    23be:	8a e0       	ldi	r24, 0x0A	; 10
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
	  return 2;  //time out, card initialization failed
    23c6:	12 e0       	ldi	r17, 0x02	; 2
    23c8:	38 c0       	rjmp	.+112    	; 0x243a <SD_init+0x1a6>
   } 

}while(response != 0x00);
    23ca:	81 11       	cpse	r24, r1
    23cc:	e8 cf       	rjmp	.-48     	; 0x239e <SD_init+0x10a>


retry = 0;
SDHC_flag = 0;
    23ce:	10 92 98 08 	sts	0x0898, r1

if (SD_version == 2)
    23d2:	02 30       	cpi	r16, 0x02	; 2
    23d4:	f1 f4       	brne	.+60     	; 0x2412 <SD_init+0x17e>
    23d6:	28 c0       	rjmp	.+80     	; 0x2428 <SD_init+0x194>
{ 
   do
   {
	 response = SD_sendCommand(READ_OCR,0);
    23d8:	40 e0       	ldi	r20, 0x00	; 0
    23da:	50 e0       	ldi	r21, 0x00	; 0
    23dc:	ba 01       	movw	r22, r20
    23de:	8a e3       	ldi	r24, 0x3A	; 58
    23e0:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <SD_sendCommand>
    23e4:	21 97       	sbiw	r28, 0x01	; 1
	 retry++;
	 if(retry>0xfe) 
    23e6:	20 97       	sbiw	r28, 0x00	; 0
    23e8:	39 f4       	brne	.+14     	; 0x23f8 <SD_init+0x164>
     {
       printf("\n");
    23ea:	8a e0       	ldi	r24, 0x0A	; 10
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	0e 94 86 13 	call	0x270c	; 0x270c <putchar>
	   cardType = 0;
    23f2:	10 92 a3 08 	sts	0x08A3, r1
	   break;
    23f6:	02 c0       	rjmp	.+4      	; 0x23fc <SD_init+0x168>
     } //time out

   }while(response != 0x00);
    23f8:	81 11       	cpse	r24, r1
    23fa:	ee cf       	rjmp	.-36     	; 0x23d8 <SD_init+0x144>

   if(SDHC_flag == 1) cardType = 2;
    23fc:	80 91 98 08 	lds	r24, 0x0898
    2400:	81 30       	cpi	r24, 0x01	; 1
    2402:	21 f4       	brne	.+8      	; 0x240c <SD_init+0x178>
    2404:	82 e0       	ldi	r24, 0x02	; 2
    2406:	80 93 a3 08 	sts	0x08A3, r24
    240a:	03 c0       	rjmp	.+6      	; 0x2412 <SD_init+0x17e>
   else cardType = 3;
    240c:	83 e0       	ldi	r24, 0x03	; 3
    240e:	80 93 a3 08 	sts	0x08A3, r24
}

//SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
//SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512

printf("\nSuccessful init");
    2412:	86 e6       	ldi	r24, 0x66	; 102
    2414:	96 e0       	ldi	r25, 0x06	; 6
    2416:	9f 93       	push	r25
    2418:	8f 93       	push	r24
    241a:	0e 94 72 13 	call	0x26e4	; 0x26e4 <printf>
return 0; //successful return
    241e:	0f 90       	pop	r0
    2420:	0f 90       	pop	r0
    2422:	0b c0       	rjmp	.+22     	; 0x243a <SD_init+0x1a6>
{
  
   response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command
   retry++;
   if(retry>0x20) 
   	  return 1;   //time out, card not detected
    2424:	11 e0       	ldi	r17, 0x01	; 1
    2426:	09 c0       	rjmp	.+18     	; 0x243a <SD_init+0x1a6>

if (SD_version == 2)
{ 
   do
   {
	 response = SD_sendCommand(READ_OCR,0);
    2428:	40 e0       	ldi	r20, 0x00	; 0
    242a:	50 e0       	ldi	r21, 0x00	; 0
    242c:	ba 01       	movw	r22, r20
    242e:	8a e3       	ldi	r24, 0x3A	; 58
    2430:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <SD_sendCommand>
    2434:	ce ef       	ldi	r28, 0xFE	; 254
    2436:	d0 e0       	ldi	r29, 0x00	; 0
    2438:	df cf       	rjmp	.-66     	; 0x23f8 <SD_init+0x164>
//SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
//SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512

printf("\nSuccessful init");
return 0; //successful return
}
    243a:	81 2f       	mov	r24, r17
    243c:	df 91       	pop	r29
    243e:	cf 91       	pop	r28
    2440:	1f 91       	pop	r17
    2442:	0f 91       	pop	r16
    2444:	08 95       	ret

00002446 <SD_erase>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//*****************************************************************
unsigned char SD_erase (unsigned long startBlock, unsigned long totalBlocks)
{
    2446:	8f 92       	push	r8
    2448:	9f 92       	push	r9
    244a:	af 92       	push	r10
    244c:	bf 92       	push	r11
    244e:	cf 92       	push	r12
    2450:	df 92       	push	r13
    2452:	ef 92       	push	r14
    2454:	ff 92       	push	r15
    2456:	6b 01       	movw	r12, r22
    2458:	7c 01       	movw	r14, r24
    245a:	49 01       	movw	r8, r18
    245c:	5a 01       	movw	r10, r20
unsigned char response;

response = SD_sendCommand(ERASE_BLOCK_START_ADDR, startBlock); //send starting block address
    245e:	ab 01       	movw	r20, r22
    2460:	bc 01       	movw	r22, r24
    2462:	80 e2       	ldi	r24, 0x20	; 32
    2464:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <SD_sendCommand>
if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
    2468:	81 11       	cpse	r24, r1
    246a:	16 c0       	rjmp	.+44     	; 0x2498 <SD_erase+0x52>
  return response;

response = SD_sendCommand(ERASE_BLOCK_END_ADDR,(startBlock + totalBlocks - 1)); //send end block address
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	88 1a       	sub	r8, r24
    2470:	91 08       	sbc	r9, r1
    2472:	a1 08       	sbc	r10, r1
    2474:	b1 08       	sbc	r11, r1
    2476:	b5 01       	movw	r22, r10
    2478:	a4 01       	movw	r20, r8
    247a:	4c 0d       	add	r20, r12
    247c:	5d 1d       	adc	r21, r13
    247e:	6e 1d       	adc	r22, r14
    2480:	7f 1d       	adc	r23, r15
    2482:	81 e2       	ldi	r24, 0x21	; 33
    2484:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <SD_sendCommand>
if(response != 0x00)
    2488:	81 11       	cpse	r24, r1
    248a:	06 c0       	rjmp	.+12     	; 0x2498 <SD_erase+0x52>
  return response;

response = SD_sendCommand(ERASE_SELECTED_BLOCKS, 0); //erase all selected blocks
    248c:	40 e0       	ldi	r20, 0x00	; 0
    248e:	50 e0       	ldi	r21, 0x00	; 0
    2490:	ba 01       	movw	r22, r20
    2492:	86 e2       	ldi	r24, 0x26	; 38
    2494:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <SD_sendCommand>
if(response != 0x00)
  return response;

return 0; //normal return
}
    2498:	ff 90       	pop	r15
    249a:	ef 90       	pop	r14
    249c:	df 90       	pop	r13
    249e:	cf 90       	pop	r12
    24a0:	bf 90       	pop	r11
    24a2:	af 90       	pop	r10
    24a4:	9f 90       	pop	r9
    24a6:	8f 90       	pop	r8
    24a8:	08 95       	ret

000024aa <SD_readSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_readSingleBlock(unsigned long startBlock)
{
    24aa:	cf 93       	push	r28
    24ac:	df 93       	push	r29
    24ae:	ab 01       	movw	r20, r22
    24b0:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(READ_SINGLE_BLOCK, startBlock); //read a Block command
    24b2:	81 e1       	ldi	r24, 0x11	; 17
    24b4:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <SD_sendCommand>
 
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
    24b8:	81 11       	cpse	r24, r1
    24ba:	23 c0       	rjmp	.+70     	; 0x2502 <SD_readSingleBlock+0x58>

SD_CS_ASSERT;
    24bc:	5c 98       	cbi	0x0b, 4	; 11

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    24be:	c0 e0       	ldi	r28, 0x00	; 0
    24c0:	d0 e0       	ldi	r29, 0x00	; 0
    24c2:	06 c0       	rjmp	.+12     	; 0x24d0 <SD_readSingleBlock+0x26>
    24c4:	21 97       	sbiw	r28, 0x01	; 1
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out
    24c6:	20 97       	sbiw	r28, 0x00	; 0
    24c8:	19 f4       	brne	.+6      	; 0x24d0 <SD_readSingleBlock+0x26>
    24ca:	5c 9a       	sbi	0x0b, 4	; 11
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	19 c0       	rjmp	.+50     	; 0x2502 <SD_readSingleBlock+0x58>
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)

SD_CS_ASSERT;

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    24d0:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <SPI_receive>
    24d4:	8e 3f       	cpi	r24, 0xFE	; 254
    24d6:	b1 f7       	brne	.-20     	; 0x24c4 <SD_readSingleBlock+0x1a>
    24d8:	c0 e0       	ldi	r28, 0x00	; 0
    24da:	d0 e0       	ldi	r29, 0x00	; 0
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
  buffer[i] = SPI_receive();
    24dc:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <SPI_receive>
    24e0:	fe 01       	movw	r30, r28
    24e2:	ee 56       	subi	r30, 0x6E	; 110
    24e4:	f9 4f       	sbci	r31, 0xF9	; 249
    24e6:	80 83       	st	Z, r24

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
    24e8:	21 96       	adiw	r28, 0x01	; 1
    24ea:	c1 15       	cp	r28, r1
    24ec:	82 e0       	ldi	r24, 0x02	; 2
    24ee:	d8 07       	cpc	r29, r24
    24f0:	a9 f7       	brne	.-22     	; 0x24dc <SD_readSingleBlock+0x32>
  buffer[i] = SPI_receive();

SPI_receive(); //receive incoming CRC (16-bit), CRC is ignored here
    24f2:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <SPI_receive>
SPI_receive();
    24f6:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <SPI_receive>

SPI_receive(); //extra 8 clock pulses
    24fa:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <SPI_receive>
SD_CS_DEASSERT;
    24fe:	5c 9a       	sbi	0x0b, 4	; 11

return 0;
    2500:	80 e0       	ldi	r24, 0x00	; 0
}
    2502:	df 91       	pop	r29
    2504:	cf 91       	pop	r28
    2506:	08 95       	ret

00002508 <SD_writeSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_writeSingleBlock(unsigned long startBlock)
{
    2508:	cf 93       	push	r28
    250a:	df 93       	push	r29
    250c:	ab 01       	movw	r20, r22
    250e:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(WRITE_SINGLE_BLOCK, startBlock); //write a Block command
    2510:	88 e1       	ldi	r24, 0x18	; 24
    2512:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <SD_sendCommand>
  
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
    2516:	81 11       	cpse	r24, r1
    2518:	3e c0       	rjmp	.+124    	; 0x2596 <SD_writeSingleBlock+0x8e>

SD_CS_ASSERT;
    251a:	5c 98       	cbi	0x0b, 4	; 11

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)
    251c:	8e ef       	ldi	r24, 0xFE	; 254
    251e:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <SPI_transmit>

for(i=0; i<512; i++)    //send 512 bytes data
    2522:	c0 e0       	ldi	r28, 0x00	; 0
    2524:	d0 e0       	ldi	r29, 0x00	; 0
  SPI_transmit(buffer[i]);
    2526:	fe 01       	movw	r30, r28
    2528:	ee 56       	subi	r30, 0x6E	; 110
    252a:	f9 4f       	sbci	r31, 0xF9	; 249
    252c:	80 81       	ld	r24, Z
    252e:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <SPI_transmit>

SD_CS_ASSERT;

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)

for(i=0; i<512; i++)    //send 512 bytes data
    2532:	21 96       	adiw	r28, 0x01	; 1
    2534:	c1 15       	cp	r28, r1
    2536:	22 e0       	ldi	r18, 0x02	; 2
    2538:	d2 07       	cpc	r29, r18
    253a:	a9 f7       	brne	.-22     	; 0x2526 <SD_writeSingleBlock+0x1e>
  SPI_transmit(buffer[i]);

SPI_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
    253c:	8f ef       	ldi	r24, 0xFF	; 255
    253e:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <SPI_transmit>
SPI_transmit(0xff);
    2542:	8f ef       	ldi	r24, 0xFF	; 255
    2544:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <SPI_transmit>

response = SPI_receive();
    2548:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <SPI_receive>

if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
    254c:	98 2f       	mov	r25, r24
    254e:	9f 71       	andi	r25, 0x1F	; 31
    2550:	95 30       	cpi	r25, 0x05	; 5
    2552:	39 f0       	breq	.+14     	; 0x2562 <SD_writeSingleBlock+0x5a>
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
    2554:	5c 9a       	sbi	0x0b, 4	; 11
  return response;
    2556:	1f c0       	rjmp	.+62     	; 0x2596 <SD_writeSingleBlock+0x8e>
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    2558:	21 96       	adiw	r28, 0x01	; 1
    255a:	29 f4       	brne	.+10     	; 0x2566 <SD_writeSingleBlock+0x5e>
    255c:	5c 9a       	sbi	0x0b, 4	; 11
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	1a c0       	rjmp	.+52     	; 0x2596 <SD_writeSingleBlock+0x8e>
SPI_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
SPI_transmit(0xff);

response = SPI_receive();

if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
    2562:	c0 e0       	ldi	r28, 0x00	; 0
    2564:	d0 e0       	ldi	r29, 0x00	; 0
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    2566:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <SPI_receive>
    256a:	88 23       	and	r24, r24
    256c:	a9 f3       	breq	.-22     	; 0x2558 <SD_writeSingleBlock+0x50>
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}

SD_CS_DEASSERT;
    256e:	5c 9a       	sbi	0x0b, 4	; 11
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
    2570:	8f ef       	ldi	r24, 0xFF	; 255
    2572:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <SPI_transmit>
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy
    2576:	5c 98       	cbi	0x0b, 4	; 11

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    2578:	08 c0       	rjmp	.+16     	; 0x258a <SD_writeSingleBlock+0x82>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    257a:	ce 01       	movw	r24, r28
    257c:	01 96       	adiw	r24, 0x01	; 1
    257e:	21 96       	adiw	r28, 0x01	; 1
    2580:	19 f4       	brne	.+6      	; 0x2588 <SD_writeSingleBlock+0x80>
    2582:	5c 9a       	sbi	0x0b, 4	; 11
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	07 c0       	rjmp	.+14     	; 0x2596 <SD_writeSingleBlock+0x8e>
    2588:	ec 01       	movw	r28, r24

SD_CS_DEASSERT;
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    258a:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <SPI_receive>
    258e:	88 23       	and	r24, r24
    2590:	a1 f3       	breq	.-24     	; 0x257a <SD_writeSingleBlock+0x72>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
SD_CS_DEASSERT;
    2592:	5c 9a       	sbi	0x0b, 4	; 11

return 0;
    2594:	80 e0       	ldi	r24, 0x00	; 0
}
    2596:	df 91       	pop	r29
    2598:	cf 91       	pop	r28
    259a:	08 95       	ret

0000259c <spi_init>:

//SPI initialize for SD card
//clock rate: 4Mhz (SPI2X)
void spi_init(void)
{
SPCR = 0x52; //setup SPI: Master mode, MSB first, SCK phase low, SCK idle low
    259c:	82 e5       	ldi	r24, 0x52	; 82
    259e:	8c bd       	out	0x2c, r24	; 44
SPSR = 0x00;
    25a0:	1d bc       	out	0x2d, r1	; 45
    25a2:	08 95       	ret

000025a4 <SPI_transmit>:
}

unsigned char SPI_transmit(unsigned char data)
{
// Start transmission
SPDR = data;
    25a4:	8e bd       	out	0x2e, r24	; 46

// Wait for transmission complete
while(!(SPSR & (1<<SPIF)));
    25a6:	0d b4       	in	r0, 0x2d	; 45
    25a8:	07 fe       	sbrs	r0, 7
    25aa:	fd cf       	rjmp	.-6      	; 0x25a6 <SPI_transmit+0x2>
data = SPDR;
    25ac:	8e b5       	in	r24, 0x2e	; 46

return(data);
}
    25ae:	08 95       	ret

000025b0 <SPI_receive>:
unsigned char SPI_receive(void)
{
unsigned char data;
// Wait for reception complete

SPDR = 0xff;
    25b0:	8f ef       	ldi	r24, 0xFF	; 255
    25b2:	8e bd       	out	0x2e, r24	; 46
while(!(SPSR & (1<<SPIF)));
    25b4:	0d b4       	in	r0, 0x2d	; 45
    25b6:	07 fe       	sbrs	r0, 7
    25b8:	fd cf       	rjmp	.-6      	; 0x25b4 <SPI_receive+0x4>
data = SPDR;
    25ba:	8e b5       	in	r24, 0x2e	; 46

// Return data register
return data;
}
    25bc:	08 95       	ret

000025be <uart0_init>:
//char size: 8 bit
//parity: Disabled
//**************************************************
void uart0_init(void)
{
    UCSR0A = 0x00;
    25be:	10 92 c0 00 	sts	0x00C0, r1
    UCSR0B = 0x18;			// enable UART TX and RX
    25c2:	88 e1       	ldi	r24, 0x18	; 24
    25c4:	80 93 c1 00 	sts	0x00C1, r24
    UCSR0C = 0x06;			// set the UART for N, 8, 1
    25c8:	86 e0       	ldi	r24, 0x06	; 6
    25ca:	80 93 c2 00 	sts	0x00C2, r24
    UBRR0L = 8;				// set BAUD Rate for 115200 with 16MHz clock
    25ce:	88 e0       	ldi	r24, 0x08	; 8
    25d0:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = 0;
    25d4:	10 92 c5 00 	sts	0x00C5, r1
    25d8:	08 95       	ret

000025da <receiveByte>:
//*************************************************
unsigned char receiveByte( void )
{
   unsigned char data;   							// create a variable to hold the received value
   
   while ( (UCSR0A & (1<<RXC0)) == 0 )			// wait until the received character flag is set
    25da:	e0 ec       	ldi	r30, 0xC0	; 192
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	80 81       	ld	r24, Z
    25e0:	88 23       	and	r24, r24
    25e2:	ec f7       	brge	.-6      	; 0x25de <receiveByte+0x4>
   {
   }
   
   data=UDR0;  									// load the received character into the local variable
    25e4:	80 91 c6 00 	lds	r24, 0x00C6


   return data;									// return the value
}
    25e8:	08 95       	ret

000025ea <transmitByte>:
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
    while ( (UCSR0A & (1<<RXC0)) == 0 )			    // wait until the received character flag is set
    25ea:	e0 ec       	ldi	r30, 0xC0	; 192
    25ec:	f0 e0       	ldi	r31, 0x00	; 0
    25ee:	80 81       	ld	r24, Z
    25f0:	88 23       	and	r24, r24
    25f2:	ec f7       	brge	.-6      	; 0x25ee <transmitByte+0x4>
    {
    }

    data = UDR0;
    25f4:	80 91 c6 00 	lds	r24, 0x00C6
    25f8:	08 95       	ret

000025fa <transmitString_F>:

//***************************************************
//Function to transmit a string in Flash
//***************************************************
void transmitString_F(char* string)
{
    25fa:	cf 93       	push	r28
    25fc:	df 93       	push	r29
    25fe:	ec 01       	movw	r28, r24
  while (pgm_read_byte(&(*string)))
    2600:	fe 01       	movw	r30, r28
    2602:	24 91       	lpm	r18, Z
    2604:	22 23       	and	r18, r18
    2606:	51 f0       	breq	.+20     	; 0x261c <transmitString_F+0x22>
   transmitByte(pgm_read_byte(&(*string++)));
    2608:	21 96       	adiw	r28, 0x01	; 1
    260a:	fc 01       	movw	r30, r24
    260c:	84 91       	lpm	r24, Z
    260e:	0e 94 f5 12 	call	0x25ea	; 0x25ea <transmitByte>
//***************************************************
//Function to transmit a string in Flash
//***************************************************
void transmitString_F(char* string)
{
  while (pgm_read_byte(&(*string)))
    2612:	ce 01       	movw	r24, r28
    2614:	fe 01       	movw	r30, r28
    2616:	24 91       	lpm	r18, Z
    2618:	21 11       	cpse	r18, r1
    261a:	f6 cf       	rjmp	.-20     	; 0x2608 <transmitString_F+0xe>
   transmitByte(pgm_read_byte(&(*string++)));
}
    261c:	df 91       	pop	r29
    261e:	cf 91       	pop	r28
    2620:	08 95       	ret

00002622 <transmitString>:

//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
    2622:	cf 93       	push	r28
    2624:	df 93       	push	r29
    2626:	ec 01       	movw	r28, r24
  while (*string)
    2628:	88 81       	ld	r24, Y
    262a:	88 23       	and	r24, r24
    262c:	31 f0       	breq	.+12     	; 0x263a <transmitString+0x18>
    262e:	21 96       	adiw	r28, 0x01	; 1
   transmitByte(*string++);
    2630:	0e 94 f5 12 	call	0x25ea	; 0x25ea <transmitByte>
//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
  while (*string)
    2634:	89 91       	ld	r24, Y+
    2636:	81 11       	cpse	r24, r1
    2638:	fb cf       	rjmp	.-10     	; 0x2630 <transmitString+0xe>
   transmitByte(*string++);
}
    263a:	df 91       	pop	r29
    263c:	cf 91       	pop	r28
    263e:	08 95       	ret

00002640 <__mulsi3>:
    2640:	db 01       	movw	r26, r22
    2642:	8f 93       	push	r24
    2644:	9f 93       	push	r25
    2646:	0e 94 67 13 	call	0x26ce	; 0x26ce <__muluhisi3>
    264a:	bf 91       	pop	r27
    264c:	af 91       	pop	r26
    264e:	a2 9f       	mul	r26, r18
    2650:	80 0d       	add	r24, r0
    2652:	91 1d       	adc	r25, r1
    2654:	a3 9f       	mul	r26, r19
    2656:	90 0d       	add	r25, r0
    2658:	b2 9f       	mul	r27, r18
    265a:	90 0d       	add	r25, r0
    265c:	11 24       	eor	r1, r1
    265e:	08 95       	ret

00002660 <__udivmodsi4>:
    2660:	a1 e2       	ldi	r26, 0x21	; 33
    2662:	1a 2e       	mov	r1, r26
    2664:	aa 1b       	sub	r26, r26
    2666:	bb 1b       	sub	r27, r27
    2668:	fd 01       	movw	r30, r26
    266a:	0d c0       	rjmp	.+26     	; 0x2686 <__udivmodsi4_ep>

0000266c <__udivmodsi4_loop>:
    266c:	aa 1f       	adc	r26, r26
    266e:	bb 1f       	adc	r27, r27
    2670:	ee 1f       	adc	r30, r30
    2672:	ff 1f       	adc	r31, r31
    2674:	a2 17       	cp	r26, r18
    2676:	b3 07       	cpc	r27, r19
    2678:	e4 07       	cpc	r30, r20
    267a:	f5 07       	cpc	r31, r21
    267c:	20 f0       	brcs	.+8      	; 0x2686 <__udivmodsi4_ep>
    267e:	a2 1b       	sub	r26, r18
    2680:	b3 0b       	sbc	r27, r19
    2682:	e4 0b       	sbc	r30, r20
    2684:	f5 0b       	sbc	r31, r21

00002686 <__udivmodsi4_ep>:
    2686:	66 1f       	adc	r22, r22
    2688:	77 1f       	adc	r23, r23
    268a:	88 1f       	adc	r24, r24
    268c:	99 1f       	adc	r25, r25
    268e:	1a 94       	dec	r1
    2690:	69 f7       	brne	.-38     	; 0x266c <__udivmodsi4_loop>
    2692:	60 95       	com	r22
    2694:	70 95       	com	r23
    2696:	80 95       	com	r24
    2698:	90 95       	com	r25
    269a:	9b 01       	movw	r18, r22
    269c:	ac 01       	movw	r20, r24
    269e:	bd 01       	movw	r22, r26
    26a0:	cf 01       	movw	r24, r30
    26a2:	08 95       	ret

000026a4 <__tablejump2__>:
    26a4:	ee 0f       	add	r30, r30
    26a6:	ff 1f       	adc	r31, r31

000026a8 <__tablejump__>:
    26a8:	05 90       	lpm	r0, Z+
    26aa:	f4 91       	lpm	r31, Z
    26ac:	e0 2d       	mov	r30, r0
    26ae:	09 94       	ijmp

000026b0 <__umulhisi3>:
    26b0:	a2 9f       	mul	r26, r18
    26b2:	b0 01       	movw	r22, r0
    26b4:	b3 9f       	mul	r27, r19
    26b6:	c0 01       	movw	r24, r0
    26b8:	a3 9f       	mul	r26, r19
    26ba:	70 0d       	add	r23, r0
    26bc:	81 1d       	adc	r24, r1
    26be:	11 24       	eor	r1, r1
    26c0:	91 1d       	adc	r25, r1
    26c2:	b2 9f       	mul	r27, r18
    26c4:	70 0d       	add	r23, r0
    26c6:	81 1d       	adc	r24, r1
    26c8:	11 24       	eor	r1, r1
    26ca:	91 1d       	adc	r25, r1
    26cc:	08 95       	ret

000026ce <__muluhisi3>:
    26ce:	0e 94 58 13 	call	0x26b0	; 0x26b0 <__umulhisi3>
    26d2:	a5 9f       	mul	r26, r21
    26d4:	90 0d       	add	r25, r0
    26d6:	b4 9f       	mul	r27, r20
    26d8:	90 0d       	add	r25, r0
    26da:	a4 9f       	mul	r26, r20
    26dc:	80 0d       	add	r24, r0
    26de:	91 1d       	adc	r25, r1
    26e0:	11 24       	eor	r1, r1
    26e2:	08 95       	ret

000026e4 <printf>:
    26e4:	a0 e0       	ldi	r26, 0x00	; 0
    26e6:	b0 e0       	ldi	r27, 0x00	; 0
    26e8:	e8 e7       	ldi	r30, 0x78	; 120
    26ea:	f3 e1       	ldi	r31, 0x13	; 19
    26ec:	0c 94 42 16 	jmp	0x2c84	; 0x2c84 <__prologue_saves__+0x20>
    26f0:	fe 01       	movw	r30, r28
    26f2:	35 96       	adiw	r30, 0x05	; 5
    26f4:	61 91       	ld	r22, Z+
    26f6:	71 91       	ld	r23, Z+
    26f8:	af 01       	movw	r20, r30
    26fa:	80 91 ab 08 	lds	r24, 0x08AB
    26fe:	90 91 ac 08 	lds	r25, 0x08AC
    2702:	0e 94 ba 13 	call	0x2774	; 0x2774 <vfprintf>
    2706:	e2 e0       	ldi	r30, 0x02	; 2
    2708:	0c 94 5e 16 	jmp	0x2cbc	; 0x2cbc <__epilogue_restores__+0x20>

0000270c <putchar>:
    270c:	60 91 ab 08 	lds	r22, 0x08AB
    2710:	70 91 ac 08 	lds	r23, 0x08AC
    2714:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <fputc>
    2718:	08 95       	ret

0000271a <puts>:
    271a:	0f 93       	push	r16
    271c:	1f 93       	push	r17
    271e:	cf 93       	push	r28
    2720:	df 93       	push	r29
    2722:	e0 91 ab 08 	lds	r30, 0x08AB
    2726:	f0 91 ac 08 	lds	r31, 0x08AC
    272a:	23 81       	ldd	r18, Z+3	; 0x03
    272c:	21 ff       	sbrs	r18, 1
    272e:	1b c0       	rjmp	.+54     	; 0x2766 <puts+0x4c>
    2730:	ec 01       	movw	r28, r24
    2732:	00 e0       	ldi	r16, 0x00	; 0
    2734:	10 e0       	ldi	r17, 0x00	; 0
    2736:	89 91       	ld	r24, Y+
    2738:	60 91 ab 08 	lds	r22, 0x08AB
    273c:	70 91 ac 08 	lds	r23, 0x08AC
    2740:	db 01       	movw	r26, r22
    2742:	18 96       	adiw	r26, 0x08	; 8
    2744:	ed 91       	ld	r30, X+
    2746:	fc 91       	ld	r31, X
    2748:	19 97       	sbiw	r26, 0x09	; 9
    274a:	88 23       	and	r24, r24
    274c:	31 f0       	breq	.+12     	; 0x275a <puts+0x40>
    274e:	09 95       	icall
    2750:	89 2b       	or	r24, r25
    2752:	89 f3       	breq	.-30     	; 0x2736 <puts+0x1c>
    2754:	0f ef       	ldi	r16, 0xFF	; 255
    2756:	1f ef       	ldi	r17, 0xFF	; 255
    2758:	ee cf       	rjmp	.-36     	; 0x2736 <puts+0x1c>
    275a:	8a e0       	ldi	r24, 0x0A	; 10
    275c:	09 95       	icall
    275e:	89 2b       	or	r24, r25
    2760:	11 f4       	brne	.+4      	; 0x2766 <puts+0x4c>
    2762:	c8 01       	movw	r24, r16
    2764:	02 c0       	rjmp	.+4      	; 0x276a <puts+0x50>
    2766:	8f ef       	ldi	r24, 0xFF	; 255
    2768:	9f ef       	ldi	r25, 0xFF	; 255
    276a:	df 91       	pop	r29
    276c:	cf 91       	pop	r28
    276e:	1f 91       	pop	r17
    2770:	0f 91       	pop	r16
    2772:	08 95       	ret

00002774 <vfprintf>:
    2774:	ac e0       	ldi	r26, 0x0C	; 12
    2776:	b0 e0       	ldi	r27, 0x00	; 0
    2778:	e0 ec       	ldi	r30, 0xC0	; 192
    277a:	f3 e1       	ldi	r31, 0x13	; 19
    277c:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__prologue_saves__>
    2780:	7c 01       	movw	r14, r24
    2782:	6b 01       	movw	r12, r22
    2784:	8a 01       	movw	r16, r20
    2786:	fc 01       	movw	r30, r24
    2788:	17 82       	std	Z+7, r1	; 0x07
    278a:	16 82       	std	Z+6, r1	; 0x06
    278c:	83 81       	ldd	r24, Z+3	; 0x03
    278e:	81 ff       	sbrs	r24, 1
    2790:	bd c1       	rjmp	.+890    	; 0x2b0c <vfprintf+0x398>
    2792:	ce 01       	movw	r24, r28
    2794:	01 96       	adiw	r24, 0x01	; 1
    2796:	4c 01       	movw	r8, r24
    2798:	f7 01       	movw	r30, r14
    279a:	93 81       	ldd	r25, Z+3	; 0x03
    279c:	f6 01       	movw	r30, r12
    279e:	93 fd       	sbrc	r25, 3
    27a0:	85 91       	lpm	r24, Z+
    27a2:	93 ff       	sbrs	r25, 3
    27a4:	81 91       	ld	r24, Z+
    27a6:	6f 01       	movw	r12, r30
    27a8:	88 23       	and	r24, r24
    27aa:	09 f4       	brne	.+2      	; 0x27ae <vfprintf+0x3a>
    27ac:	ab c1       	rjmp	.+854    	; 0x2b04 <vfprintf+0x390>
    27ae:	85 32       	cpi	r24, 0x25	; 37
    27b0:	39 f4       	brne	.+14     	; 0x27c0 <vfprintf+0x4c>
    27b2:	93 fd       	sbrc	r25, 3
    27b4:	85 91       	lpm	r24, Z+
    27b6:	93 ff       	sbrs	r25, 3
    27b8:	81 91       	ld	r24, Z+
    27ba:	6f 01       	movw	r12, r30
    27bc:	85 32       	cpi	r24, 0x25	; 37
    27be:	29 f4       	brne	.+10     	; 0x27ca <vfprintf+0x56>
    27c0:	b7 01       	movw	r22, r14
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <fputc>
    27c8:	e7 cf       	rjmp	.-50     	; 0x2798 <vfprintf+0x24>
    27ca:	51 2c       	mov	r5, r1
    27cc:	31 2c       	mov	r3, r1
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	20 32       	cpi	r18, 0x20	; 32
    27d2:	a0 f4       	brcc	.+40     	; 0x27fc <vfprintf+0x88>
    27d4:	8b 32       	cpi	r24, 0x2B	; 43
    27d6:	69 f0       	breq	.+26     	; 0x27f2 <vfprintf+0x7e>
    27d8:	30 f4       	brcc	.+12     	; 0x27e6 <vfprintf+0x72>
    27da:	80 32       	cpi	r24, 0x20	; 32
    27dc:	59 f0       	breq	.+22     	; 0x27f4 <vfprintf+0x80>
    27de:	83 32       	cpi	r24, 0x23	; 35
    27e0:	69 f4       	brne	.+26     	; 0x27fc <vfprintf+0x88>
    27e2:	20 61       	ori	r18, 0x10	; 16
    27e4:	2c c0       	rjmp	.+88     	; 0x283e <vfprintf+0xca>
    27e6:	8d 32       	cpi	r24, 0x2D	; 45
    27e8:	39 f0       	breq	.+14     	; 0x27f8 <vfprintf+0x84>
    27ea:	80 33       	cpi	r24, 0x30	; 48
    27ec:	39 f4       	brne	.+14     	; 0x27fc <vfprintf+0x88>
    27ee:	21 60       	ori	r18, 0x01	; 1
    27f0:	26 c0       	rjmp	.+76     	; 0x283e <vfprintf+0xca>
    27f2:	22 60       	ori	r18, 0x02	; 2
    27f4:	24 60       	ori	r18, 0x04	; 4
    27f6:	23 c0       	rjmp	.+70     	; 0x283e <vfprintf+0xca>
    27f8:	28 60       	ori	r18, 0x08	; 8
    27fa:	21 c0       	rjmp	.+66     	; 0x283e <vfprintf+0xca>
    27fc:	27 fd       	sbrc	r18, 7
    27fe:	27 c0       	rjmp	.+78     	; 0x284e <vfprintf+0xda>
    2800:	30 ed       	ldi	r19, 0xD0	; 208
    2802:	38 0f       	add	r19, r24
    2804:	3a 30       	cpi	r19, 0x0A	; 10
    2806:	78 f4       	brcc	.+30     	; 0x2826 <vfprintf+0xb2>
    2808:	26 ff       	sbrs	r18, 6
    280a:	06 c0       	rjmp	.+12     	; 0x2818 <vfprintf+0xa4>
    280c:	fa e0       	ldi	r31, 0x0A	; 10
    280e:	5f 9e       	mul	r5, r31
    2810:	30 0d       	add	r19, r0
    2812:	11 24       	eor	r1, r1
    2814:	53 2e       	mov	r5, r19
    2816:	13 c0       	rjmp	.+38     	; 0x283e <vfprintf+0xca>
    2818:	8a e0       	ldi	r24, 0x0A	; 10
    281a:	38 9e       	mul	r3, r24
    281c:	30 0d       	add	r19, r0
    281e:	11 24       	eor	r1, r1
    2820:	33 2e       	mov	r3, r19
    2822:	20 62       	ori	r18, 0x20	; 32
    2824:	0c c0       	rjmp	.+24     	; 0x283e <vfprintf+0xca>
    2826:	8e 32       	cpi	r24, 0x2E	; 46
    2828:	21 f4       	brne	.+8      	; 0x2832 <vfprintf+0xbe>
    282a:	26 fd       	sbrc	r18, 6
    282c:	6b c1       	rjmp	.+726    	; 0x2b04 <vfprintf+0x390>
    282e:	20 64       	ori	r18, 0x40	; 64
    2830:	06 c0       	rjmp	.+12     	; 0x283e <vfprintf+0xca>
    2832:	8c 36       	cpi	r24, 0x6C	; 108
    2834:	11 f4       	brne	.+4      	; 0x283a <vfprintf+0xc6>
    2836:	20 68       	ori	r18, 0x80	; 128
    2838:	02 c0       	rjmp	.+4      	; 0x283e <vfprintf+0xca>
    283a:	88 36       	cpi	r24, 0x68	; 104
    283c:	41 f4       	brne	.+16     	; 0x284e <vfprintf+0xda>
    283e:	f6 01       	movw	r30, r12
    2840:	93 fd       	sbrc	r25, 3
    2842:	85 91       	lpm	r24, Z+
    2844:	93 ff       	sbrs	r25, 3
    2846:	81 91       	ld	r24, Z+
    2848:	6f 01       	movw	r12, r30
    284a:	81 11       	cpse	r24, r1
    284c:	c1 cf       	rjmp	.-126    	; 0x27d0 <vfprintf+0x5c>
    284e:	98 2f       	mov	r25, r24
    2850:	9f 7d       	andi	r25, 0xDF	; 223
    2852:	95 54       	subi	r25, 0x45	; 69
    2854:	93 30       	cpi	r25, 0x03	; 3
    2856:	28 f4       	brcc	.+10     	; 0x2862 <vfprintf+0xee>
    2858:	0c 5f       	subi	r16, 0xFC	; 252
    285a:	1f 4f       	sbci	r17, 0xFF	; 255
    285c:	ff e3       	ldi	r31, 0x3F	; 63
    285e:	f9 83       	std	Y+1, r31	; 0x01
    2860:	0d c0       	rjmp	.+26     	; 0x287c <vfprintf+0x108>
    2862:	83 36       	cpi	r24, 0x63	; 99
    2864:	31 f0       	breq	.+12     	; 0x2872 <vfprintf+0xfe>
    2866:	83 37       	cpi	r24, 0x73	; 115
    2868:	71 f0       	breq	.+28     	; 0x2886 <vfprintf+0x112>
    286a:	83 35       	cpi	r24, 0x53	; 83
    286c:	09 f0       	breq	.+2      	; 0x2870 <vfprintf+0xfc>
    286e:	5b c0       	rjmp	.+182    	; 0x2926 <vfprintf+0x1b2>
    2870:	22 c0       	rjmp	.+68     	; 0x28b6 <vfprintf+0x142>
    2872:	f8 01       	movw	r30, r16
    2874:	80 81       	ld	r24, Z
    2876:	89 83       	std	Y+1, r24	; 0x01
    2878:	0e 5f       	subi	r16, 0xFE	; 254
    287a:	1f 4f       	sbci	r17, 0xFF	; 255
    287c:	44 24       	eor	r4, r4
    287e:	43 94       	inc	r4
    2880:	51 2c       	mov	r5, r1
    2882:	54 01       	movw	r10, r8
    2884:	15 c0       	rjmp	.+42     	; 0x28b0 <vfprintf+0x13c>
    2886:	38 01       	movw	r6, r16
    2888:	f2 e0       	ldi	r31, 0x02	; 2
    288a:	6f 0e       	add	r6, r31
    288c:	71 1c       	adc	r7, r1
    288e:	f8 01       	movw	r30, r16
    2890:	a0 80       	ld	r10, Z
    2892:	b1 80       	ldd	r11, Z+1	; 0x01
    2894:	26 ff       	sbrs	r18, 6
    2896:	03 c0       	rjmp	.+6      	; 0x289e <vfprintf+0x12a>
    2898:	65 2d       	mov	r22, r5
    289a:	70 e0       	ldi	r23, 0x00	; 0
    289c:	02 c0       	rjmp	.+4      	; 0x28a2 <vfprintf+0x12e>
    289e:	6f ef       	ldi	r22, 0xFF	; 255
    28a0:	7f ef       	ldi	r23, 0xFF	; 255
    28a2:	c5 01       	movw	r24, r10
    28a4:	2c 87       	std	Y+12, r18	; 0x0c
    28a6:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <strnlen>
    28aa:	2c 01       	movw	r4, r24
    28ac:	83 01       	movw	r16, r6
    28ae:	2c 85       	ldd	r18, Y+12	; 0x0c
    28b0:	2f 77       	andi	r18, 0x7F	; 127
    28b2:	22 2e       	mov	r2, r18
    28b4:	17 c0       	rjmp	.+46     	; 0x28e4 <vfprintf+0x170>
    28b6:	38 01       	movw	r6, r16
    28b8:	f2 e0       	ldi	r31, 0x02	; 2
    28ba:	6f 0e       	add	r6, r31
    28bc:	71 1c       	adc	r7, r1
    28be:	f8 01       	movw	r30, r16
    28c0:	a0 80       	ld	r10, Z
    28c2:	b1 80       	ldd	r11, Z+1	; 0x01
    28c4:	26 ff       	sbrs	r18, 6
    28c6:	03 c0       	rjmp	.+6      	; 0x28ce <vfprintf+0x15a>
    28c8:	65 2d       	mov	r22, r5
    28ca:	70 e0       	ldi	r23, 0x00	; 0
    28cc:	02 c0       	rjmp	.+4      	; 0x28d2 <vfprintf+0x15e>
    28ce:	6f ef       	ldi	r22, 0xFF	; 255
    28d0:	7f ef       	ldi	r23, 0xFF	; 255
    28d2:	c5 01       	movw	r24, r10
    28d4:	2c 87       	std	Y+12, r18	; 0x0c
    28d6:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <strnlen_P>
    28da:	2c 01       	movw	r4, r24
    28dc:	2c 85       	ldd	r18, Y+12	; 0x0c
    28de:	20 68       	ori	r18, 0x80	; 128
    28e0:	22 2e       	mov	r2, r18
    28e2:	83 01       	movw	r16, r6
    28e4:	23 fc       	sbrc	r2, 3
    28e6:	1b c0       	rjmp	.+54     	; 0x291e <vfprintf+0x1aa>
    28e8:	83 2d       	mov	r24, r3
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	48 16       	cp	r4, r24
    28ee:	59 06       	cpc	r5, r25
    28f0:	b0 f4       	brcc	.+44     	; 0x291e <vfprintf+0x1aa>
    28f2:	b7 01       	movw	r22, r14
    28f4:	80 e2       	ldi	r24, 0x20	; 32
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <fputc>
    28fc:	3a 94       	dec	r3
    28fe:	f4 cf       	rjmp	.-24     	; 0x28e8 <vfprintf+0x174>
    2900:	f5 01       	movw	r30, r10
    2902:	27 fc       	sbrc	r2, 7
    2904:	85 91       	lpm	r24, Z+
    2906:	27 fe       	sbrs	r2, 7
    2908:	81 91       	ld	r24, Z+
    290a:	5f 01       	movw	r10, r30
    290c:	b7 01       	movw	r22, r14
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <fputc>
    2914:	31 10       	cpse	r3, r1
    2916:	3a 94       	dec	r3
    2918:	f1 e0       	ldi	r31, 0x01	; 1
    291a:	4f 1a       	sub	r4, r31
    291c:	51 08       	sbc	r5, r1
    291e:	41 14       	cp	r4, r1
    2920:	51 04       	cpc	r5, r1
    2922:	71 f7       	brne	.-36     	; 0x2900 <vfprintf+0x18c>
    2924:	e5 c0       	rjmp	.+458    	; 0x2af0 <vfprintf+0x37c>
    2926:	84 36       	cpi	r24, 0x64	; 100
    2928:	11 f0       	breq	.+4      	; 0x292e <vfprintf+0x1ba>
    292a:	89 36       	cpi	r24, 0x69	; 105
    292c:	39 f5       	brne	.+78     	; 0x297c <vfprintf+0x208>
    292e:	f8 01       	movw	r30, r16
    2930:	27 ff       	sbrs	r18, 7
    2932:	07 c0       	rjmp	.+14     	; 0x2942 <vfprintf+0x1ce>
    2934:	60 81       	ld	r22, Z
    2936:	71 81       	ldd	r23, Z+1	; 0x01
    2938:	82 81       	ldd	r24, Z+2	; 0x02
    293a:	93 81       	ldd	r25, Z+3	; 0x03
    293c:	0c 5f       	subi	r16, 0xFC	; 252
    293e:	1f 4f       	sbci	r17, 0xFF	; 255
    2940:	08 c0       	rjmp	.+16     	; 0x2952 <vfprintf+0x1de>
    2942:	60 81       	ld	r22, Z
    2944:	71 81       	ldd	r23, Z+1	; 0x01
    2946:	88 27       	eor	r24, r24
    2948:	77 fd       	sbrc	r23, 7
    294a:	80 95       	com	r24
    294c:	98 2f       	mov	r25, r24
    294e:	0e 5f       	subi	r16, 0xFE	; 254
    2950:	1f 4f       	sbci	r17, 0xFF	; 255
    2952:	2f 76       	andi	r18, 0x6F	; 111
    2954:	b2 2e       	mov	r11, r18
    2956:	97 ff       	sbrs	r25, 7
    2958:	09 c0       	rjmp	.+18     	; 0x296c <vfprintf+0x1f8>
    295a:	90 95       	com	r25
    295c:	80 95       	com	r24
    295e:	70 95       	com	r23
    2960:	61 95       	neg	r22
    2962:	7f 4f       	sbci	r23, 0xFF	; 255
    2964:	8f 4f       	sbci	r24, 0xFF	; 255
    2966:	9f 4f       	sbci	r25, 0xFF	; 255
    2968:	20 68       	ori	r18, 0x80	; 128
    296a:	b2 2e       	mov	r11, r18
    296c:	2a e0       	ldi	r18, 0x0A	; 10
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	a4 01       	movw	r20, r8
    2972:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <__ultoa_invert>
    2976:	a8 2e       	mov	r10, r24
    2978:	a8 18       	sub	r10, r8
    297a:	44 c0       	rjmp	.+136    	; 0x2a04 <vfprintf+0x290>
    297c:	85 37       	cpi	r24, 0x75	; 117
    297e:	29 f4       	brne	.+10     	; 0x298a <vfprintf+0x216>
    2980:	2f 7e       	andi	r18, 0xEF	; 239
    2982:	b2 2e       	mov	r11, r18
    2984:	2a e0       	ldi	r18, 0x0A	; 10
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	25 c0       	rjmp	.+74     	; 0x29d4 <vfprintf+0x260>
    298a:	f2 2f       	mov	r31, r18
    298c:	f9 7f       	andi	r31, 0xF9	; 249
    298e:	bf 2e       	mov	r11, r31
    2990:	8f 36       	cpi	r24, 0x6F	; 111
    2992:	c1 f0       	breq	.+48     	; 0x29c4 <vfprintf+0x250>
    2994:	18 f4       	brcc	.+6      	; 0x299c <vfprintf+0x228>
    2996:	88 35       	cpi	r24, 0x58	; 88
    2998:	79 f0       	breq	.+30     	; 0x29b8 <vfprintf+0x244>
    299a:	b4 c0       	rjmp	.+360    	; 0x2b04 <vfprintf+0x390>
    299c:	80 37       	cpi	r24, 0x70	; 112
    299e:	19 f0       	breq	.+6      	; 0x29a6 <vfprintf+0x232>
    29a0:	88 37       	cpi	r24, 0x78	; 120
    29a2:	21 f0       	breq	.+8      	; 0x29ac <vfprintf+0x238>
    29a4:	af c0       	rjmp	.+350    	; 0x2b04 <vfprintf+0x390>
    29a6:	2f 2f       	mov	r18, r31
    29a8:	20 61       	ori	r18, 0x10	; 16
    29aa:	b2 2e       	mov	r11, r18
    29ac:	b4 fe       	sbrs	r11, 4
    29ae:	0d c0       	rjmp	.+26     	; 0x29ca <vfprintf+0x256>
    29b0:	8b 2d       	mov	r24, r11
    29b2:	84 60       	ori	r24, 0x04	; 4
    29b4:	b8 2e       	mov	r11, r24
    29b6:	09 c0       	rjmp	.+18     	; 0x29ca <vfprintf+0x256>
    29b8:	24 ff       	sbrs	r18, 4
    29ba:	0a c0       	rjmp	.+20     	; 0x29d0 <vfprintf+0x25c>
    29bc:	9f 2f       	mov	r25, r31
    29be:	96 60       	ori	r25, 0x06	; 6
    29c0:	b9 2e       	mov	r11, r25
    29c2:	06 c0       	rjmp	.+12     	; 0x29d0 <vfprintf+0x25c>
    29c4:	28 e0       	ldi	r18, 0x08	; 8
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	05 c0       	rjmp	.+10     	; 0x29d4 <vfprintf+0x260>
    29ca:	20 e1       	ldi	r18, 0x10	; 16
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	02 c0       	rjmp	.+4      	; 0x29d4 <vfprintf+0x260>
    29d0:	20 e1       	ldi	r18, 0x10	; 16
    29d2:	32 e0       	ldi	r19, 0x02	; 2
    29d4:	f8 01       	movw	r30, r16
    29d6:	b7 fe       	sbrs	r11, 7
    29d8:	07 c0       	rjmp	.+14     	; 0x29e8 <vfprintf+0x274>
    29da:	60 81       	ld	r22, Z
    29dc:	71 81       	ldd	r23, Z+1	; 0x01
    29de:	82 81       	ldd	r24, Z+2	; 0x02
    29e0:	93 81       	ldd	r25, Z+3	; 0x03
    29e2:	0c 5f       	subi	r16, 0xFC	; 252
    29e4:	1f 4f       	sbci	r17, 0xFF	; 255
    29e6:	06 c0       	rjmp	.+12     	; 0x29f4 <vfprintf+0x280>
    29e8:	60 81       	ld	r22, Z
    29ea:	71 81       	ldd	r23, Z+1	; 0x01
    29ec:	80 e0       	ldi	r24, 0x00	; 0
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	0e 5f       	subi	r16, 0xFE	; 254
    29f2:	1f 4f       	sbci	r17, 0xFF	; 255
    29f4:	a4 01       	movw	r20, r8
    29f6:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <__ultoa_invert>
    29fa:	a8 2e       	mov	r10, r24
    29fc:	a8 18       	sub	r10, r8
    29fe:	fb 2d       	mov	r31, r11
    2a00:	ff 77       	andi	r31, 0x7F	; 127
    2a02:	bf 2e       	mov	r11, r31
    2a04:	b6 fe       	sbrs	r11, 6
    2a06:	0b c0       	rjmp	.+22     	; 0x2a1e <vfprintf+0x2aa>
    2a08:	2b 2d       	mov	r18, r11
    2a0a:	2e 7f       	andi	r18, 0xFE	; 254
    2a0c:	a5 14       	cp	r10, r5
    2a0e:	50 f4       	brcc	.+20     	; 0x2a24 <vfprintf+0x2b0>
    2a10:	b4 fe       	sbrs	r11, 4
    2a12:	0a c0       	rjmp	.+20     	; 0x2a28 <vfprintf+0x2b4>
    2a14:	b2 fc       	sbrc	r11, 2
    2a16:	08 c0       	rjmp	.+16     	; 0x2a28 <vfprintf+0x2b4>
    2a18:	2b 2d       	mov	r18, r11
    2a1a:	2e 7e       	andi	r18, 0xEE	; 238
    2a1c:	05 c0       	rjmp	.+10     	; 0x2a28 <vfprintf+0x2b4>
    2a1e:	7a 2c       	mov	r7, r10
    2a20:	2b 2d       	mov	r18, r11
    2a22:	03 c0       	rjmp	.+6      	; 0x2a2a <vfprintf+0x2b6>
    2a24:	7a 2c       	mov	r7, r10
    2a26:	01 c0       	rjmp	.+2      	; 0x2a2a <vfprintf+0x2b6>
    2a28:	75 2c       	mov	r7, r5
    2a2a:	24 ff       	sbrs	r18, 4
    2a2c:	0d c0       	rjmp	.+26     	; 0x2a48 <vfprintf+0x2d4>
    2a2e:	fe 01       	movw	r30, r28
    2a30:	ea 0d       	add	r30, r10
    2a32:	f1 1d       	adc	r31, r1
    2a34:	80 81       	ld	r24, Z
    2a36:	80 33       	cpi	r24, 0x30	; 48
    2a38:	11 f4       	brne	.+4      	; 0x2a3e <vfprintf+0x2ca>
    2a3a:	29 7e       	andi	r18, 0xE9	; 233
    2a3c:	09 c0       	rjmp	.+18     	; 0x2a50 <vfprintf+0x2dc>
    2a3e:	22 ff       	sbrs	r18, 2
    2a40:	06 c0       	rjmp	.+12     	; 0x2a4e <vfprintf+0x2da>
    2a42:	73 94       	inc	r7
    2a44:	73 94       	inc	r7
    2a46:	04 c0       	rjmp	.+8      	; 0x2a50 <vfprintf+0x2dc>
    2a48:	82 2f       	mov	r24, r18
    2a4a:	86 78       	andi	r24, 0x86	; 134
    2a4c:	09 f0       	breq	.+2      	; 0x2a50 <vfprintf+0x2dc>
    2a4e:	73 94       	inc	r7
    2a50:	23 fd       	sbrc	r18, 3
    2a52:	13 c0       	rjmp	.+38     	; 0x2a7a <vfprintf+0x306>
    2a54:	20 ff       	sbrs	r18, 0
    2a56:	06 c0       	rjmp	.+12     	; 0x2a64 <vfprintf+0x2f0>
    2a58:	5a 2c       	mov	r5, r10
    2a5a:	73 14       	cp	r7, r3
    2a5c:	18 f4       	brcc	.+6      	; 0x2a64 <vfprintf+0x2f0>
    2a5e:	53 0c       	add	r5, r3
    2a60:	57 18       	sub	r5, r7
    2a62:	73 2c       	mov	r7, r3
    2a64:	73 14       	cp	r7, r3
    2a66:	68 f4       	brcc	.+26     	; 0x2a82 <vfprintf+0x30e>
    2a68:	b7 01       	movw	r22, r14
    2a6a:	80 e2       	ldi	r24, 0x20	; 32
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	2c 87       	std	Y+12, r18	; 0x0c
    2a70:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <fputc>
    2a74:	73 94       	inc	r7
    2a76:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a78:	f5 cf       	rjmp	.-22     	; 0x2a64 <vfprintf+0x2f0>
    2a7a:	73 14       	cp	r7, r3
    2a7c:	10 f4       	brcc	.+4      	; 0x2a82 <vfprintf+0x30e>
    2a7e:	37 18       	sub	r3, r7
    2a80:	01 c0       	rjmp	.+2      	; 0x2a84 <vfprintf+0x310>
    2a82:	31 2c       	mov	r3, r1
    2a84:	24 ff       	sbrs	r18, 4
    2a86:	12 c0       	rjmp	.+36     	; 0x2aac <vfprintf+0x338>
    2a88:	b7 01       	movw	r22, r14
    2a8a:	80 e3       	ldi	r24, 0x30	; 48
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	2c 87       	std	Y+12, r18	; 0x0c
    2a90:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <fputc>
    2a94:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a96:	22 ff       	sbrs	r18, 2
    2a98:	17 c0       	rjmp	.+46     	; 0x2ac8 <vfprintf+0x354>
    2a9a:	21 ff       	sbrs	r18, 1
    2a9c:	03 c0       	rjmp	.+6      	; 0x2aa4 <vfprintf+0x330>
    2a9e:	88 e5       	ldi	r24, 0x58	; 88
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	02 c0       	rjmp	.+4      	; 0x2aa8 <vfprintf+0x334>
    2aa4:	88 e7       	ldi	r24, 0x78	; 120
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	b7 01       	movw	r22, r14
    2aaa:	0c c0       	rjmp	.+24     	; 0x2ac4 <vfprintf+0x350>
    2aac:	82 2f       	mov	r24, r18
    2aae:	86 78       	andi	r24, 0x86	; 134
    2ab0:	59 f0       	breq	.+22     	; 0x2ac8 <vfprintf+0x354>
    2ab2:	21 fd       	sbrc	r18, 1
    2ab4:	02 c0       	rjmp	.+4      	; 0x2aba <vfprintf+0x346>
    2ab6:	80 e2       	ldi	r24, 0x20	; 32
    2ab8:	01 c0       	rjmp	.+2      	; 0x2abc <vfprintf+0x348>
    2aba:	8b e2       	ldi	r24, 0x2B	; 43
    2abc:	27 fd       	sbrc	r18, 7
    2abe:	8d e2       	ldi	r24, 0x2D	; 45
    2ac0:	b7 01       	movw	r22, r14
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <fputc>
    2ac8:	a5 14       	cp	r10, r5
    2aca:	38 f4       	brcc	.+14     	; 0x2ada <vfprintf+0x366>
    2acc:	b7 01       	movw	r22, r14
    2ace:	80 e3       	ldi	r24, 0x30	; 48
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <fputc>
    2ad6:	5a 94       	dec	r5
    2ad8:	f7 cf       	rjmp	.-18     	; 0x2ac8 <vfprintf+0x354>
    2ada:	aa 94       	dec	r10
    2adc:	f4 01       	movw	r30, r8
    2ade:	ea 0d       	add	r30, r10
    2ae0:	f1 1d       	adc	r31, r1
    2ae2:	80 81       	ld	r24, Z
    2ae4:	b7 01       	movw	r22, r14
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <fputc>
    2aec:	a1 10       	cpse	r10, r1
    2aee:	f5 cf       	rjmp	.-22     	; 0x2ada <vfprintf+0x366>
    2af0:	33 20       	and	r3, r3
    2af2:	09 f4       	brne	.+2      	; 0x2af6 <vfprintf+0x382>
    2af4:	51 ce       	rjmp	.-862    	; 0x2798 <vfprintf+0x24>
    2af6:	b7 01       	movw	r22, r14
    2af8:	80 e2       	ldi	r24, 0x20	; 32
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <fputc>
    2b00:	3a 94       	dec	r3
    2b02:	f6 cf       	rjmp	.-20     	; 0x2af0 <vfprintf+0x37c>
    2b04:	f7 01       	movw	r30, r14
    2b06:	86 81       	ldd	r24, Z+6	; 0x06
    2b08:	97 81       	ldd	r25, Z+7	; 0x07
    2b0a:	02 c0       	rjmp	.+4      	; 0x2b10 <vfprintf+0x39c>
    2b0c:	8f ef       	ldi	r24, 0xFF	; 255
    2b0e:	9f ef       	ldi	r25, 0xFF	; 255
    2b10:	2c 96       	adiw	r28, 0x0c	; 12
    2b12:	e2 e1       	ldi	r30, 0x12	; 18
    2b14:	0c 94 4e 16 	jmp	0x2c9c	; 0x2c9c <__epilogue_restores__>

00002b18 <strnlen_P>:
    2b18:	fc 01       	movw	r30, r24
    2b1a:	05 90       	lpm	r0, Z+
    2b1c:	61 50       	subi	r22, 0x01	; 1
    2b1e:	70 40       	sbci	r23, 0x00	; 0
    2b20:	01 10       	cpse	r0, r1
    2b22:	d8 f7       	brcc	.-10     	; 0x2b1a <strnlen_P+0x2>
    2b24:	80 95       	com	r24
    2b26:	90 95       	com	r25
    2b28:	8e 0f       	add	r24, r30
    2b2a:	9f 1f       	adc	r25, r31
    2b2c:	08 95       	ret

00002b2e <strnlen>:
    2b2e:	fc 01       	movw	r30, r24
    2b30:	61 50       	subi	r22, 0x01	; 1
    2b32:	70 40       	sbci	r23, 0x00	; 0
    2b34:	01 90       	ld	r0, Z+
    2b36:	01 10       	cpse	r0, r1
    2b38:	d8 f7       	brcc	.-10     	; 0x2b30 <strnlen+0x2>
    2b3a:	80 95       	com	r24
    2b3c:	90 95       	com	r25
    2b3e:	8e 0f       	add	r24, r30
    2b40:	9f 1f       	adc	r25, r31
    2b42:	08 95       	ret

00002b44 <fputc>:
    2b44:	0f 93       	push	r16
    2b46:	1f 93       	push	r17
    2b48:	cf 93       	push	r28
    2b4a:	df 93       	push	r29
    2b4c:	18 2f       	mov	r17, r24
    2b4e:	09 2f       	mov	r16, r25
    2b50:	eb 01       	movw	r28, r22
    2b52:	8b 81       	ldd	r24, Y+3	; 0x03
    2b54:	81 fd       	sbrc	r24, 1
    2b56:	03 c0       	rjmp	.+6      	; 0x2b5e <fputc+0x1a>
    2b58:	8f ef       	ldi	r24, 0xFF	; 255
    2b5a:	9f ef       	ldi	r25, 0xFF	; 255
    2b5c:	20 c0       	rjmp	.+64     	; 0x2b9e <fputc+0x5a>
    2b5e:	82 ff       	sbrs	r24, 2
    2b60:	10 c0       	rjmp	.+32     	; 0x2b82 <fputc+0x3e>
    2b62:	4e 81       	ldd	r20, Y+6	; 0x06
    2b64:	5f 81       	ldd	r21, Y+7	; 0x07
    2b66:	2c 81       	ldd	r18, Y+4	; 0x04
    2b68:	3d 81       	ldd	r19, Y+5	; 0x05
    2b6a:	42 17       	cp	r20, r18
    2b6c:	53 07       	cpc	r21, r19
    2b6e:	7c f4       	brge	.+30     	; 0x2b8e <fputc+0x4a>
    2b70:	e8 81       	ld	r30, Y
    2b72:	f9 81       	ldd	r31, Y+1	; 0x01
    2b74:	9f 01       	movw	r18, r30
    2b76:	2f 5f       	subi	r18, 0xFF	; 255
    2b78:	3f 4f       	sbci	r19, 0xFF	; 255
    2b7a:	39 83       	std	Y+1, r19	; 0x01
    2b7c:	28 83       	st	Y, r18
    2b7e:	10 83       	st	Z, r17
    2b80:	06 c0       	rjmp	.+12     	; 0x2b8e <fputc+0x4a>
    2b82:	e8 85       	ldd	r30, Y+8	; 0x08
    2b84:	f9 85       	ldd	r31, Y+9	; 0x09
    2b86:	81 2f       	mov	r24, r17
    2b88:	09 95       	icall
    2b8a:	89 2b       	or	r24, r25
    2b8c:	29 f7       	brne	.-54     	; 0x2b58 <fputc+0x14>
    2b8e:	2e 81       	ldd	r18, Y+6	; 0x06
    2b90:	3f 81       	ldd	r19, Y+7	; 0x07
    2b92:	2f 5f       	subi	r18, 0xFF	; 255
    2b94:	3f 4f       	sbci	r19, 0xFF	; 255
    2b96:	3f 83       	std	Y+7, r19	; 0x07
    2b98:	2e 83       	std	Y+6, r18	; 0x06
    2b9a:	81 2f       	mov	r24, r17
    2b9c:	90 2f       	mov	r25, r16
    2b9e:	df 91       	pop	r29
    2ba0:	cf 91       	pop	r28
    2ba2:	1f 91       	pop	r17
    2ba4:	0f 91       	pop	r16
    2ba6:	08 95       	ret

00002ba8 <__ultoa_invert>:
    2ba8:	fa 01       	movw	r30, r20
    2baa:	aa 27       	eor	r26, r26
    2bac:	28 30       	cpi	r18, 0x08	; 8
    2bae:	51 f1       	breq	.+84     	; 0x2c04 <__ultoa_invert+0x5c>
    2bb0:	20 31       	cpi	r18, 0x10	; 16
    2bb2:	81 f1       	breq	.+96     	; 0x2c14 <__ultoa_invert+0x6c>
    2bb4:	e8 94       	clt
    2bb6:	6f 93       	push	r22
    2bb8:	6e 7f       	andi	r22, 0xFE	; 254
    2bba:	6e 5f       	subi	r22, 0xFE	; 254
    2bbc:	7f 4f       	sbci	r23, 0xFF	; 255
    2bbe:	8f 4f       	sbci	r24, 0xFF	; 255
    2bc0:	9f 4f       	sbci	r25, 0xFF	; 255
    2bc2:	af 4f       	sbci	r26, 0xFF	; 255
    2bc4:	b1 e0       	ldi	r27, 0x01	; 1
    2bc6:	3e d0       	rcall	.+124    	; 0x2c44 <__ultoa_invert+0x9c>
    2bc8:	b4 e0       	ldi	r27, 0x04	; 4
    2bca:	3c d0       	rcall	.+120    	; 0x2c44 <__ultoa_invert+0x9c>
    2bcc:	67 0f       	add	r22, r23
    2bce:	78 1f       	adc	r23, r24
    2bd0:	89 1f       	adc	r24, r25
    2bd2:	9a 1f       	adc	r25, r26
    2bd4:	a1 1d       	adc	r26, r1
    2bd6:	68 0f       	add	r22, r24
    2bd8:	79 1f       	adc	r23, r25
    2bda:	8a 1f       	adc	r24, r26
    2bdc:	91 1d       	adc	r25, r1
    2bde:	a1 1d       	adc	r26, r1
    2be0:	6a 0f       	add	r22, r26
    2be2:	71 1d       	adc	r23, r1
    2be4:	81 1d       	adc	r24, r1
    2be6:	91 1d       	adc	r25, r1
    2be8:	a1 1d       	adc	r26, r1
    2bea:	20 d0       	rcall	.+64     	; 0x2c2c <__ultoa_invert+0x84>
    2bec:	09 f4       	brne	.+2      	; 0x2bf0 <__ultoa_invert+0x48>
    2bee:	68 94       	set
    2bf0:	3f 91       	pop	r19
    2bf2:	2a e0       	ldi	r18, 0x0A	; 10
    2bf4:	26 9f       	mul	r18, r22
    2bf6:	11 24       	eor	r1, r1
    2bf8:	30 19       	sub	r19, r0
    2bfa:	30 5d       	subi	r19, 0xD0	; 208
    2bfc:	31 93       	st	Z+, r19
    2bfe:	de f6       	brtc	.-74     	; 0x2bb6 <__ultoa_invert+0xe>
    2c00:	cf 01       	movw	r24, r30
    2c02:	08 95       	ret
    2c04:	46 2f       	mov	r20, r22
    2c06:	47 70       	andi	r20, 0x07	; 7
    2c08:	40 5d       	subi	r20, 0xD0	; 208
    2c0a:	41 93       	st	Z+, r20
    2c0c:	b3 e0       	ldi	r27, 0x03	; 3
    2c0e:	0f d0       	rcall	.+30     	; 0x2c2e <__ultoa_invert+0x86>
    2c10:	c9 f7       	brne	.-14     	; 0x2c04 <__ultoa_invert+0x5c>
    2c12:	f6 cf       	rjmp	.-20     	; 0x2c00 <__ultoa_invert+0x58>
    2c14:	46 2f       	mov	r20, r22
    2c16:	4f 70       	andi	r20, 0x0F	; 15
    2c18:	40 5d       	subi	r20, 0xD0	; 208
    2c1a:	4a 33       	cpi	r20, 0x3A	; 58
    2c1c:	18 f0       	brcs	.+6      	; 0x2c24 <__ultoa_invert+0x7c>
    2c1e:	49 5d       	subi	r20, 0xD9	; 217
    2c20:	31 fd       	sbrc	r19, 1
    2c22:	40 52       	subi	r20, 0x20	; 32
    2c24:	41 93       	st	Z+, r20
    2c26:	02 d0       	rcall	.+4      	; 0x2c2c <__ultoa_invert+0x84>
    2c28:	a9 f7       	brne	.-22     	; 0x2c14 <__ultoa_invert+0x6c>
    2c2a:	ea cf       	rjmp	.-44     	; 0x2c00 <__ultoa_invert+0x58>
    2c2c:	b4 e0       	ldi	r27, 0x04	; 4
    2c2e:	a6 95       	lsr	r26
    2c30:	97 95       	ror	r25
    2c32:	87 95       	ror	r24
    2c34:	77 95       	ror	r23
    2c36:	67 95       	ror	r22
    2c38:	ba 95       	dec	r27
    2c3a:	c9 f7       	brne	.-14     	; 0x2c2e <__ultoa_invert+0x86>
    2c3c:	00 97       	sbiw	r24, 0x00	; 0
    2c3e:	61 05       	cpc	r22, r1
    2c40:	71 05       	cpc	r23, r1
    2c42:	08 95       	ret
    2c44:	9b 01       	movw	r18, r22
    2c46:	ac 01       	movw	r20, r24
    2c48:	0a 2e       	mov	r0, r26
    2c4a:	06 94       	lsr	r0
    2c4c:	57 95       	ror	r21
    2c4e:	47 95       	ror	r20
    2c50:	37 95       	ror	r19
    2c52:	27 95       	ror	r18
    2c54:	ba 95       	dec	r27
    2c56:	c9 f7       	brne	.-14     	; 0x2c4a <__ultoa_invert+0xa2>
    2c58:	62 0f       	add	r22, r18
    2c5a:	73 1f       	adc	r23, r19
    2c5c:	84 1f       	adc	r24, r20
    2c5e:	95 1f       	adc	r25, r21
    2c60:	a0 1d       	adc	r26, r0
    2c62:	08 95       	ret

00002c64 <__prologue_saves__>:
    2c64:	2f 92       	push	r2
    2c66:	3f 92       	push	r3
    2c68:	4f 92       	push	r4
    2c6a:	5f 92       	push	r5
    2c6c:	6f 92       	push	r6
    2c6e:	7f 92       	push	r7
    2c70:	8f 92       	push	r8
    2c72:	9f 92       	push	r9
    2c74:	af 92       	push	r10
    2c76:	bf 92       	push	r11
    2c78:	cf 92       	push	r12
    2c7a:	df 92       	push	r13
    2c7c:	ef 92       	push	r14
    2c7e:	ff 92       	push	r15
    2c80:	0f 93       	push	r16
    2c82:	1f 93       	push	r17
    2c84:	cf 93       	push	r28
    2c86:	df 93       	push	r29
    2c88:	cd b7       	in	r28, 0x3d	; 61
    2c8a:	de b7       	in	r29, 0x3e	; 62
    2c8c:	ca 1b       	sub	r28, r26
    2c8e:	db 0b       	sbc	r29, r27
    2c90:	0f b6       	in	r0, 0x3f	; 63
    2c92:	f8 94       	cli
    2c94:	de bf       	out	0x3e, r29	; 62
    2c96:	0f be       	out	0x3f, r0	; 63
    2c98:	cd bf       	out	0x3d, r28	; 61
    2c9a:	09 94       	ijmp

00002c9c <__epilogue_restores__>:
    2c9c:	2a 88       	ldd	r2, Y+18	; 0x12
    2c9e:	39 88       	ldd	r3, Y+17	; 0x11
    2ca0:	48 88       	ldd	r4, Y+16	; 0x10
    2ca2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ca4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ca6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ca8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2caa:	9b 84       	ldd	r9, Y+11	; 0x0b
    2cac:	aa 84       	ldd	r10, Y+10	; 0x0a
    2cae:	b9 84       	ldd	r11, Y+9	; 0x09
    2cb0:	c8 84       	ldd	r12, Y+8	; 0x08
    2cb2:	df 80       	ldd	r13, Y+7	; 0x07
    2cb4:	ee 80       	ldd	r14, Y+6	; 0x06
    2cb6:	fd 80       	ldd	r15, Y+5	; 0x05
    2cb8:	0c 81       	ldd	r16, Y+4	; 0x04
    2cba:	1b 81       	ldd	r17, Y+3	; 0x03
    2cbc:	aa 81       	ldd	r26, Y+2	; 0x02
    2cbe:	b9 81       	ldd	r27, Y+1	; 0x01
    2cc0:	ce 0f       	add	r28, r30
    2cc2:	d1 1d       	adc	r29, r1
    2cc4:	0f b6       	in	r0, 0x3f	; 63
    2cc6:	f8 94       	cli
    2cc8:	de bf       	out	0x3e, r29	; 62
    2cca:	0f be       	out	0x3f, r0	; 63
    2ccc:	cd bf       	out	0x3d, r28	; 61
    2cce:	ed 01       	movw	r28, r26
    2cd0:	08 95       	ret

00002cd2 <_exit>:
    2cd2:	f8 94       	cli

00002cd4 <__stop_program>:
    2cd4:	ff cf       	rjmp	.-2      	; 0x2cd4 <__stop_program>
